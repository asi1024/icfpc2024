// Generated by Haxe 4.3.1
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_ds__$StringMap_StringMapKeyValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = true;
haxe_ds__$StringMap_StringMapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		var key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var hgsl_AttributeType = $hxEnums["hgsl.AttributeType"] = { __ename__:true,__constructs__:null
	,Float: {_hx_name:"Float",_hx_index:0,__enum__:"hgsl.AttributeType",toString:$estr}
	,Int: {_hx_name:"Int",_hx_index:1,__enum__:"hgsl.AttributeType",toString:$estr}
	,UInt: {_hx_name:"UInt",_hx_index:2,__enum__:"hgsl.AttributeType",toString:$estr}
	,Vec: ($_=function(dim) { return {_hx_index:3,dim:dim,__enum__:"hgsl.AttributeType",toString:$estr}; },$_._hx_name="Vec",$_.__params__ = ["dim"],$_)
	,IVec: ($_=function(dim) { return {_hx_index:4,dim:dim,__enum__:"hgsl.AttributeType",toString:$estr}; },$_._hx_name="IVec",$_.__params__ = ["dim"],$_)
	,UVec: ($_=function(dim) { return {_hx_index:5,dim:dim,__enum__:"hgsl.AttributeType",toString:$estr}; },$_._hx_name="UVec",$_.__params__ = ["dim"],$_)
	,Mat: ($_=function(cols,rows) { return {_hx_index:6,cols:cols,rows:rows,__enum__:"hgsl.AttributeType",toString:$estr}; },$_._hx_name="Mat",$_.__params__ = ["cols","rows"],$_)
};
hgsl_AttributeType.__constructs__ = [hgsl_AttributeType.Float,hgsl_AttributeType.Int,hgsl_AttributeType.UInt,hgsl_AttributeType.Vec,hgsl_AttributeType.IVec,hgsl_AttributeType.UVec,hgsl_AttributeType.Mat];
var hgsl_ShaderMain = function() { };
hgsl_ShaderMain.__name__ = true;
var hgsl_ShaderModule = function() { };
hgsl_ShaderModule.__name__ = true;
var hgsl_ShaderStruct = function() { };
hgsl_ShaderStruct.__name__ = true;
var hgsl_UniformArray = {};
hgsl_UniformArray.get = function(this1,i) {
	return this1.data[i];
};
hgsl_UniformArray.get_length = function(this1) {
	return this1.data.length;
};
hgsl_UniformArray.iterator = function(this1) {
	return new haxe_iterators_ArrayIterator(this1.data);
};
hgsl_UniformArray.map = function(this1,f) {
	var _this = this1.data;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(_this[i]);
	}
	return result;
};
hgsl_UniformArray.toUniform = function(this1) {
	return { name : this1.name, type : this1.type};
};
var hgsl_UniformArrayData = function(data,name,type) {
	this.data = data;
	this.name = name;
	this.type = type;
};
hgsl_UniformArrayData.__name__ = true;
var hgsl_UniformType = $hxEnums["hgsl.UniformType"] = { __ename__:true,__constructs__:null
	,Float: {_hx_name:"Float",_hx_index:0,__enum__:"hgsl.UniformType",toString:$estr}
	,Int: {_hx_name:"Int",_hx_index:1,__enum__:"hgsl.UniformType",toString:$estr}
	,UInt: {_hx_name:"UInt",_hx_index:2,__enum__:"hgsl.UniformType",toString:$estr}
	,Bool: {_hx_name:"Bool",_hx_index:3,__enum__:"hgsl.UniformType",toString:$estr}
	,Vec: ($_=function(dim) { return {_hx_index:4,dim:dim,__enum__:"hgsl.UniformType",toString:$estr}; },$_._hx_name="Vec",$_.__params__ = ["dim"],$_)
	,IVec: ($_=function(dim) { return {_hx_index:5,dim:dim,__enum__:"hgsl.UniformType",toString:$estr}; },$_._hx_name="IVec",$_.__params__ = ["dim"],$_)
	,UVec: ($_=function(dim) { return {_hx_index:6,dim:dim,__enum__:"hgsl.UniformType",toString:$estr}; },$_._hx_name="UVec",$_.__params__ = ["dim"],$_)
	,BVec: ($_=function(dim) { return {_hx_index:7,dim:dim,__enum__:"hgsl.UniformType",toString:$estr}; },$_._hx_name="BVec",$_.__params__ = ["dim"],$_)
	,Mat: ($_=function(cols,rows) { return {_hx_index:8,cols:cols,rows:rows,__enum__:"hgsl.UniformType",toString:$estr}; },$_._hx_name="Mat",$_.__params__ = ["cols","rows"],$_)
	,Sampler: ($_=function(type) { return {_hx_index:9,type:type,__enum__:"hgsl.UniformType",toString:$estr}; },$_._hx_name="Sampler",$_.__params__ = ["type"],$_)
	,Array: ($_=function(type,size) { return {_hx_index:10,type:type,size:size,__enum__:"hgsl.UniformType",toString:$estr}; },$_._hx_name="Array",$_.__params__ = ["type","size"],$_)
	,Struct: {_hx_name:"Struct",_hx_index:11,__enum__:"hgsl.UniformType",toString:$estr}
};
hgsl_UniformType.__constructs__ = [hgsl_UniformType.Float,hgsl_UniformType.Int,hgsl_UniformType.UInt,hgsl_UniformType.Bool,hgsl_UniformType.Vec,hgsl_UniformType.IVec,hgsl_UniformType.UVec,hgsl_UniformType.BVec,hgsl_UniformType.Mat,hgsl_UniformType.Sampler,hgsl_UniformType.Array,hgsl_UniformType.Struct];
var hgsl_SamplerType = $hxEnums["hgsl.SamplerType"] = { __ename__:true,__constructs__:null
	,Sampler2D: {_hx_name:"Sampler2D",_hx_index:0,__enum__:"hgsl.SamplerType",toString:$estr}
	,Sampler3D: {_hx_name:"Sampler3D",_hx_index:1,__enum__:"hgsl.SamplerType",toString:$estr}
	,SamplerCube: {_hx_name:"SamplerCube",_hx_index:2,__enum__:"hgsl.SamplerType",toString:$estr}
	,SamplerCubeShadow: {_hx_name:"SamplerCubeShadow",_hx_index:3,__enum__:"hgsl.SamplerType",toString:$estr}
	,Sampler2DShadow: {_hx_name:"Sampler2DShadow",_hx_index:4,__enum__:"hgsl.SamplerType",toString:$estr}
	,Sampler2DArray: {_hx_name:"Sampler2DArray",_hx_index:5,__enum__:"hgsl.SamplerType",toString:$estr}
	,Sampler2DArrayShadow: {_hx_name:"Sampler2DArrayShadow",_hx_index:6,__enum__:"hgsl.SamplerType",toString:$estr}
	,ISampler2D: {_hx_name:"ISampler2D",_hx_index:7,__enum__:"hgsl.SamplerType",toString:$estr}
	,ISampler3D: {_hx_name:"ISampler3D",_hx_index:8,__enum__:"hgsl.SamplerType",toString:$estr}
	,ISamplerCube: {_hx_name:"ISamplerCube",_hx_index:9,__enum__:"hgsl.SamplerType",toString:$estr}
	,ISampler2DArray: {_hx_name:"ISampler2DArray",_hx_index:10,__enum__:"hgsl.SamplerType",toString:$estr}
	,USampler2D: {_hx_name:"USampler2D",_hx_index:11,__enum__:"hgsl.SamplerType",toString:$estr}
	,USampler3D: {_hx_name:"USampler3D",_hx_index:12,__enum__:"hgsl.SamplerType",toString:$estr}
	,USamplerCube: {_hx_name:"USamplerCube",_hx_index:13,__enum__:"hgsl.SamplerType",toString:$estr}
	,USampler2DArray: {_hx_name:"USampler2DArray",_hx_index:14,__enum__:"hgsl.SamplerType",toString:$estr}
};
hgsl_SamplerType.__constructs__ = [hgsl_SamplerType.Sampler2D,hgsl_SamplerType.Sampler3D,hgsl_SamplerType.SamplerCube,hgsl_SamplerType.SamplerCubeShadow,hgsl_SamplerType.Sampler2DShadow,hgsl_SamplerType.Sampler2DArray,hgsl_SamplerType.Sampler2DArrayShadow,hgsl_SamplerType.ISampler2D,hgsl_SamplerType.ISampler3D,hgsl_SamplerType.ISamplerCube,hgsl_SamplerType.ISampler2DArray,hgsl_SamplerType.USampler2D,hgsl_SamplerType.USampler3D,hgsl_SamplerType.USamplerCube,hgsl_SamplerType.USampler2DArray];
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var muun_la_Mat2 = {};
muun_la_Mat2._new = function(e00,e01,e10,e11) {
	return new muun_la__$Mat2_Mat2Data(e00,e01,e10,e11);
};
muun_la_Mat2.toString = function(this1) {
	return "Mat3(" + this1.e00 + ", " + this1.e01 + "; " + this1.e10 + ", " + this1.e11 + ")";
};
var muun_la__$Mat2_Mat2Data = function(e00,e01,e10,e11) {
	this.e00 = e00;
	this.e01 = e01;
	this.e10 = e10;
	this.e11 = e11;
};
muun_la__$Mat2_Mat2Data.__name__ = true;
var muun_la_Mat3 = {};
muun_la_Mat3._new = function(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
	return new muun_la__$Mat3_Mat3Data(e00,e01,e02,e10,e11,e12,e20,e21,e22);
};
muun_la_Mat3.toString = function(this1) {
	return "Mat3(" + this1.e00 + ", " + this1.e01 + ", " + this1.e02 + "; " + this1.e10 + ", " + this1.e11 + ", " + this1.e12 + "; " + this1.e20 + ", " + this1.e21 + ", " + this1.e22 + ")";
};
var muun_la__$Mat3_Mat3Data = function(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
	this.e00 = e00;
	this.e01 = e01;
	this.e02 = e02;
	this.e10 = e10;
	this.e11 = e11;
	this.e12 = e12;
	this.e20 = e20;
	this.e21 = e21;
	this.e22 = e22;
};
muun_la__$Mat3_Mat3Data.__name__ = true;
var muun_la_Mat4 = {};
muun_la_Mat4._new = function(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
	return new muun_la__$Mat4_Mat4Data(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33);
};
muun_la_Mat4.toString = function(this1) {
	return "Mat4(" + this1.e00 + ", " + this1.e01 + ", " + this1.e02 + ", " + this1.e03 + "; " + this1.e10 + ", " + this1.e11 + ", " + this1.e12 + ", " + this1.e13 + "; " + this1.e20 + ", " + this1.e21 + ", " + this1.e22 + ", " + this1.e23 + "; " + this1.e30 + ", " + this1.e31 + ", " + this1.e32 + ", " + this1.e33 + ")";
};
var muun_la__$Mat4_Mat4Data = function(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
	this.e00 = e00;
	this.e01 = e01;
	this.e02 = e02;
	this.e03 = e03;
	this.e10 = e10;
	this.e11 = e11;
	this.e12 = e12;
	this.e13 = e13;
	this.e20 = e20;
	this.e21 = e21;
	this.e22 = e22;
	this.e23 = e23;
	this.e30 = e30;
	this.e31 = e31;
	this.e32 = e32;
	this.e33 = e33;
};
muun_la__$Mat4_Mat4Data.__name__ = true;
var muun_la_Quat = {};
muun_la_Quat.toString = function(this1) {
	return "Quat(" + this1.x + ", " + this1.y + ", " + this1.z + "; " + this1.w + ")";
};
var muun_la__$Quat_QuatData = function(x,y,z,w) {
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
muun_la__$Quat_QuatData.__name__ = true;
var muun_la_Vec2 = {};
muun_la_Vec2._new = function(x,y) {
	return new muun_la__$Vec2_Vec2Data(x,y);
};
muun_la_Vec2.toString = function(this1) {
	return "Vec2(" + this1.x + ", " + this1.y + ")";
};
var muun_la__$Vec2_Vec2Data = function(x,y) {
	this.x = x;
	this.y = y;
};
muun_la__$Vec2_Vec2Data.__name__ = true;
var muun_la_Vec3 = {};
muun_la_Vec3._new = function(x,y,z) {
	return new muun_la__$Vec3_Vec3Data(x,y,z);
};
muun_la_Vec3.toString = function(this1) {
	return "Vec3(" + this1.x + ", " + this1.y + ", " + this1.z + ")";
};
var muun_la__$Vec3_Vec3Data = function(x,y,z) {
	this.x = x;
	this.y = y;
	this.z = z;
};
muun_la__$Vec3_Vec3Data.__name__ = true;
var muun_la_Vec4 = {};
muun_la_Vec4._new = function(x,y,z,w) {
	return new muun_la__$Vec4_Vec4Data(x,y,z,w);
};
muun_la_Vec4.toString = function(this1) {
	return "Vec4(" + this1.x + ", " + this1.y + ", " + this1.z + ", " + this1.w + ")";
};
var muun_la__$Vec4_Vec4Data = function(x,y,z,w) {
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
muun_la__$Vec4_Vec4Data.__name__ = true;
var pot_concurrent_Async = function() { };
pot_concurrent_Async.__name__ = true;
var pot_concurrent_Blocker = function() {
	var resolveFunc;
	this.value = new Promise(function(resolve,reject) {
		resolveFunc = resolve;
	});
	this.unblock = function() {
		resolveFunc(0);
	};
};
pot_concurrent_Blocker.__name__ = true;
var pot_core_App = function(canvas,inputTarget,captureKey,captureWheel) {
	if(captureWheel == null) {
		captureWheel = true;
	}
	if(captureKey == null) {
		captureKey = false;
	}
	if(inputTarget == null) {
		inputTarget = pot_input_InputTarget.Canvas;
	}
	this.canvas = canvas;
	this.pot = new pot_core_Pot(this,canvas);
	switch(inputTarget._hx_index) {
	case 0:
		this.input = new pot_input_Input(canvas,this.pot,canvas,captureKey,captureWheel);
		break;
	case 1:
		this.input = new pot_input_Input(canvas,this.pot,window.document.documentElement,captureKey,captureWheel);
		break;
	case 2:
		this.input = null;
		break;
	}
	this.frameCount = -1;
	this.setup();
	this.pot.beginObservation();
};
pot_core_App.__name__ = true;
pot_core_App.isWorker = function() {
	try {
		return window.document == null;
	} catch( _g ) {
		return true;
	}
};
pot_core_App.prototype = {
	resized: function() {
	}
	,setup: function() {
	}
	,update: function() {
	}
	,draw: function() {
	}
};
var pot_core_FrameRate = $hxEnums["pot.core.FrameRate"] = { __ename__:true,__constructs__:null
	,Auto: {_hx_name:"Auto",_hx_index:0,__enum__:"pot.core.FrameRate",toString:$estr}
	,Fixed: ($_=function(fps) { return {_hx_index:1,fps:fps,__enum__:"pot.core.FrameRate",toString:$estr}; },$_._hx_name="Fixed",$_.__params__ = ["fps"],$_)
};
pot_core_FrameRate.__constructs__ = [pot_core_FrameRate.Auto,pot_core_FrameRate.Fixed];
var pot_core_FrameRateManager = function(update,draw) {
	this.doNotAdjust = false;
	this.frameSkipEnabled = true;
	this.count = 0;
	this.targetInterval = 16.666666666666668;
	this.update = update;
	this.draw = draw;
};
pot_core_FrameRateManager.__name__ = true;
pot_core_FrameRateManager.prototype = {
	start: function() {
		if(this.running) {
			return;
		}
		this.prevTime = window.performance.now() - this.targetInterval;
		this.estimatedUpdateTime = this.targetInterval;
		this.running = true;
		window.setTimeout($bind(this,this.loop),0);
	}
	,stop: function() {
		if(!this.running) {
			return;
		}
		this.running = false;
	}
	,setFrameRate: function(frameRate) {
		this.targetInterval = 1000 / frameRate;
	}
	,loop: function() {
		(async () => {
		if(!this.running) {
			return;
		}
		this.count++;
		if(this.doNotAdjust) {
			var blocker = new pot_concurrent_Blocker();
			if(pot_core_FrameRateManager.catchErrors) {
				try {
					this.update(1,blocker.unblock);
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g);
					window.alert(Std.string(_g1));
				}
			} else {
				this.update(1,blocker.unblock);
			}
			await blocker.value;
			var f = this.draw;
			if(pot_core_FrameRateManager.catchErrors) {
				try {
					f();
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g);
					window.alert(Std.string(_g1));
				}
			} else {
				f();
			}
		} else {
			var currentTime = window.performance.now();
			var a = this.lastDrawBegin + this.targetInterval * 4;
			var b = currentTime + 4;
			var maxDrawBegin = a > b ? a : b;
			var maxUpdateCount;
			if(!this.frameSkipEnabled || this.count < 10) {
				maxUpdateCount = 1;
			} else {
				var b = Math.round((maxDrawBegin - currentTime) / this.estimatedUpdateTime);
				maxUpdateCount = 1 > b ? 1 : b;
			}
			var a = this.targetInterval * 0.01;
			var b = this.targetInterval - this.estimatedUpdateTime;
			var idealUpdateCountFloat = (currentTime - this.prevTime) / (a > b ? a : b);
			var idealUpdateCount = idealUpdateCountFloat > 0.2 && idealUpdateCountFloat < 1.8 ? 1 : Math.round(idealUpdateCountFloat);
			var updateCount = idealUpdateCount < maxUpdateCount ? idealUpdateCount : maxUpdateCount;
			if(updateCount > 0) {
				var p = currentTime;
				var nextLast = false;
				var _g = 0;
				var _g1 = updateCount;
				while(_g < _g1) {
					var i = _g++;
					var blocker = new pot_concurrent_Blocker();
					if(pot_core_FrameRateManager.catchErrors) {
						try {
							this.update(nextLast ? 1 : (i + 1) / updateCount,blocker.unblock);
						} catch( _g2 ) {
							var _g3 = haxe_Exception.caught(_g2);
							window.alert(Std.string(_g3));
						}
					} else {
						this.update(nextLast ? 1 : (i + 1) / updateCount,blocker.unblock);
					}
					await blocker.value;
					var n = window.performance.now();
					this.estimatedUpdateTime += (n - p - this.estimatedUpdateTime) * 0.5;
					p = n;
					this.prevTime += this.targetInterval;
					if(nextLast) {
						break;
					}
					if(n > maxDrawBegin) {
						nextLast = true;
					}
				}
				var a = this.prevTime;
				var a1 = this.targetInterval * 4;
				var b = p - (a1 > 4 ? a1 : 4);
				this.prevTime = a > b ? a : b;
				this.lastDrawBegin = p;
				var f = this.draw;
				if(pot_core_FrameRateManager.catchErrors) {
					try {
						f();
					} catch( _g ) {
						var _g1 = haxe_Exception.caught(_g);
						window.alert(Std.string(_g1));
					}
				} else {
					f();
				}
			}
		}
		window.requestAnimationFrame($bind(this,this.loop));
		})();
	}
};
var pot_core_Pot = function(app,canvas) {
	this.onEndUpdate = null;
	this.asyncUpdate = false;
	this.app = app;
	this.canvas = canvas;
	this.resize();
	this.frameRateManager = new pot_core_FrameRateManager($bind(this,this.update),$bind(this,this.draw));
	this.frameRate(pot_core_FrameRate.Fixed(60));
};
pot_core_Pot.__name__ = true;
pot_core_Pot.prototype = {
	frameRate: function(frameRate) {
		switch(frameRate._hx_index) {
		case 0:
			this.frameRateManager.setFrameRate(60);
			this.frameRateManager.doNotAdjust = true;
			break;
		case 1:
			this.frameRateManager.setFrameRate(frameRate.fps);
			this.frameRateManager.doNotAdjust = false;
			break;
		}
	}
	,frameSkip: function(enable) {
		this.frameRateManager.frameSkipEnabled = enable;
	}
	,isMobile: function() {
		return new EReg("iPhone|Android.+Mobile","").match($global.navigator.userAgent);
	}
	,beginObservation: function() {
		var _gthis = this;
		this.obs = new ResizeObserver(function(_) {
			if(_gthis.resize()) {
				_gthis.app.resized();
			}
		});
		this.obs.observe(this.canvas);
		this.obs.observe(window.document.documentElement);
		this.app.resized();
	}
	,get_size: function() {
		return new muun_la__$Vec2_Vec2Data(this.width,this.height);
	}
	,resize: function() {
		var w = this.canvas.clientWidth;
		var h = this.canvas.clientHeight;
		var dpr = window.devicePixelRatio;
		if(this.width != w || this.height != h || this.pixelRatio != dpr) {
			this.width = w;
			this.height = h;
			this.pixelRatio = dpr;
			this.canvas.width = this.width * this.pixelRatio + 0.5 | 0;
			this.canvas.height = this.height * this.pixelRatio + 0.5 | 0;
			return true;
		} else {
			return false;
		}
	}
	,start: function() {
		this.frameRateManager.start();
	}
	,stop: function() {
		this.frameRateManager.stop();
	}
	,update: function(substepRatio,callback) {
		this.app.frameCount++;
		if(this.app.input != null) {
			this.app.input.update(substepRatio);
		}
		if(this.asyncUpdate) {
			this.onEndUpdate = callback;
			this.app.update();
		} else {
			this.app.update();
			callback();
		}
	}
	,endUpdate: function() {
		if(!this.asyncUpdate) {
			throw haxe_Exception.thrown("enable async update is disabled");
		}
		if(this.onEndUpdate == null) {
			throw haxe_Exception.thrown("callback function not set");
		}
		this.onEndUpdate();
		this.onEndUpdate = null;
	}
	,draw: function() {
		this.app.draw();
	}
};
var pot_graphics_bitmap_Bitmap = function(width,height) {
	this.imageData = null;
	this.pixels = null;
	this.numPixels = -1;
	this.height = -1;
	this.width = -1;
	this.canvas = window.document.createElement("canvas");
	this.c2d = this.canvas.getContext("2d",null);
	this.g = new pot_graphics_bitmap_BitmapGraphics(this.c2d);
	this.setSize(width,height);
};
pot_graphics_bitmap_Bitmap.__name__ = true;
pot_graphics_bitmap_Bitmap.prototype = {
	getRawCanvas: function() {
		return this.canvas;
	}
	,getGraphics: function() {
		return this.g;
	}
	,setSize: function(width,height) {
		this.width = width;
		this.height = height;
		this.numPixels = width * height;
		this.canvas.width = width;
		this.canvas.height = height;
		this.pixels = null;
	}
	,loadPixels: function() {
		if(this.pixels == null || this.pixels.length != this.numPixels) {
			this.pixels = new Array(this.numPixels);
		}
		this.imageData = this.c2d.getImageData(0,0,this.width,this.height);
		var data = this.imageData.data;
		var idx = 0;
		var _g = 0;
		var _g1 = this.numPixels;
		while(_g < _g1) {
			var r = data[idx++];
			var g = data[idx++];
			var b = data[idx++];
			this.pixels[_g++] = data[idx++] << 24 | r << 16 | g << 8 | b;
		}
	}
	,updatePixels: function() {
		if(this.pixels == null || this.pixels.length != this.numPixels) {
			throw haxe_Exception.thrown("incompatible pixel data");
		}
		var data = this.imageData.data;
		var idx = 0;
		var _g = 0;
		var _g1 = this.numPixels;
		while(_g < _g1) {
			var pix = this.pixels[_g++];
			data[idx++] = pix >> 16 & 255;
			data[idx++] = pix >> 8 & 255;
			data[idx++] = pix & 255;
			data[idx++] = pix >>> 24;
		}
		this.c2d.putImageData(this.imageData,0,0);
	}
};
var pot_graphics_bitmap_BitmapGraphics = function(c2d) {
	this.canvas = c2d.canvas;
	this.c2d = c2d;
};
pot_graphics_bitmap_BitmapGraphics.__name__ = true;
pot_graphics_bitmap_BitmapGraphics.prototype = {
	clear: function(r,g,b,a) {
		if(a == null) {
			a = 1;
		}
		if(b == null) {
			b = 0;
		}
		if(g == null) {
			g = 0;
		}
		if(r == null) {
			r = 0;
		}
		this.c2d.save();
		this.c2d.clearRect(0,0,this.canvas.width,this.canvas.height);
		this.c2d.globalAlpha = 1;
		this.c2d.globalCompositeOperation = "source-over";
		var a1 = a;
		if(a == null) {
			a1 = 1.0;
		}
		this.c2d.fillStyle = "rgba(" + (r * 255 + 0.5 | 0) + ", " + (g * 255 + 0.5 | 0) + ", " + (b * 255 + 0.5 | 0) + ", " + a1 + ")";
		this.c2d.fillRect(0,0,this.canvas.width,this.canvas.height);
		this.c2d.restore();
	}
};
var pot_graphics_bitmap_BitmapSource = {};
pot_graphics_bitmap_BitmapSource._new = function(source,width,height) {
	return new pot_graphics_bitmap__$BitmapSource_BitmapSourceData(source,width,height);
};
pot_graphics_bitmap_BitmapSource.fromBitmap = function(source) {
	return new pot_graphics_bitmap__$BitmapSource_BitmapSourceData(source.canvas,source.width,source.height);
};
pot_graphics_bitmap_BitmapSource.fromImageData = function(source) {
	return new pot_graphics_bitmap__$BitmapSource_BitmapSourceData(source,source.width,source.height);
};
pot_graphics_bitmap_BitmapSource.fromImageElement = function(source) {
	return new pot_graphics_bitmap__$BitmapSource_BitmapSourceData(source,source.naturalWidth,source.naturalHeight);
};
pot_graphics_bitmap_BitmapSource.fromCanvasElement = function(source) {
	return new pot_graphics_bitmap__$BitmapSource_BitmapSourceData(source,source.width,source.height);
};
pot_graphics_bitmap_BitmapSource.fromVideoElement = function(source) {
	return new pot_graphics_bitmap__$BitmapSource_BitmapSourceData(source,source.videoWidth,source.videoHeight);
};
var pot_graphics_bitmap__$BitmapSource_BitmapSourceData = function(source,width,height) {
	this.source = source;
	this.width = width;
	this.height = height;
};
pot_graphics_bitmap__$BitmapSource_BitmapSourceData.__name__ = true;
var pot_graphics_gl_Attribute = $hxEnums["pot.graphics.gl.Attribute"] = { __ename__:true,__constructs__:null
	,Position: ($_=function(location) { return {_hx_index:0,location:location,__enum__:"pot.graphics.gl.Attribute",toString:$estr}; },$_._hx_name="Position",$_.__params__ = ["location"],$_)
	,Color: ($_=function(location) { return {_hx_index:1,location:location,__enum__:"pot.graphics.gl.Attribute",toString:$estr}; },$_._hx_name="Color",$_.__params__ = ["location"],$_)
	,Normal: ($_=function(location) { return {_hx_index:2,location:location,__enum__:"pot.graphics.gl.Attribute",toString:$estr}; },$_._hx_name="Normal",$_.__params__ = ["location"],$_)
	,TexCoord: ($_=function(location) { return {_hx_index:3,location:location,__enum__:"pot.graphics.gl.Attribute",toString:$estr}; },$_._hx_name="TexCoord",$_.__params__ = ["location"],$_)
	,Custom: ($_=function(buffer,location,divisor) { return {_hx_index:4,buffer:buffer,location:location,divisor:divisor,__enum__:"pot.graphics.gl.Attribute",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["buffer","location","divisor"],$_)
};
pot_graphics_gl_Attribute.__constructs__ = [pot_graphics_gl_Attribute.Position,pot_graphics_gl_Attribute.Color,pot_graphics_gl_Attribute.Normal,pot_graphics_gl_Attribute.TexCoord,pot_graphics_gl_Attribute.Custom];
var pot_graphics_gl_FloatBufferWriter = function(buffer,usage) {
	this.changed = false;
	this.length = 0;
	this.data = new Float32Array(512);
	this.buffer = buffer;
	this.usage = usage;
	this.maxLength = this.data.length;
};
pot_graphics_gl_FloatBufferWriter.__name__ = true;
pot_graphics_gl_FloatBufferWriter.prototype = {
	expand: function() {
		var oldData = this.data;
		this.data = new Float32Array(this.maxLength <<= 1);
		this.data.set(oldData);
	}
};
var pot_graphics_gl_GLObject = function(gl) {
	this.disposed = false;
	this.gl = gl;
};
pot_graphics_gl_GLObject.__name__ = true;
pot_graphics_gl_GLObject.prototype = {
	dispose: function() {
		if(this.disposed) {
			return;
		}
		this.disposed = true;
		this.disposeImpl();
	}
};
var pot_graphics_gl_FrameBuffer = function(gl,textures,init) {
	pot_graphics_gl_GLObject.call(this,gl);
	this.textures = textures.slice();
	this.depth = gl.createRenderbuffer();
	this.framebuffer = gl.createFramebuffer();
	if(init) {
		this.initBuffers();
	}
};
pot_graphics_gl_FrameBuffer.__name__ = true;
pot_graphics_gl_FrameBuffer.__super__ = pot_graphics_gl_GLObject;
pot_graphics_gl_FrameBuffer.prototype = $extend(pot_graphics_gl_GLObject.prototype,{
	initBuffers: function() {
		this.width = this.textures[0].width;
		this.height = this.textures[0].height;
		var type = this.textures[0].type;
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			if(texture.type != type) {
				throw haxe_Exception.thrown("all textures must have the same type");
			}
			if(texture.width != this.width || texture.height != this.height) {
				throw haxe_Exception.thrown("all texture sizes must be the same");
			}
		}
		this.gl.bindRenderbuffer(36161,this.depth);
		this.gl.renderbufferStorage(36161,36012,this.width,this.height);
		this.gl.bindRenderbuffer(36161,null);
		this.gl.bindFramebuffer(36160,this.framebuffer);
		this.gl.framebufferRenderbuffer(36160,36096,36161,this.depth);
		var _this = this.textures;
		var _g_current = 0;
		while(_g_current < _this.length) {
			var _g_value = _this[_g_current++];
			this.gl.framebufferTexture2D(36160,36064 + (_g_current - 1),3553,_g_value.getRawTexture(),0);
		}
		this.gl.bindFramebuffer(36160,null);
	}
	,getRawFrameBuffer: function() {
		return this.framebuffer;
	}
	,getRawDepthBuffer: function() {
		return this.depth;
	}
	,disposeImpl: function() {
		this.gl.deleteRenderbuffer(this.depth);
		this.gl.deleteFramebuffer(this.framebuffer);
	}
});
var pot_graphics_gl_Graphics = function(canvas) {
	this.unitSphereIs = [];
	this.unitSphereVs = [];
	this.lightBuf = new Array(pot_graphics_gl_shader_Consts.consts.MAX_LIGHTS);
	this.vpSet = false;
	this.vpMat = new muun_la__$Mat4_Mat4Data(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.mvpMat = new muun_la__$Mat4_Mat4Data(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.projMat = new muun_la__$Mat4_Mat4Data(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.viewMat = new muun_la__$Mat4_Mat4Data(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.modelMat = new muun_la__$Mat4_Mat4Data(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.cameraUp = new muun_la__$Vec3_Vec3Data(0,0,0);
	this.cameraAt = new muun_la__$Vec3_Vec3Data(0,0,0);
	this.cameraPos = new muun_la__$Vec3_Vec3Data(0,0,0);
	this.defaultCameraPos = new muun_la__$Vec3_Vec3Data(0,0,0);
	this.cameraSet = false;
	this.defaultUniformMap = new haxe_ds_StringMap();
	this.canvas = canvas;
	this.gl = canvas.getContext("webgl2",{ premultipliedAlpha : false, preserveDrawingBuffer : true, stencil : true});
	this.initGL();
	this.initShaders();
	this.sphereDetails(32,16);
	this.localObj = this.createObject();
	this.localObjWriter = this.localObj.writer;
	this.tf = new pot_graphics_gl_low_TransformFeedback(this.gl);
	var fov = null;
	fov = Math.PI / 3;
	this.cameraFov = fov;
	this.cameraFovMode = 1;
	this.cameraNear = 0.1;
	this.cameraFar = 10000;
	var a = this.projMat;
	var fovY = this.computeFovY();
	var near = this.cameraNear;
	var far = this.cameraFar;
	var h = 1 / Math.tan(fovY * 0.5);
	a.e00 = h / (this.screenWidth / this.screenHeight);
	a.e01 = 0;
	a.e02 = 0;
	a.e03 = 0;
	a.e10 = 0;
	a.e11 = h;
	a.e12 = 0;
	a.e13 = 0;
	a.e20 = 0;
	a.e21 = 0;
	a.e22 = -(far + near) / (far - near);
	a.e23 = -2 * near * far / (far - near);
	a.e30 = 0;
	a.e31 = 0;
	a.e32 = -1;
	a.e33 = 0;
	this.cameraSet = false;
	var this1 = this.cameraPos;
	this1.x = 0;
	this1.y = 0;
	this1.z = 1;
	var this1 = this.cameraAt;
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var this1 = this.cameraUp;
	this1.x = 0;
	this1.y = 1;
	this1.z = 0;
	this.screen(canvas.width,canvas.height);
	this.matStack = new Array(65536);
	this.matStackCount = 0;
	this.currentTexture = null;
	this.currentRenderTarget = null;
	this.sceneOpen = false;
	this.shapeOpen = false;
	var _g = 0;
	var _g1 = this.lightBuf.length;
	while(_g < _g1) this.lightBuf[_g++] = new pot_graphics_gl__$Graphics_Light();
	this.numLights = 0;
};
pot_graphics_gl_Graphics.__name__ = true;
pot_graphics_gl_Graphics.prototype = {
	initGL: function() {
		this.gl.getExtension("OES_texture_float_linear");
		this.gl.getExtension("OES_texture_half_float_linear");
		this.gl.getExtension("EXT_color_buffer_float");
		this.gl.enable(3089);
		this.gl.disable(2929);
		this.gl.enable(3042);
		this.gl.frontFace(2305);
		this.gl.cullFace(1029);
		this.gl.disable(2884);
		this.gl.blendFuncSeparate(770,771,1,1);
		this.gl.pixelStorei(37440,true);
	}
	,init2D: function() {
		this.gl.disable(2929);
		this.gl.frontFace(2305);
		this.gl.cullFace(1029);
		this.gl.disable(2884);
		this.cameraSet = false;
		this.resetViewport();
		this.currentTexture = null;
	}
	,init3D: function() {
		this.gl.enable(2929);
		this.gl.frontFace(2305);
		this.gl.cullFace(1029);
		this.gl.enable(2884);
		this.cameraSet = false;
		this.resetViewport();
		this.currentTexture = null;
	}
	,transformFeedback: function(shader,uniformMap,inputs,outputs,vertexCount) {
		if(this.sceneOpen != false) {
			throw new Error("cannot perform transform feedbacks inside a scene");
		}
		shader.bind([uniformMap]);
		this.tf.bind();
		this.tf.bindBuffers(outputs);
		this.tf.begin();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.gl.enableVertexAttribArray(input.location);
			input.gl.vertexAttribDivisor(input.location,input.divisor);
			var _g1 = input.buffer.buffer;
			switch(_g1._hx_index) {
			case 0:
				_g1.buffer.vertexAttribPointer(input.location,input.buffer.size,input.buffer.stride,input.buffer.offset);
				break;
			case 1:
				_g1.buffer.vertexAttribPointer(input.location,input.buffer.size,input.buffer.stride,input.buffer.offset);
				break;
			}
		}
		this.gl.drawArrays(0,0,vertexCount);
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.gl.disableVertexAttribArray(input.location);
		}
		this.tf.end();
		this.tf.unbind();
	}
	,createObject: function(attributes) {
		return new pot_graphics_gl_Object(this.gl,attributes == null ? [pot_graphics_gl_Attribute.Position(),pot_graphics_gl_Attribute.Color(),pot_graphics_gl_Attribute.Normal(),pot_graphics_gl_Attribute.TexCoord()] : attributes);
	}
	,initShaders: function() {
		this.defaultShader = new pot_graphics_gl_Shader(this.gl);
		this.defaultShader.compile(pot_graphics_gl_shader_DefaultShader.vertexSource,pot_graphics_gl_shader_DefaultShader.fragmentSource);
		this.defaultShaderTextured = new pot_graphics_gl_Shader(this.gl);
		this.defaultShaderTextured.compile(pot_graphics_gl_shader_DefaultShaderTextured.vertexSource,pot_graphics_gl_shader_DefaultShaderTextured.fragmentSource);
		this.currentShader = null;
	}
	,chooseShader: function() {
		if(this.currentShader != null) {
			return this.currentShader;
		}
		if(this.currentTexture != null) {
			return this.defaultShaderTextured;
		}
		return this.defaultShader;
	}
	,screen: function(width,height) {
		this.screenWidth = width;
		this.screenHeight = height;
		var a = this.projMat;
		var fovY = this.computeFovY();
		var near = this.cameraNear;
		var far = this.cameraFar;
		var h = 1 / Math.tan(fovY * 0.5);
		a.e00 = h / (this.screenWidth / this.screenHeight);
		a.e01 = 0;
		a.e02 = 0;
		a.e03 = 0;
		a.e10 = 0;
		a.e11 = h;
		a.e12 = 0;
		a.e13 = 0;
		a.e20 = 0;
		a.e21 = 0;
		a.e22 = -(far + near) / (far - near);
		a.e23 = -2 * near * far / (far - near);
		a.e30 = 0;
		a.e31 = 0;
		a.e32 = -1;
		a.e33 = 0;
	}
	,viewport: function(x,y,width,height) {
		if(this.sceneOpen != false) {
			throw new Error("cannot change viewport inside a scene");
		}
		this.vpSet = true;
		this.vpX = x;
		this.vpY = y;
		this.vpW = width;
		this.vpH = height;
	}
	,resetViewport: function() {
		if(this.sceneOpen != false) {
			throw new Error("cannot change viewport inside a scene");
		}
		this.vpSet = false;
	}
	,updateViewport: function() {
		var width;
		var height;
		if(this.currentRenderTarget == null) {
			width = this.canvas.width;
			height = this.canvas.height;
		} else {
			width = this.currentRenderTarget.width;
			height = this.currentRenderTarget.height;
		}
		if(this.vpSet) {
			this.gl.viewport(this.vpX,height - this.vpH - this.vpY,this.vpW,this.vpH);
			this.gl.scissor(this.vpX,height - this.vpH - this.vpY,this.vpW,this.vpH);
		} else {
			this.gl.viewport(0,0,width,height);
			this.gl.scissor(0,0,width,height);
		}
	}
	,getRawGL: function() {
		return this.gl;
	}
	,resetMaterial: function() {
		this.materialAmb = 1;
		this.materialDif = 1;
		this.materialSpc = 0;
		this.materialShn = 10;
		this.materialEmi = 0;
	}
	,beginScene: function() {
		if(this.sceneOpen != false) {
			throw new Error("scene already begun");
		}
		this.sceneOpen = true;
		var a = this.modelMat;
		a.e00 = 1;
		a.e01 = 0;
		a.e02 = 0;
		a.e03 = 0;
		a.e10 = 0;
		a.e11 = 1;
		a.e12 = 0;
		a.e13 = 0;
		a.e20 = 0;
		a.e21 = 0;
		a.e22 = 1;
		a.e23 = 0;
		a.e30 = 0;
		a.e31 = 0;
		a.e32 = 0;
		a.e33 = 1;
		this.numLights = 0;
		this.currentTexture = null;
		var _this = this.localObjWriter;
		_this.cr = 1;
		_this.cg = 1;
		_this.cb = 1;
		_this.ca = 1;
		var _this = this.localObjWriter;
		_this.nx = 0;
		_this.ny = 0;
		_this.nz = 0;
		var _this = this.localObjWriter;
		_this.u = 0;
		_this.v = 0;
		this.resetMaterial();
		this.updateViewport();
		if(!this.cameraSet) {
			var this1 = this.defaultCameraPos;
			var x = this.screenWidth * 0.5;
			var y = this.screenHeight * 0.5;
			var z = -this.screenHeight / (2 * Math.tan(this.computeFovY() * 0.5));
			this1.x = x;
			this1.y = y;
			this1.z = z;
			var a = this.viewMat;
			var eye = this.defaultCameraPos;
			var this1 = this.defaultCameraPos;
			var x = -0;
			var y = -1;
			var z = -0;
			var x1 = eye.x - this1.x;
			var y1 = eye.y - this1.y;
			var z1 = eye.z - 0;
			var l = Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
			if(l > 0) {
				l = 1 / l;
			}
			var b = l;
			var x2 = x1 * b;
			var y2 = y1 * b;
			var z2 = z1 * b;
			var x1 = y * z2 - z * y2;
			var y1 = z * x2 - x * z2;
			var z = x * y2 - y * x2;
			var l = Math.sqrt(x1 * x1 + y1 * y1 + z * z);
			if(l > 0) {
				l = 1 / l;
			}
			var b = l;
			var x = x1 * b;
			var y = y1 * b;
			var z1 = z * b;
			var x1 = y2 * z1 - z2 * y;
			var y1 = z2 * x - x2 * z1;
			var z = x2 * y - y2 * x;
			a.e00 = x;
			a.e01 = y;
			a.e02 = z1;
			a.e03 = -(x * eye.x + y * eye.y + z1 * eye.z);
			a.e10 = x1;
			a.e11 = y1;
			a.e12 = z;
			a.e13 = -(x1 * eye.x + y1 * eye.y + z * eye.z);
			a.e20 = x2;
			a.e21 = y2;
			a.e22 = z2;
			a.e23 = -(x2 * eye.x + y2 * eye.y + z2 * eye.z);
			a.e30 = 0;
			a.e31 = 0;
			a.e32 = 0;
			a.e33 = 1;
		}
	}
	,endScene: function() {
		if(this.sceneOpen != true) {
			throw new Error("scene already ended");
		}
		this.sceneOpen = false;
		this.gl.flush();
	}
	,inScene: function(f) {
		this.beginScene();
		f();
		this.endScene();
	}
	,enableDepthTest: function() {
		this.gl.enable(2929);
	}
	,disableDepthTest: function() {
		this.gl.disable(2929);
	}
	,enableStencilTest: function() {
		this.gl.enable(2960);
	}
	,disableStencilTest: function() {
		this.gl.disable(2960);
	}
	,clearStencil: function(value) {
		this.gl.clearStencil(value);
		this.gl.clear(1024);
	}
	,stencilFunc: function(func,ref,mask) {
		this.gl.stencilFunc(func,ref,mask);
	}
	,stencilOp: function(stencilFail,depthFail,pass) {
		if(pass == null) {
			pass = 7680;
		}
		if(depthFail == null) {
			depthFail = 7680;
		}
		if(stencilFail == null) {
			stencilFail = 7680;
		}
		this.gl.stencilOp(stencilFail,depthFail,pass);
	}
	,stencilOpSeparate: function(face,stencilFail,depthFail,pass) {
		if(pass == null) {
			pass = 7680;
		}
		if(depthFail == null) {
			depthFail = 7680;
		}
		if(stencilFail == null) {
			stencilFail = 7680;
		}
		this.gl.stencilOpSeparate(face,stencilFail,depthFail,pass);
	}
	,colorMask: function(red,green,blue,alpha) {
		if(alpha == null) {
			alpha = true;
		}
		if(blue == null) {
			blue = true;
		}
		if(green == null) {
			green = true;
		}
		if(red == null) {
			red = true;
		}
		this.gl.colorMask(red,green,blue,alpha);
	}
	,depthMask: function(depth) {
		if(depth == null) {
			depth = true;
		}
		this.gl.depthMask(depth);
	}
	,culling: function(face) {
		if(face == 0) {
			this.gl.disable(2884);
		} else {
			this.gl.enable(2884);
			this.gl.cullFace(face);
		}
	}
	,clearInt: function(r,g,b,a) {
		if(a == null) {
			a = 0;
		}
		if(this.sceneOpen != true) {
			throw new Error("begin scene before clear scene");
		}
		if(this.currentRenderTarget == null || this.currentRenderTarget.textures[0].type != 5124) {
			throw haxe_Exception.thrown("current render target is not signed 32-bit integer texture(s)");
		}
		var _g = 0;
		var _g1 = this.currentRenderTarget.textures.length;
		while(_g < _g1) this.gl.clearBufferiv(6144,_g++,new Int32Array([r,g,b,a]));
		this.gl.clearDepth(1);
		this.gl.clear(256);
	}
	,clearUInt: function(r,g,b,a) {
		if(a == null) {
			a = 0;
		}
		if(this.sceneOpen != true) {
			throw new Error("begin scene before clear scene");
		}
		if(this.currentRenderTarget == null || this.currentRenderTarget.textures[0].type != 5125) {
			throw haxe_Exception.thrown("current render target is not unsigned 32-bit integer texture(s)");
		}
		var _g = 0;
		var _g1 = this.currentRenderTarget.textures.length;
		while(_g < _g1) this.gl.clearBufferuiv(6144,_g++,new Uint32Array([r,g,b,a]));
		this.gl.clearDepth(1);
		this.gl.clear(256);
	}
	,clearImpl: function(r,g,b,a) {
		if(this.sceneOpen != true) {
			throw new Error("begin scene before clear scene");
		}
		if(this.currentRenderTarget != null && (this.currentRenderTarget.textures[0].type == 5124 || this.currentRenderTarget.textures[0].type == 5125)) {
			throw haxe_Exception.thrown("current render target is integer texture(s); use clearInt or clearUInt");
		}
		this.gl.clearColor(r,g,b,a);
		this.gl.clearDepth(1);
		this.gl.clear(16640);
	}
	,createShader: function(vertexSource,fragmentSource,transformFeedbackOutput) {
		var shader = new pot_graphics_gl_Shader(this.gl);
		shader.compile(vertexSource,fragmentSource,transformFeedbackOutput);
		return shader;
	}
	,shader: function(shader) {
		this.currentShader = shader;
	}
	,resetShader: function() {
		this.currentShader = null;
	}
	,createTexture: function(width,height,format,type) {
		if(type == null) {
			type = 5121;
		}
		if(format == null) {
			format = 6408;
		}
		var tex = new pot_graphics_gl_Texture(this.gl);
		tex.init(width,height,format,type);
		return tex;
	}
	,loadBitmap: function(source,format,type,flipY) {
		if(flipY == null) {
			flipY = true;
		}
		if(type == null) {
			type = 5121;
		}
		if(format == null) {
			format = 6408;
		}
		var tex = new pot_graphics_gl_Texture(this.gl);
		tex.load(source,format,type,flipY);
		return tex;
	}
	,loadBitmapTo: function(dst,source,format,type,flipY) {
		if(flipY == null) {
			flipY = true;
		}
		if(type == null) {
			type = 5121;
		}
		if(format == null) {
			format = 6408;
		}
		dst.load(source,format,type,flipY);
	}
	,createFloatBuffer: function(kind) {
		return new pot_graphics_gl_low_FloatBuffer(this.gl,kind);
	}
	,createVertexBuffer: function(type,size) {
		var tmp;
		switch(type) {
		case 5124:
			tmp = pot_graphics_gl_TypedBuffer.Int(new pot_graphics_gl_low_IntBuffer(this.gl,34962));
			break;
		case 5126:
			tmp = pot_graphics_gl_TypedBuffer.Float(new pot_graphics_gl_low_FloatBuffer(this.gl,34962));
			break;
		}
		return { buffer : tmp, size : size, stride : 0, offset : 0};
	}
	,createIntVertexBufferInterleaved: function(sizes) {
		var res = this.createVertexBufferInterleaved(5124,sizes);
		var res1 = res.vertexBuffers;
		var _g = res.buffer;
		var tmp;
		if(_g._hx_index == 0) {
			tmp = _g.buffer;
		} else {
			throw haxe_Exception.thrown("int buffer expected");
		}
		return { vertexBuffers : res1, buffer : tmp, totalSize : res.totalSize};
	}
	,createFloatVertexBufferInterleaved: function(sizes) {
		var res = this.createVertexBufferInterleaved(5126,sizes);
		var res1 = res.vertexBuffers;
		var _g = res.buffer;
		var tmp;
		if(_g._hx_index == 1) {
			tmp = _g.buffer;
		} else {
			throw haxe_Exception.thrown("float buffer expected");
		}
		return { vertexBuffers : res1, buffer : tmp, totalSize : res.totalSize};
	}
	,createVertexBufferInterleaved: function(type,sizes) {
		var offsets = [];
		var sum = 0;
		var _g = 0;
		while(_g < sizes.length) {
			var size = sizes[_g++];
			offsets.push(sum);
			sum += size * Float32Array.BYTES_PER_ELEMENT;
		}
		var stride = sum;
		var buffer;
		switch(type) {
		case 5124:
			buffer = pot_graphics_gl_TypedBuffer.Int(new pot_graphics_gl_low_IntBuffer(this.gl,34962));
			break;
		case 5126:
			buffer = pot_graphics_gl_TypedBuffer.Float(new pot_graphics_gl_low_FloatBuffer(this.gl,34962));
			break;
		}
		var _g = [];
		var _g_current = 0;
		while(_g_current < sizes.length) _g.push({ buffer : buffer, size : sizes[_g_current++], stride : stride, offset : offsets[_g_current - 1]});
		return { vertexBuffers : _g, buffer : buffer, totalSize : stride / Float32Array.BYTES_PER_ELEMENT | 0};
	}
	,createIntBuffer: function(kind) {
		return new pot_graphics_gl_low_IntBuffer(this.gl,kind);
	}
	,renderingTo: function(target,f) {
		var tmp = this.currentRenderTarget;
		this.renderTarget(target);
		f();
		this.renderTarget(tmp);
	}
	,renderTarget: function(target) {
		this.currentRenderTarget = target;
		if(target == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.drawBuffers([1029]);
		} else {
			this.gl.bindFramebuffer(36160,target.getRawFrameBuffer());
			var tmp = this.gl;
			var _g = [];
			var _g1 = 0;
			var _g2 = target.textures.length;
			while(_g1 < _g2) _g.push(36064 + _g1++);
			tmp.drawBuffers(_g);
		}
		this.resetViewport();
	}
	,pushMatrix: function() {
		if(this.matStackCount > 65520) {
			throw new Error("matrix stack overflowed");
		}
		this.matStack[this.matStackCount++] = this.modelMat.e00;
		this.matStack[this.matStackCount++] = this.modelMat.e01;
		this.matStack[this.matStackCount++] = this.modelMat.e02;
		this.matStack[this.matStackCount++] = this.modelMat.e03;
		this.matStack[this.matStackCount++] = this.modelMat.e10;
		this.matStack[this.matStackCount++] = this.modelMat.e11;
		this.matStack[this.matStackCount++] = this.modelMat.e12;
		this.matStack[this.matStackCount++] = this.modelMat.e13;
		this.matStack[this.matStackCount++] = this.modelMat.e20;
		this.matStack[this.matStackCount++] = this.modelMat.e21;
		this.matStack[this.matStackCount++] = this.modelMat.e22;
		this.matStack[this.matStackCount++] = this.modelMat.e23;
		this.matStack[this.matStackCount++] = this.modelMat.e30;
		this.matStack[this.matStackCount++] = this.modelMat.e31;
		this.matStack[this.matStackCount++] = this.modelMat.e32;
		this.matStack[this.matStackCount++] = this.modelMat.e33;
	}
	,popMatrix: function() {
		if(this.matStackCount < 16) {
			throw new Error("cannot pop matrix");
		}
		this.modelMat.e33 = this.matStack[--this.matStackCount];
		this.modelMat.e32 = this.matStack[--this.matStackCount];
		this.modelMat.e31 = this.matStack[--this.matStackCount];
		this.modelMat.e30 = this.matStack[--this.matStackCount];
		this.modelMat.e23 = this.matStack[--this.matStackCount];
		this.modelMat.e22 = this.matStack[--this.matStackCount];
		this.modelMat.e21 = this.matStack[--this.matStackCount];
		this.modelMat.e20 = this.matStack[--this.matStackCount];
		this.modelMat.e13 = this.matStack[--this.matStackCount];
		this.modelMat.e12 = this.matStack[--this.matStackCount];
		this.modelMat.e11 = this.matStack[--this.matStackCount];
		this.modelMat.e10 = this.matStack[--this.matStackCount];
		this.modelMat.e03 = this.matStack[--this.matStackCount];
		this.modelMat.e02 = this.matStack[--this.matStackCount];
		this.modelMat.e01 = this.matStack[--this.matStackCount];
		this.modelMat.e00 = this.matStack[--this.matStackCount];
	}
	,perspective: function(fov,fovMode,near,far) {
		if(far == null) {
			far = 10000;
		}
		if(near == null) {
			near = 0.1;
		}
		if(fovMode == null) {
			fovMode = 1;
		}
		if(fov == null) {
			fov = Math.PI / 3;
		}
		this.cameraFov = fov;
		this.cameraFovMode = fovMode;
		this.cameraNear = near;
		this.cameraFar = far;
		var a = this.projMat;
		var fovY = this.computeFovY();
		var near = this.cameraNear;
		var far = this.cameraFar;
		var h = 1 / Math.tan(fovY * 0.5);
		a.e00 = h / (this.screenWidth / this.screenHeight);
		a.e01 = 0;
		a.e02 = 0;
		a.e03 = 0;
		a.e10 = 0;
		a.e11 = h;
		a.e12 = 0;
		a.e13 = 0;
		a.e20 = 0;
		a.e21 = 0;
		a.e22 = -(far + near) / (far - near);
		a.e23 = -2 * near * far / (far - near);
		a.e30 = 0;
		a.e31 = 0;
		a.e32 = -1;
		a.e33 = 0;
	}
	,computeFovY: function() {
		var aspect = this.screenWidth / this.screenHeight;
		var useFovX;
		switch(this.cameraFovMode) {
		case 0:
			useFovX = true;
			break;
		case 1:
			useFovX = false;
			break;
		case 2:
			useFovX = aspect < 1;
			break;
		case 3:
			useFovX = aspect > 1;
			break;
		}
		if(useFovX) {
			return 2 * Math.atan(Math.tan(this.cameraFov * 0.5) / aspect);
		} else {
			return this.cameraFov;
		}
	}
	,updatePerspectiveMatrix: function() {
		var a = this.projMat;
		var fovY = this.computeFovY();
		var near = this.cameraNear;
		var far = this.cameraFar;
		var h = 1 / Math.tan(fovY * 0.5);
		a.e00 = h / (this.screenWidth / this.screenHeight);
		a.e01 = 0;
		a.e02 = 0;
		a.e03 = 0;
		a.e10 = 0;
		a.e11 = h;
		a.e12 = 0;
		a.e13 = 0;
		a.e20 = 0;
		a.e21 = 0;
		a.e22 = -(far + near) / (far - near);
		a.e23 = -2 * near * far / (far - near);
		a.e30 = 0;
		a.e31 = 0;
		a.e32 = -1;
		a.e33 = 0;
	}
	,image: function(img,srcX,srcY,srcW,srcH,dstX,dstY,dstW,dstH) {
		var tmp = this.currentTexture;
		this.currentTexture = img;
		var sw = 1 / img.width;
		var sh = 1 / img.height;
		srcX *= sw;
		srcY *= sh;
		srcW *= sw;
		srcH *= sh;
		this.beginShape(5);
		var _this = this.localObjWriter;
		_this.nx = 0;
		_this.ny = 0;
		_this.nz = -1;
		var _this = this.localObjWriter;
		_this.u = srcX;
		_this.v = 1 - srcY;
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = dstX;
		_this1.data[_this1.length++] = dstY;
		_this1.data[_this1.length++] = 0;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = srcX;
		_this.v = 1 - srcY - srcH;
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = dstX;
		_this1.data[_this1.length++] = dstY + dstH;
		_this1.data[_this1.length++] = 0;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = srcX + srcW;
		_this.v = 1 - srcY;
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = dstX + dstW;
		_this1.data[_this1.length++] = dstY;
		_this1.data[_this1.length++] = 0;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = srcX + srcW;
		_this.v = 1 - srcY - srcH;
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = dstX + dstW;
		_this1.data[_this1.length++] = dstY + dstH;
		_this1.data[_this1.length++] = 0;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		this.endShape();
		this.currentTexture = tmp;
	}
	,rect: function(x,y,width,height) {
		this.beginShape(5);
		var _this = this.localObjWriter;
		_this.nx = 0;
		_this.ny = 0;
		_this.nz = -1;
		var _this = this.localObjWriter;
		_this.u = 0;
		_this.v = 1;
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x;
		_this1.data[_this1.length++] = y;
		_this1.data[_this1.length++] = 0;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = 0;
		_this.v = 0;
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x;
		_this1.data[_this1.length++] = y + height;
		_this1.data[_this1.length++] = 0;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = 1;
		_this.v = 1;
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x + width;
		_this1.data[_this1.length++] = y;
		_this1.data[_this1.length++] = 0;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = 1;
		_this.v = 0;
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x + width;
		_this1.data[_this1.length++] = y + height;
		_this1.data[_this1.length++] = 0;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		this.endShape();
	}
	,fullScreenRect: function() {
		this.beginShape(5);
		var this1 = this.viewMat;
		var e20 = this1.e20;
		var e21 = this1.e21;
		var e22 = this1.e22;
		var this1 = this.modelMat;
		var _this = this.localObjWriter;
		_this.nx = e20 * this1.e00 + e21 * this1.e10 + e22 * this1.e20;
		_this.ny = e20 * this1.e01 + e21 * this1.e11 + e22 * this1.e21;
		_this.nz = e20 * this1.e02 + e21 * this1.e12 + e22 * this1.e22;
		var _this = this.localObjWriter;
		_this.u = 0;
		_this.v = 0;
		var a_x = -1;
		var a_y = -1;
		var a_z = 0;
		var a = this.projMat;
		var b = this.viewMat;
		var a00 = a.e00;
		var a01 = a.e01;
		var a02 = a.e02;
		var a03 = a.e03;
		var a10 = a.e10;
		var a11 = a.e11;
		var a12 = a.e12;
		var a13 = a.e13;
		var a20 = a.e20;
		var a21 = a.e21;
		var a22 = a.e22;
		var a23 = a.e23;
		var a30 = a.e30;
		var a31 = a.e31;
		var a32 = a.e32;
		var a33 = a.e33;
		var b00 = b.e00;
		var b01 = b.e01;
		var b02 = b.e02;
		var b03 = b.e03;
		var b10 = b.e10;
		var b11 = b.e11;
		var b12 = b.e12;
		var b13 = b.e13;
		var b20 = b.e20;
		var b21 = b.e21;
		var b22 = b.e22;
		var b23 = b.e23;
		var b30 = b.e30;
		var b31 = b.e31;
		var b32 = b.e32;
		var b33 = b.e33;
		var a_e00 = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;
		var a_e01 = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;
		var a_e02 = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;
		var a_e03 = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;
		var a_e10 = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;
		var a_e11 = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;
		var a_e12 = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;
		var a_e13 = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;
		var a_e20 = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;
		var a_e21 = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;
		var a_e22 = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;
		var a_e23 = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;
		var a_e30 = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;
		var a_e31 = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;
		var a_e32 = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;
		var a_e33 = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;
		var d0101 = a_e00 * a_e11 - a_e01 * a_e10;
		var d0102 = a_e00 * a_e12 - a_e02 * a_e10;
		var d0103 = a_e00 * a_e13 - a_e03 * a_e10;
		var d0112 = a_e01 * a_e12 - a_e02 * a_e11;
		var d0113 = a_e01 * a_e13 - a_e03 * a_e11;
		var d0123 = a_e02 * a_e13 - a_e03 * a_e12;
		var d2301 = a_e20 * a_e31 - a_e21 * a_e30;
		var d2302 = a_e20 * a_e32 - a_e22 * a_e30;
		var d2303 = a_e20 * a_e33 - a_e23 * a_e30;
		var d2312 = a_e21 * a_e32 - a_e22 * a_e31;
		var d2313 = a_e21 * a_e33 - a_e23 * a_e31;
		var d2323 = a_e22 * a_e33 - a_e23 * a_e32;
		var d00 = a_e11 * d2323 - a_e12 * d2313 + a_e13 * d2312;
		var d01 = a_e10 * d2323 - a_e12 * d2303 + a_e13 * d2302;
		var d02 = a_e10 * d2313 - a_e11 * d2303 + a_e13 * d2301;
		var d03 = a_e10 * d2312 - a_e11 * d2302 + a_e12 * d2301;
		var idet = a_e00 * d00 - a_e01 * d01 + a_e02 * d02 - a_e03 * d03;
		if(idet != 0) {
			idet = 1 / idet;
		}
		var b_w = 1;
		var w = -d03 * idet * a_x + (a_e00 * d2312 - a_e01 * d2302 + a_e02 * d2301) * idet * a_y + -(a_e30 * d0112 - a_e31 * d0102 + a_e32 * d0101) * idet * a_z + (a_e20 * d0112 - a_e21 * d0102 + a_e22 * d0101) * idet * b_w;
		var z = (d02 * idet * a_x + -(a_e00 * d2313 - a_e01 * d2303 + a_e03 * d2301) * idet * a_y + (a_e30 * d0113 - a_e31 * d0103 + a_e33 * d0101) * idet * a_z + -(a_e20 * d0113 - a_e21 * d0103 + a_e23 * d0101) * idet * b_w) / w;
		var z1 = z;
		if(z == null) {
			z1 = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = (d00 * idet * a_x + -(a_e01 * d2323 - a_e02 * d2313 + a_e03 * d2312) * idet * a_y + (a_e31 * d0123 - a_e32 * d0113 + a_e33 * d0112) * idet * a_z + -(a_e21 * d0123 - a_e22 * d0113 + a_e23 * d0112) * idet * b_w) / w;
		_this1.data[_this1.length++] = (-d01 * idet * a_x + (a_e00 * d2323 - a_e02 * d2303 + a_e03 * d2302) * idet * a_y + -(a_e30 * d0123 - a_e32 * d0103 + a_e33 * d0102) * idet * a_z + (a_e20 * d0123 - a_e22 * d0103 + a_e23 * d0102) * idet * b_w) / w;
		_this1.data[_this1.length++] = z1;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = 1;
		_this.v = 0;
		var a_x = 1;
		var a_y = -1;
		var a_z = 0;
		var a = this.projMat;
		var b = this.viewMat;
		var a00 = a.e00;
		var a01 = a.e01;
		var a02 = a.e02;
		var a03 = a.e03;
		var a10 = a.e10;
		var a11 = a.e11;
		var a12 = a.e12;
		var a13 = a.e13;
		var a20 = a.e20;
		var a21 = a.e21;
		var a22 = a.e22;
		var a23 = a.e23;
		var a30 = a.e30;
		var a31 = a.e31;
		var a32 = a.e32;
		var a33 = a.e33;
		var b00 = b.e00;
		var b01 = b.e01;
		var b02 = b.e02;
		var b03 = b.e03;
		var b10 = b.e10;
		var b11 = b.e11;
		var b12 = b.e12;
		var b13 = b.e13;
		var b20 = b.e20;
		var b21 = b.e21;
		var b22 = b.e22;
		var b23 = b.e23;
		var b30 = b.e30;
		var b31 = b.e31;
		var b32 = b.e32;
		var b33 = b.e33;
		var a_e00 = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;
		var a_e01 = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;
		var a_e02 = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;
		var a_e03 = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;
		var a_e10 = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;
		var a_e11 = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;
		var a_e12 = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;
		var a_e13 = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;
		var a_e20 = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;
		var a_e21 = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;
		var a_e22 = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;
		var a_e23 = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;
		var a_e30 = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;
		var a_e31 = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;
		var a_e32 = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;
		var a_e33 = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;
		var d0101 = a_e00 * a_e11 - a_e01 * a_e10;
		var d0102 = a_e00 * a_e12 - a_e02 * a_e10;
		var d0103 = a_e00 * a_e13 - a_e03 * a_e10;
		var d0112 = a_e01 * a_e12 - a_e02 * a_e11;
		var d0113 = a_e01 * a_e13 - a_e03 * a_e11;
		var d0123 = a_e02 * a_e13 - a_e03 * a_e12;
		var d2301 = a_e20 * a_e31 - a_e21 * a_e30;
		var d2302 = a_e20 * a_e32 - a_e22 * a_e30;
		var d2303 = a_e20 * a_e33 - a_e23 * a_e30;
		var d2312 = a_e21 * a_e32 - a_e22 * a_e31;
		var d2313 = a_e21 * a_e33 - a_e23 * a_e31;
		var d2323 = a_e22 * a_e33 - a_e23 * a_e32;
		var d00 = a_e11 * d2323 - a_e12 * d2313 + a_e13 * d2312;
		var d01 = a_e10 * d2323 - a_e12 * d2303 + a_e13 * d2302;
		var d02 = a_e10 * d2313 - a_e11 * d2303 + a_e13 * d2301;
		var d03 = a_e10 * d2312 - a_e11 * d2302 + a_e12 * d2301;
		var idet = a_e00 * d00 - a_e01 * d01 + a_e02 * d02 - a_e03 * d03;
		if(idet != 0) {
			idet = 1 / idet;
		}
		var b_w = 1;
		var w = -d03 * idet * a_x + (a_e00 * d2312 - a_e01 * d2302 + a_e02 * d2301) * idet * a_y + -(a_e30 * d0112 - a_e31 * d0102 + a_e32 * d0101) * idet * a_z + (a_e20 * d0112 - a_e21 * d0102 + a_e22 * d0101) * idet * b_w;
		var z = (d02 * idet * a_x + -(a_e00 * d2313 - a_e01 * d2303 + a_e03 * d2301) * idet * a_y + (a_e30 * d0113 - a_e31 * d0103 + a_e33 * d0101) * idet * a_z + -(a_e20 * d0113 - a_e21 * d0103 + a_e23 * d0101) * idet * b_w) / w;
		var z1 = z;
		if(z == null) {
			z1 = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = (d00 * idet * a_x + -(a_e01 * d2323 - a_e02 * d2313 + a_e03 * d2312) * idet * a_y + (a_e31 * d0123 - a_e32 * d0113 + a_e33 * d0112) * idet * a_z + -(a_e21 * d0123 - a_e22 * d0113 + a_e23 * d0112) * idet * b_w) / w;
		_this1.data[_this1.length++] = (-d01 * idet * a_x + (a_e00 * d2323 - a_e02 * d2303 + a_e03 * d2302) * idet * a_y + -(a_e30 * d0123 - a_e32 * d0103 + a_e33 * d0102) * idet * a_z + (a_e20 * d0123 - a_e22 * d0103 + a_e23 * d0102) * idet * b_w) / w;
		_this1.data[_this1.length++] = z1;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = 0;
		_this.v = 1;
		var a_x = -1;
		var a_y = 1;
		var a_z = 0;
		var a = this.projMat;
		var b = this.viewMat;
		var a00 = a.e00;
		var a01 = a.e01;
		var a02 = a.e02;
		var a03 = a.e03;
		var a10 = a.e10;
		var a11 = a.e11;
		var a12 = a.e12;
		var a13 = a.e13;
		var a20 = a.e20;
		var a21 = a.e21;
		var a22 = a.e22;
		var a23 = a.e23;
		var a30 = a.e30;
		var a31 = a.e31;
		var a32 = a.e32;
		var a33 = a.e33;
		var b00 = b.e00;
		var b01 = b.e01;
		var b02 = b.e02;
		var b03 = b.e03;
		var b10 = b.e10;
		var b11 = b.e11;
		var b12 = b.e12;
		var b13 = b.e13;
		var b20 = b.e20;
		var b21 = b.e21;
		var b22 = b.e22;
		var b23 = b.e23;
		var b30 = b.e30;
		var b31 = b.e31;
		var b32 = b.e32;
		var b33 = b.e33;
		var a_e00 = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;
		var a_e01 = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;
		var a_e02 = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;
		var a_e03 = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;
		var a_e10 = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;
		var a_e11 = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;
		var a_e12 = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;
		var a_e13 = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;
		var a_e20 = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;
		var a_e21 = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;
		var a_e22 = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;
		var a_e23 = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;
		var a_e30 = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;
		var a_e31 = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;
		var a_e32 = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;
		var a_e33 = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;
		var d0101 = a_e00 * a_e11 - a_e01 * a_e10;
		var d0102 = a_e00 * a_e12 - a_e02 * a_e10;
		var d0103 = a_e00 * a_e13 - a_e03 * a_e10;
		var d0112 = a_e01 * a_e12 - a_e02 * a_e11;
		var d0113 = a_e01 * a_e13 - a_e03 * a_e11;
		var d0123 = a_e02 * a_e13 - a_e03 * a_e12;
		var d2301 = a_e20 * a_e31 - a_e21 * a_e30;
		var d2302 = a_e20 * a_e32 - a_e22 * a_e30;
		var d2303 = a_e20 * a_e33 - a_e23 * a_e30;
		var d2312 = a_e21 * a_e32 - a_e22 * a_e31;
		var d2313 = a_e21 * a_e33 - a_e23 * a_e31;
		var d2323 = a_e22 * a_e33 - a_e23 * a_e32;
		var d00 = a_e11 * d2323 - a_e12 * d2313 + a_e13 * d2312;
		var d01 = a_e10 * d2323 - a_e12 * d2303 + a_e13 * d2302;
		var d02 = a_e10 * d2313 - a_e11 * d2303 + a_e13 * d2301;
		var d03 = a_e10 * d2312 - a_e11 * d2302 + a_e12 * d2301;
		var idet = a_e00 * d00 - a_e01 * d01 + a_e02 * d02 - a_e03 * d03;
		if(idet != 0) {
			idet = 1 / idet;
		}
		var b_w = 1;
		var w = -d03 * idet * a_x + (a_e00 * d2312 - a_e01 * d2302 + a_e02 * d2301) * idet * a_y + -(a_e30 * d0112 - a_e31 * d0102 + a_e32 * d0101) * idet * a_z + (a_e20 * d0112 - a_e21 * d0102 + a_e22 * d0101) * idet * b_w;
		var z = (d02 * idet * a_x + -(a_e00 * d2313 - a_e01 * d2303 + a_e03 * d2301) * idet * a_y + (a_e30 * d0113 - a_e31 * d0103 + a_e33 * d0101) * idet * a_z + -(a_e20 * d0113 - a_e21 * d0103 + a_e23 * d0101) * idet * b_w) / w;
		var z1 = z;
		if(z == null) {
			z1 = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = (d00 * idet * a_x + -(a_e01 * d2323 - a_e02 * d2313 + a_e03 * d2312) * idet * a_y + (a_e31 * d0123 - a_e32 * d0113 + a_e33 * d0112) * idet * a_z + -(a_e21 * d0123 - a_e22 * d0113 + a_e23 * d0112) * idet * b_w) / w;
		_this1.data[_this1.length++] = (-d01 * idet * a_x + (a_e00 * d2323 - a_e02 * d2303 + a_e03 * d2302) * idet * a_y + -(a_e30 * d0123 - a_e32 * d0103 + a_e33 * d0102) * idet * a_z + (a_e20 * d0123 - a_e22 * d0103 + a_e23 * d0102) * idet * b_w) / w;
		_this1.data[_this1.length++] = z1;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = 1;
		_this.v = 1;
		var a_x = 1;
		var a_y = 1;
		var a_z = 0;
		var a = this.projMat;
		var b = this.viewMat;
		var a00 = a.e00;
		var a01 = a.e01;
		var a02 = a.e02;
		var a03 = a.e03;
		var a10 = a.e10;
		var a11 = a.e11;
		var a12 = a.e12;
		var a13 = a.e13;
		var a20 = a.e20;
		var a21 = a.e21;
		var a22 = a.e22;
		var a23 = a.e23;
		var a30 = a.e30;
		var a31 = a.e31;
		var a32 = a.e32;
		var a33 = a.e33;
		var b00 = b.e00;
		var b01 = b.e01;
		var b02 = b.e02;
		var b03 = b.e03;
		var b10 = b.e10;
		var b11 = b.e11;
		var b12 = b.e12;
		var b13 = b.e13;
		var b20 = b.e20;
		var b21 = b.e21;
		var b22 = b.e22;
		var b23 = b.e23;
		var b30 = b.e30;
		var b31 = b.e31;
		var b32 = b.e32;
		var b33 = b.e33;
		var a_e00 = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;
		var a_e01 = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;
		var a_e02 = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;
		var a_e03 = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;
		var a_e10 = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;
		var a_e11 = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;
		var a_e12 = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;
		var a_e13 = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;
		var a_e20 = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;
		var a_e21 = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;
		var a_e22 = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;
		var a_e23 = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;
		var a_e30 = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;
		var a_e31 = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;
		var a_e32 = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;
		var a_e33 = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;
		var d0101 = a_e00 * a_e11 - a_e01 * a_e10;
		var d0102 = a_e00 * a_e12 - a_e02 * a_e10;
		var d0103 = a_e00 * a_e13 - a_e03 * a_e10;
		var d0112 = a_e01 * a_e12 - a_e02 * a_e11;
		var d0113 = a_e01 * a_e13 - a_e03 * a_e11;
		var d0123 = a_e02 * a_e13 - a_e03 * a_e12;
		var d2301 = a_e20 * a_e31 - a_e21 * a_e30;
		var d2302 = a_e20 * a_e32 - a_e22 * a_e30;
		var d2303 = a_e20 * a_e33 - a_e23 * a_e30;
		var d2312 = a_e21 * a_e32 - a_e22 * a_e31;
		var d2313 = a_e21 * a_e33 - a_e23 * a_e31;
		var d2323 = a_e22 * a_e33 - a_e23 * a_e32;
		var d00 = a_e11 * d2323 - a_e12 * d2313 + a_e13 * d2312;
		var d01 = a_e10 * d2323 - a_e12 * d2303 + a_e13 * d2302;
		var d02 = a_e10 * d2313 - a_e11 * d2303 + a_e13 * d2301;
		var d03 = a_e10 * d2312 - a_e11 * d2302 + a_e12 * d2301;
		var idet = a_e00 * d00 - a_e01 * d01 + a_e02 * d02 - a_e03 * d03;
		if(idet != 0) {
			idet = 1 / idet;
		}
		var b_w = 1;
		var w = -d03 * idet * a_x + (a_e00 * d2312 - a_e01 * d2302 + a_e02 * d2301) * idet * a_y + -(a_e30 * d0112 - a_e31 * d0102 + a_e32 * d0101) * idet * a_z + (a_e20 * d0112 - a_e21 * d0102 + a_e22 * d0101) * idet * b_w;
		var z = (d02 * idet * a_x + -(a_e00 * d2313 - a_e01 * d2303 + a_e03 * d2301) * idet * a_y + (a_e30 * d0113 - a_e31 * d0103 + a_e33 * d0101) * idet * a_z + -(a_e20 * d0113 - a_e21 * d0103 + a_e23 * d0101) * idet * b_w) / w;
		var z1 = z;
		if(z == null) {
			z1 = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = (d00 * idet * a_x + -(a_e01 * d2323 - a_e02 * d2313 + a_e03 * d2312) * idet * a_y + (a_e31 * d0123 - a_e32 * d0113 + a_e33 * d0112) * idet * a_z + -(a_e21 * d0123 - a_e22 * d0113 + a_e23 * d0112) * idet * b_w) / w;
		_this1.data[_this1.length++] = (-d01 * idet * a_x + (a_e00 * d2323 - a_e02 * d2303 + a_e03 * d2302) * idet * a_y + -(a_e30 * d0123 - a_e32 * d0103 + a_e33 * d0102) * idet * a_z + (a_e20 * d0123 - a_e22 * d0103 + a_e23 * d0102) * idet * b_w) / w;
		_this1.data[_this1.length++] = z1;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		this.endShape();
	}
	,lineImpl: function(x1,y1,z1,x2,y2,z2) {
		var tmpNumLights = this.numLights;
		this.numLights = 0;
		var tmp = this.currentTexture;
		this.currentTexture = null;
		this.beginShape(1);
		var z = z1;
		if(z1 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x1;
		_this1.data[_this1.length++] = y1;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var z = z2;
		if(z2 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x2;
		_this1.data[_this1.length++] = y2;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		this.endShape();
		this.currentTexture = tmp;
		this.numLights = tmpNumLights;
	}
	,sphereDetails: function(divV,divH) {
		if(divV < 3 || divH < 3) {
			throw haxe_Exception.thrown("sphere divisions must be greater than or equal to 3");
		}
		var numVertices = 2 + (divH - 2) * divV;
		this.unitSphereVs.length = 0;
		this.unitSphereVs.push(new muun_la__$Vec3_Vec3Data(0,1,0));
		var _g = 1;
		var _g1 = divH - 1;
		while(_g < _g1) {
			var theta = _g++ / divH * Math.PI;
			var _g2 = 0;
			while(_g2 < divV) {
				var phi = _g2++ / divV * Math.PI * 2;
				this.unitSphereVs.push(new muun_la__$Vec3_Vec3Data(Math.sin(theta) * Math.cos(phi),Math.cos(theta),-Math.sin(theta) * Math.sin(phi)));
			}
		}
		this.unitSphereVs.push(new muun_la__$Vec3_Vec3Data(0,-1,0));
		this.unitSphereIs.length = 0;
		var last = numVertices - 1;
		var _g = 0;
		while(_g < divV) {
			var j = _g++;
			this.unitSphereIs.push([0,j + 1,(j + 1) % divV + 1]);
			this.unitSphereIs.push([last,last - (j + 1),last - ((j + 1) % divV + 1)]);
		}
		var _g = 1;
		var _g1 = divH - 2;
		while(_g < _g1) {
			var off1 = 1 + divV * (_g++ - 1);
			var off2 = off1 + divV;
			var _g2 = 0;
			while(_g2 < divV) {
				var j = _g2++;
				var i1 = off1 + j;
				var i3 = off2 + (j + 1) % divV;
				this.unitSphereIs.push([i1,off2 + j,i3]);
				this.unitSphereIs.push([i1,i3,off1 + (j + 1) % divV]);
			}
		}
	}
	,sphere: function(radius) {
		var tmpTex = this.currentTexture;
		this.currentTexture = null;
		this.beginShape(4);
		var _g = 0;
		var _g1 = this.unitSphereIs;
		while(_g < _g1.length) {
			var tri = _g1[_g];
			++_g;
			var v1 = this.unitSphereVs[tri[0]];
			var v2 = this.unitSphereVs[tri[1]];
			var v3 = this.unitSphereVs[tri[2]];
			var _this = this.localObjWriter;
			_this.nx = v1.x;
			_this.ny = v1.y;
			_this.nz = v1.z;
			var x = v1.x * radius;
			var y = v1.y * radius;
			var z = v1.z * radius;
			if(z == null) {
				z = 0;
			}
			if(this.shapeOpen != true) {
				throw new Error("begin shape before vertex");
			}
			var _this1 = this.localObjWriter;
			var _this2 = _this1.positionWriter;
			if(_this2.length + 3 > _this2.maxLength) {
				_this2.expand();
			}
			_this2.data[_this2.length++] = x;
			_this2.data[_this2.length++] = y;
			_this2.data[_this2.length++] = z;
			_this2.changed = true;
			var _this3 = _this1.colorWriter;
			var f1 = _this1.cr;
			var f2 = _this1.cg;
			var f3 = _this1.cb;
			var f4 = _this1.ca;
			if(_this3.length + 4 > _this3.maxLength) {
				_this3.expand();
			}
			_this3.data[_this3.length++] = f1;
			_this3.data[_this3.length++] = f2;
			_this3.data[_this3.length++] = f3;
			_this3.data[_this3.length++] = f4;
			_this3.changed = true;
			var _this4 = _this1.normalWriter;
			var f11 = _this1.nx;
			var f21 = _this1.ny;
			var f31 = _this1.nz;
			if(_this4.length + 3 > _this4.maxLength) {
				_this4.expand();
			}
			_this4.data[_this4.length++] = f11;
			_this4.data[_this4.length++] = f21;
			_this4.data[_this4.length++] = f31;
			_this4.changed = true;
			var _this5 = _this1.texCoordWriter;
			var f12 = _this1.u;
			var f22 = _this1.v;
			if(_this5.length + 2 > _this5.maxLength) {
				_this5.expand();
			}
			_this5.data[_this5.length++] = f12;
			_this5.data[_this5.length++] = f22;
			_this5.changed = true;
			var _this6 = _this1.indexWriter;
			var i = _this1.numVertices;
			if(_this6.length + 1 > _this6.maxLength) {
				_this6.expand();
			}
			_this6.data[_this6.length++] = i;
			_this6.changed = true;
			_this1.numVertices++;
			var _this7 = this.localObjWriter;
			_this7.nx = v2.x;
			_this7.ny = v2.y;
			_this7.nz = v2.z;
			var x1 = v2.x * radius;
			var y1 = v2.y * radius;
			var z1 = v2.z * radius;
			if(z1 == null) {
				z1 = 0;
			}
			if(this.shapeOpen != true) {
				throw new Error("begin shape before vertex");
			}
			var _this8 = this.localObjWriter;
			var _this9 = _this8.positionWriter;
			if(_this9.length + 3 > _this9.maxLength) {
				_this9.expand();
			}
			_this9.data[_this9.length++] = x1;
			_this9.data[_this9.length++] = y1;
			_this9.data[_this9.length++] = z1;
			_this9.changed = true;
			var _this10 = _this8.colorWriter;
			var f13 = _this8.cr;
			var f23 = _this8.cg;
			var f32 = _this8.cb;
			var f41 = _this8.ca;
			if(_this10.length + 4 > _this10.maxLength) {
				_this10.expand();
			}
			_this10.data[_this10.length++] = f13;
			_this10.data[_this10.length++] = f23;
			_this10.data[_this10.length++] = f32;
			_this10.data[_this10.length++] = f41;
			_this10.changed = true;
			var _this11 = _this8.normalWriter;
			var f14 = _this8.nx;
			var f24 = _this8.ny;
			var f33 = _this8.nz;
			if(_this11.length + 3 > _this11.maxLength) {
				_this11.expand();
			}
			_this11.data[_this11.length++] = f14;
			_this11.data[_this11.length++] = f24;
			_this11.data[_this11.length++] = f33;
			_this11.changed = true;
			var _this12 = _this8.texCoordWriter;
			var f15 = _this8.u;
			var f25 = _this8.v;
			if(_this12.length + 2 > _this12.maxLength) {
				_this12.expand();
			}
			_this12.data[_this12.length++] = f15;
			_this12.data[_this12.length++] = f25;
			_this12.changed = true;
			var _this13 = _this8.indexWriter;
			var i1 = _this8.numVertices;
			if(_this13.length + 1 > _this13.maxLength) {
				_this13.expand();
			}
			_this13.data[_this13.length++] = i1;
			_this13.changed = true;
			_this8.numVertices++;
			var _this14 = this.localObjWriter;
			_this14.nx = v3.x;
			_this14.ny = v3.y;
			_this14.nz = v3.z;
			var x2 = v3.x * radius;
			var y2 = v3.y * radius;
			var z2 = v3.z * radius;
			if(z2 == null) {
				z2 = 0;
			}
			if(this.shapeOpen != true) {
				throw new Error("begin shape before vertex");
			}
			var _this15 = this.localObjWriter;
			var _this16 = _this15.positionWriter;
			if(_this16.length + 3 > _this16.maxLength) {
				_this16.expand();
			}
			_this16.data[_this16.length++] = x2;
			_this16.data[_this16.length++] = y2;
			_this16.data[_this16.length++] = z2;
			_this16.changed = true;
			var _this17 = _this15.colorWriter;
			var f16 = _this15.cr;
			var f26 = _this15.cg;
			var f34 = _this15.cb;
			var f42 = _this15.ca;
			if(_this17.length + 4 > _this17.maxLength) {
				_this17.expand();
			}
			_this17.data[_this17.length++] = f16;
			_this17.data[_this17.length++] = f26;
			_this17.data[_this17.length++] = f34;
			_this17.data[_this17.length++] = f42;
			_this17.changed = true;
			var _this18 = _this15.normalWriter;
			var f17 = _this15.nx;
			var f27 = _this15.ny;
			var f35 = _this15.nz;
			if(_this18.length + 3 > _this18.maxLength) {
				_this18.expand();
			}
			_this18.data[_this18.length++] = f17;
			_this18.data[_this18.length++] = f27;
			_this18.data[_this18.length++] = f35;
			_this18.changed = true;
			var _this19 = _this15.texCoordWriter;
			var f18 = _this15.u;
			var f28 = _this15.v;
			if(_this19.length + 2 > _this19.maxLength) {
				_this19.expand();
			}
			_this19.data[_this19.length++] = f18;
			_this19.data[_this19.length++] = f28;
			_this19.changed = true;
			var _this20 = _this15.indexWriter;
			var i2 = _this15.numVertices;
			if(_this20.length + 1 > _this20.maxLength) {
				_this20.expand();
			}
			_this20.data[_this20.length++] = i2;
			_this20.changed = true;
			_this15.numVertices++;
		}
		this.endShape();
		this.currentTexture = tmpTex;
	}
	,triangleImpl: function(x1,y1,z1,x2,y2,z2,x3,y3,z3) {
		var tmp = this.currentTexture;
		this.currentTexture = null;
		this.beginShape(4);
		var x12 = x2 - x1;
		var y12 = y2 - y1;
		var z12 = z2 - z1;
		var x13 = x3 - x1;
		var y13 = y3 - y1;
		var z13 = z3 - z1;
		var nx = y12 * z13 - z12 * y13;
		var ny = z12 * x13 - x12 * z13;
		var nz = x12 * y13 - y12 * x13;
		var len = nx * nx + ny * ny + nz * nz;
		if(len > 0) {
			len = 1 / Math.sqrt(len);
		}
		nx *= len;
		ny *= len;
		nz *= len;
		var _this = this.localObjWriter;
		_this.nx = nx;
		_this.ny = ny;
		_this.nz = nz;
		var z = z1;
		if(z1 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x1;
		_this1.data[_this1.length++] = y1;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var z = z2;
		if(z2 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x2;
		_this1.data[_this1.length++] = y2;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var z = z3;
		if(z3 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x3;
		_this1.data[_this1.length++] = y3;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		this.endShape();
		this.currentTexture = tmp;
	}
	,box: function(width,height,depth) {
		this.beginShape(4);
		width *= 0.5;
		height *= 0.5;
		depth *= 0.5;
		var x1 = -width;
		var x2 = width;
		var y1 = -height;
		var y2 = height;
		var z1 = -depth;
		var z2 = depth;
		if(this.currentTexture != null) {
			var _this = this.localObjWriter;
			_this.nx = -1;
			_this.ny = 0;
			_this.nz = 0;
			this.boxFaceUV(x1,y1,z1,x1,y1,z2,x1,y2,z2,x1,y2,z1);
			var _this = this.localObjWriter;
			_this.nx = 1;
			_this.ny = 0;
			_this.nz = 0;
			this.boxFaceUV(x2,y1,z1,x2,y2,z1,x2,y2,z2,x2,y1,z2);
			var _this = this.localObjWriter;
			_this.nx = 0;
			_this.ny = -1;
			_this.nz = 0;
			this.boxFaceUV(x1,y1,z1,x2,y1,z1,x2,y1,z2,x1,y1,z2);
			var _this = this.localObjWriter;
			_this.nx = 0;
			_this.ny = 1;
			_this.nz = 0;
			this.boxFaceUV(x1,y2,z1,x1,y2,z2,x2,y2,z2,x2,y2,z1);
			var _this = this.localObjWriter;
			_this.nx = 0;
			_this.ny = 0;
			_this.nz = -1;
			this.boxFaceUV(x1,y1,z1,x1,y2,z1,x2,y2,z1,x2,y1,z1);
			var _this = this.localObjWriter;
			_this.nx = 0;
			_this.ny = 0;
			_this.nz = 1;
			this.boxFaceUV(x1,y1,z2,x2,y1,z2,x2,y2,z2,x1,y2,z2);
		} else {
			var _this = this.localObjWriter;
			_this.nx = -1;
			_this.ny = 0;
			_this.nz = 0;
			this.boxFace(x1,y1,z1,x1,y1,z2,x1,y2,z2,x1,y2,z1);
			var _this = this.localObjWriter;
			_this.nx = 1;
			_this.ny = 0;
			_this.nz = 0;
			this.boxFace(x2,y1,z1,x2,y2,z1,x2,y2,z2,x2,y1,z2);
			var _this = this.localObjWriter;
			_this.nx = 0;
			_this.ny = -1;
			_this.nz = 0;
			this.boxFace(x1,y1,z1,x2,y1,z1,x2,y1,z2,x1,y1,z2);
			var _this = this.localObjWriter;
			_this.nx = 0;
			_this.ny = 1;
			_this.nz = 0;
			this.boxFace(x1,y2,z1,x1,y2,z2,x2,y2,z2,x2,y2,z1);
			var _this = this.localObjWriter;
			_this.nx = 0;
			_this.ny = 0;
			_this.nz = -1;
			this.boxFace(x1,y1,z1,x1,y2,z1,x2,y2,z1,x2,y1,z1);
			var _this = this.localObjWriter;
			_this.nx = 0;
			_this.ny = 0;
			_this.nz = 1;
			this.boxFace(x1,y1,z2,x2,y1,z2,x2,y2,z2,x1,y2,z2);
		}
		this.endShape();
	}
	,boxFace: function(x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4) {
		var z = z1;
		if(z1 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x1;
		_this1.data[_this1.length++] = y1;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var z = z2;
		if(z2 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x2;
		_this1.data[_this1.length++] = y2;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var z = z3;
		if(z3 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x3;
		_this1.data[_this1.length++] = y3;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var z = z1;
		if(z1 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x1;
		_this1.data[_this1.length++] = y1;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var z = z3;
		if(z3 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x3;
		_this1.data[_this1.length++] = y3;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var z = z4;
		if(z4 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x4;
		_this1.data[_this1.length++] = y4;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
	}
	,boxFaceUV: function(x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4) {
		var _this = this.localObjWriter;
		_this.u = 0;
		_this.v = 0;
		var z = z1;
		if(z1 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x1;
		_this1.data[_this1.length++] = y1;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = 0;
		_this.v = 1;
		var z = z2;
		if(z2 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x2;
		_this1.data[_this1.length++] = y2;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = 1;
		_this.v = 1;
		var z = z3;
		if(z3 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x3;
		_this1.data[_this1.length++] = y3;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = 0;
		_this.v = 0;
		var z = z1;
		if(z1 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x1;
		_this1.data[_this1.length++] = y1;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = 1;
		_this.v = 1;
		var z = z3;
		if(z3 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x3;
		_this1.data[_this1.length++] = y3;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
		var _this = this.localObjWriter;
		_this.u = 1;
		_this.v = 0;
		var z = z4;
		if(z4 == null) {
			z = 0;
		}
		if(this.shapeOpen != true) {
			throw new Error("begin shape before vertex");
		}
		var _this = this.localObjWriter;
		var _this1 = _this.positionWriter;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = x4;
		_this1.data[_this1.length++] = y4;
		_this1.data[_this1.length++] = z;
		_this1.changed = true;
		var _this1 = _this.colorWriter;
		var f1 = _this.cr;
		var f2 = _this.cg;
		var f3 = _this.cb;
		var f4 = _this.ca;
		if(_this1.length + 4 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.data[_this1.length++] = f4;
		_this1.changed = true;
		var _this1 = _this.normalWriter;
		var f1 = _this.nx;
		var f2 = _this.ny;
		var f3 = _this.nz;
		if(_this1.length + 3 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.data[_this1.length++] = f3;
		_this1.changed = true;
		var _this1 = _this.texCoordWriter;
		var f1 = _this.u;
		var f2 = _this.v;
		if(_this1.length + 2 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = f1;
		_this1.data[_this1.length++] = f2;
		_this1.changed = true;
		var _this1 = _this.indexWriter;
		var i = _this.numVertices;
		if(_this1.length + 1 > _this1.maxLength) {
			_this1.expand();
		}
		_this1.data[_this1.length++] = i;
		_this1.changed = true;
		_this.numVertices++;
	}
	,blend: function(blendMode) {
		if(blendMode == null) {
			blendMode = 1;
		}
		switch(blendMode) {
		case 0:
			this.gl.disable(3042);
			break;
		case 1:
			this.gl.enable(3042);
			this.gl.blendFuncSeparate(770,771,1,1);
			break;
		case 2:
			this.gl.enable(3042);
			this.gl.blendFuncSeparate(770,1,1,1);
			break;
		}
	}
	,noLights: function() {
		if(this.sceneOpen != true) {
			throw new Error("begin scene before setting lights");
		}
		this.numLights = 0;
	}
	,lights: function() {
		if(this.sceneOpen != true) {
			throw new Error("begin scene before setting lights");
		}
		if(this.numLights == this.lightBuf.length) {
			throw new Error("too many lights");
		}
		var light = this.lightBuf[this.numLights++];
		var a = light.col;
		a.x = 0.2;
		a.y = 0.2;
		a.z = 0.2;
		var a = light.pos;
		a.x = 0;
		a.y = 0;
		a.z = 0;
		a.w = 0;
		var a = light.nor;
		a.x = 0;
		a.y = 0;
		a.z = 0;
		var this1 = this.viewMat;
		var x = -this1.e20;
		var y = -this1.e21;
		var z = -this1.e22;
		if(this.sceneOpen != true) {
			throw new Error("begin scene before setting lights");
		}
		if(this.numLights == this.lightBuf.length) {
			throw new Error("too many lights");
		}
		var light = this.lightBuf[this.numLights++];
		var a = light.col;
		a.x = 0.8;
		a.y = 0.8;
		a.z = 0.8;
		var a = light.pos;
		a.x = 0;
		a.y = 0;
		a.z = 0;
		a.w = 0;
		var a = light.nor;
		var l = Math.sqrt(x * x + y * y + z * z);
		if(l > 0) {
			l = 1 / l;
		}
		var b = l;
		a.x = x * b;
		a.y = y * b;
		a.z = z * b;
	}
	,ambient: function(v) {
		if(this.sceneOpen != true) {
			throw new Error("begin scene before setting materials");
		}
		this.materialAmb = v;
	}
	,diffuse: function(v) {
		if(this.sceneOpen != true) {
			throw new Error("begin scene before setting materials");
		}
		this.materialDif = v;
	}
	,specular: function(v) {
		if(this.sceneOpen != true) {
			throw new Error("begin scene before setting materials");
		}
		this.materialSpc = v;
	}
	,shininess: function(v) {
		if(this.sceneOpen != true) {
			throw new Error("begin scene before setting materials");
		}
		this.materialShn = v;
	}
	,emission: function(v) {
		if(this.sceneOpen != true) {
			throw new Error("begin scene before setting materials");
		}
		this.materialEmi = v;
	}
	,nextIndex: function() {
		return this.localObjWriter.numVertices;
	}
	,makeQuad: function() {
		if(this.shapeOpen != true) {
			throw new Error("begin shape before makeQuad");
		}
		if(this.localObj.mode != 4) {
			throw new Error("shape mode must be Triangles");
		}
		var i = this.localObjWriter.numVertices - 4;
		var _this = this.localObjWriter.indexWriter;
		if(_this.length + 1 > _this.maxLength) {
			_this.expand();
		}
		_this.data[_this.length++] = i;
		_this.changed = true;
		var i = this.localObjWriter.numVertices - 2;
		var _this = this.localObjWriter.indexWriter;
		if(_this.length + 1 > _this.maxLength) {
			_this.expand();
		}
		_this.data[_this.length++] = i;
		_this.changed = true;
	}
	,beginShape: function(mode) {
		if(this.sceneOpen != true) {
			throw new Error("begin scene before begin shape");
		}
		if(this.shapeOpen != false) {
			throw new Error("shape already begun");
		}
		this.shapeOpen = true;
		this.localObjWriter.clear();
		this.localObj.mode = mode;
	}
	,endShape: function() {
		if(this.shapeOpen != true) {
			throw new Error("shape already ended");
		}
		this.shapeOpen = false;
		this.localObjWriter.upload();
		this.localObj.material.shader = this.chooseShader();
		this.drawObject(this.localObj);
	}
	,prepareUniforms: function() {
		var map = this.defaultUniformMap;
		var a = this.viewMat;
		var b = this.modelMat;
		var a00 = a.e00;
		var a01 = a.e01;
		var a02 = a.e02;
		var a03 = a.e03;
		var a10 = a.e10;
		var a11 = a.e11;
		var a12 = a.e12;
		var a13 = a.e13;
		var a20 = a.e20;
		var a21 = a.e21;
		var a22 = a.e22;
		var a23 = a.e23;
		var a30 = a.e30;
		var a31 = a.e31;
		var a32 = a.e32;
		var a33 = a.e33;
		var b00 = b.e00;
		var b01 = b.e01;
		var b02 = b.e02;
		var b03 = b.e03;
		var b10 = b.e10;
		var b11 = b.e11;
		var b12 = b.e12;
		var b13 = b.e13;
		var b20 = b.e20;
		var b21 = b.e21;
		var b22 = b.e22;
		var b23 = b.e23;
		var b30 = b.e30;
		var b31 = b.e31;
		var b32 = b.e32;
		var b33 = b.e33;
		var a_e00 = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;
		var a_e01 = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;
		var a_e02 = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;
		var a_e03 = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;
		var a_e10 = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;
		var a_e11 = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;
		var a_e12 = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;
		var a_e13 = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;
		var a_e20 = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;
		var a_e21 = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;
		var a_e22 = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;
		var a_e23 = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;
		var a_e30 = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;
		var a_e31 = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;
		var a_e32 = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;
		var a_e33 = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;
		var d0101 = a_e00 * a_e11 - a_e01 * a_e10;
		var d0102 = a_e00 * a_e12 - a_e02 * a_e10;
		var d0103 = a_e00 * a_e13 - a_e03 * a_e10;
		var d0112 = a_e01 * a_e12 - a_e02 * a_e11;
		var d0113 = a_e01 * a_e13 - a_e03 * a_e11;
		var d0123 = a_e02 * a_e13 - a_e03 * a_e12;
		var d2301 = a_e20 * a_e31 - a_e21 * a_e30;
		var d2302 = a_e20 * a_e32 - a_e22 * a_e30;
		var d2303 = a_e20 * a_e33 - a_e23 * a_e30;
		var d2312 = a_e21 * a_e32 - a_e22 * a_e31;
		var d2313 = a_e21 * a_e33 - a_e23 * a_e31;
		var d2323 = a_e22 * a_e33 - a_e23 * a_e32;
		var d00 = a_e11 * d2323 - a_e12 * d2313 + a_e13 * d2312;
		var d01 = a_e10 * d2323 - a_e12 * d2303 + a_e13 * d2302;
		var d02 = a_e10 * d2313 - a_e11 * d2303 + a_e13 * d2301;
		var d03 = a_e10 * d2312 - a_e11 * d2302 + a_e12 * d2301;
		var idet = a_e00 * d00 - a_e01 * d01 + a_e02 * d02 - a_e03 * d03;
		if(idet != 0) {
			idet = 1 / idet;
		}
		var a_e001 = d00 * idet;
		var a_e011 = -(a_e01 * d2323 - a_e02 * d2313 + a_e03 * d2312) * idet;
		var a_e021 = (a_e31 * d0123 - a_e32 * d0113 + a_e33 * d0112) * idet;
		var a_e101 = -d01 * idet;
		var a_e111 = (a_e00 * d2323 - a_e02 * d2303 + a_e03 * d2302) * idet;
		var a_e121 = -(a_e30 * d0123 - a_e32 * d0103 + a_e33 * d0102) * idet;
		var a_e201 = d02 * idet;
		var a_e211 = -(a_e00 * d2313 - a_e01 * d2303 + a_e03 * d2301) * idet;
		var a_e221 = (a_e30 * d0113 - a_e31 * d0103 + a_e33 * d0101) * idet;
		var uf = pot_graphics_gl_shader_DefaultShader.uniforms;
		var m = this.modelMat;
		map.h[uf.matrix.model.name] = pot_graphics_gl_UniformValue.Mat(4,4,[m.e00,m.e10,m.e20,m.e30,m.e01,m.e11,m.e21,m.e31,m.e02,m.e12,m.e22,m.e32,m.e03,m.e13,m.e23,m.e33]);
		var m = this.viewMat;
		map.h[uf.matrix.view.name] = pot_graphics_gl_UniformValue.Mat(4,4,[m.e00,m.e10,m.e20,m.e30,m.e01,m.e11,m.e21,m.e31,m.e02,m.e12,m.e22,m.e32,m.e03,m.e13,m.e23,m.e33]);
		var m = this.projMat;
		map.h[uf.matrix.projection.name] = pot_graphics_gl_UniformValue.Mat(4,4,[m.e00,m.e10,m.e20,m.e30,m.e01,m.e11,m.e21,m.e31,m.e02,m.e12,m.e22,m.e32,m.e03,m.e13,m.e23,m.e33]);
		var this1 = this.projMat;
		var e00 = this1.e00;
		var e01 = this1.e01;
		var e02 = this1.e02;
		var e03 = this1.e03;
		var e10 = this1.e10;
		var e11 = this1.e11;
		var e12 = this1.e12;
		var e13 = this1.e13;
		var e20 = this1.e20;
		var e21 = this1.e21;
		var e22 = this1.e22;
		var e23 = this1.e23;
		var e30 = this1.e30;
		var e31 = this1.e31;
		var e32 = this1.e32;
		var e33 = this1.e33;
		var d01011 = e00 * e11 - e01 * e10;
		var d01021 = e00 * e12 - e02 * e10;
		var d01031 = e00 * e13 - e03 * e10;
		var d01121 = e01 * e12 - e02 * e11;
		var d01131 = e01 * e13 - e03 * e11;
		var d01231 = e02 * e13 - e03 * e12;
		var d23011 = e20 * e31 - e21 * e30;
		var d23021 = e20 * e32 - e22 * e30;
		var d2303 = e20 * e33 - e23 * e30;
		var d23121 = e21 * e32 - e22 * e31;
		var d2313 = e21 * e33 - e23 * e31;
		var d2323 = e22 * e33 - e23 * e32;
		var d00 = e11 * d2323 - e12 * d2313 + e13 * d23121;
		var d01 = e10 * d2323 - e12 * d2303 + e13 * d23021;
		var d02 = e10 * d2313 - e11 * d2303 + e13 * d23011;
		var d031 = e10 * d23121 - e11 * d23021 + e12 * d23011;
		var idet1 = e00 * d00 - e01 * d01 + e02 * d02 - e03 * d031;
		if(idet1 != 0) {
			idet1 = 1 / idet1;
		}
		map.h[uf.matrix.invProjection.name] = pot_graphics_gl_UniformValue.Mat(4,4,[d00 * idet1,-d01 * idet1,d02 * idet1,-d031 * idet1,-(e01 * d2323 - e02 * d2313 + e03 * d23121) * idet1,(e00 * d2323 - e02 * d2303 + e03 * d23021) * idet1,-(e00 * d2313 - e01 * d2303 + e03 * d23011) * idet1,(e00 * d23121 - e01 * d23021 + e02 * d23011) * idet1,(e31 * d01231 - e32 * d01131 + e33 * d01121) * idet1,-(e30 * d01231 - e32 * d01031 + e33 * d01021) * idet1,(e30 * d01131 - e31 * d01031 + e33 * d01011) * idet1,-(e30 * d01121 - e31 * d01021 + e32 * d01011) * idet1,-(e21 * d01231 - e22 * d01131 + e23 * d01121) * idet1,(e20 * d01231 - e22 * d01031 + e23 * d01021) * idet1,-(e20 * d01131 - e21 * d01031 + e23 * d01011) * idet1,(e20 * d01121 - e21 * d01021 + e22 * d01011) * idet1]);
		map.h[uf.matrix.modelView.name] = pot_graphics_gl_UniformValue.Mat(4,4,[a_e00,a_e10,a_e20,a_e30,a_e01,a_e11,a_e21,a_e31,a_e02,a_e12,a_e22,a_e32,a_e03,a_e13,a_e23,a_e33]);
		var a = this.projMat;
		var a00 = a.e00;
		var a01 = a.e01;
		var a02 = a.e02;
		var a03 = a.e03;
		var a10 = a.e10;
		var a11 = a.e11;
		var a12 = a.e12;
		var a13 = a.e13;
		var a20 = a.e20;
		var a21 = a.e21;
		var a22 = a.e22;
		var a23 = a.e23;
		var a30 = a.e30;
		var a31 = a.e31;
		var a32 = a.e32;
		var a33 = a.e33;
		map.h[uf.matrix.transform.name] = pot_graphics_gl_UniformValue.Mat(4,4,[a00 * a_e00 + a01 * a_e10 + a02 * a_e20 + a03 * a_e30,a10 * a_e00 + a11 * a_e10 + a12 * a_e20 + a13 * a_e30,a20 * a_e00 + a21 * a_e10 + a22 * a_e20 + a23 * a_e30,a30 * a_e00 + a31 * a_e10 + a32 * a_e20 + a33 * a_e30,a00 * a_e01 + a01 * a_e11 + a02 * a_e21 + a03 * a_e31,a10 * a_e01 + a11 * a_e11 + a12 * a_e21 + a13 * a_e31,a20 * a_e01 + a21 * a_e11 + a22 * a_e21 + a23 * a_e31,a30 * a_e01 + a31 * a_e11 + a32 * a_e21 + a33 * a_e31,a00 * a_e02 + a01 * a_e12 + a02 * a_e22 + a03 * a_e32,a10 * a_e02 + a11 * a_e12 + a12 * a_e22 + a13 * a_e32,a20 * a_e02 + a21 * a_e12 + a22 * a_e22 + a23 * a_e32,a30 * a_e02 + a31 * a_e12 + a32 * a_e22 + a33 * a_e32,a00 * a_e03 + a01 * a_e13 + a02 * a_e23 + a03 * a_e33,a10 * a_e03 + a11 * a_e13 + a12 * a_e23 + a13 * a_e33,a20 * a_e03 + a21 * a_e13 + a22 * a_e23 + a23 * a_e33,a30 * a_e03 + a31 * a_e13 + a32 * a_e23 + a33 * a_e33]);
		map.h[uf.matrix.invModelView.name] = pot_graphics_gl_UniformValue.Mat(4,4,[a_e001,a_e101,a_e201,-d03 * idet,a_e011,a_e111,a_e211,(a_e00 * d2312 - a_e01 * d2302 + a_e02 * d2301) * idet,a_e021,a_e121,a_e221,-(a_e30 * d0112 - a_e31 * d0102 + a_e32 * d0101) * idet,-(a_e21 * d0123 - a_e22 * d0113 + a_e23 * d0112) * idet,(a_e20 * d0123 - a_e22 * d0103 + a_e23 * d0102) * idet,-(a_e20 * d0113 - a_e21 * d0103 + a_e23 * d0101) * idet,(a_e20 * d0112 - a_e21 * d0102 + a_e22 * d0101) * idet]);
		map.h[uf.matrix.normal.name] = pot_graphics_gl_UniformValue.Mat(3,3,[a_e001,a_e011,a_e021,a_e101,a_e111,a_e121,a_e201,a_e211,a_e221]);
		map.h[uf.material.texture.name] = pot_graphics_gl_UniformValue.Sampler(this.currentTexture);
		map.h[uf.material.ambient.name] = pot_graphics_gl_UniformValue.Float(this.materialAmb);
		map.h[uf.material.diffuse.name] = pot_graphics_gl_UniformValue.Float(this.materialDif);
		map.h[uf.material.specular.name] = pot_graphics_gl_UniformValue.Float(this.materialSpc);
		map.h[uf.material.shininess.name] = pot_graphics_gl_UniformValue.Float(this.materialShn);
		map.h[uf.material.emission.name] = pot_graphics_gl_UniformValue.Float(this.materialEmi);
		map.h[uf.numLights.name] = pot_graphics_gl_UniformValue.Int(this.numLights);
		var _g = 0;
		var _g1 = this.numLights;
		while(_g < _g1) {
			var i = _g++;
			var a = this.viewMat;
			var b = this.lightBuf[i].pos;
			map.h[hgsl_UniformArray.get(uf.lights,i).position.name] = pot_graphics_gl_UniformValue.Vec4(a.e00 * b.x + a.e01 * b.y + a.e02 * b.z + a.e03 * b.w,a.e10 * b.x + a.e11 * b.y + a.e12 * b.z + a.e13 * b.w,a.e20 * b.x + a.e21 * b.y + a.e22 * b.z + a.e23 * b.w,a.e30 * b.x + a.e31 * b.y + a.e32 * b.z + a.e33 * b.w);
			var this1 = this.viewMat;
			var b1 = this.lightBuf[i].nor;
			map.h[hgsl_UniformArray.get(uf.lights,i).normal.name] = pot_graphics_gl_UniformValue.Vec3(this1.e00 * b1.x + this1.e01 * b1.y + this1.e02 * b1.z,this1.e10 * b1.x + this1.e11 * b1.y + this1.e12 * b1.z,this1.e20 * b1.x + this1.e21 * b1.y + this1.e22 * b1.z);
			var v = this.lightBuf[i].col;
			map.h[hgsl_UniformArray.get(uf.lights,i).color.name] = pot_graphics_gl_UniformValue.Vec3(v.x,v.y,v.z);
		}
	}
	,drawObject: function(obj) {
		this.prepareUniforms();
		obj.draw(this.defaultUniformMap);
	}
	,drawObjectInstanced: function(obj,instanceCount) {
		this.prepareUniforms();
		obj.drawInstanced(this.defaultUniformMap,instanceCount);
	}
};
var pot_graphics_gl__$Graphics_Light = function() {
	this.col = new muun_la__$Vec3_Vec3Data(0,0,0);
	this.nor = new muun_la__$Vec3_Vec3Data(0,0,0);
	this.pos = new muun_la__$Vec4_Vec4Data(0,0,0,0);
};
pot_graphics_gl__$Graphics_Light.__name__ = true;
var pot_graphics_gl_IntBufferWriter = function(buffer,usage) {
	this.changed = false;
	this.length = 0;
	this.data = new Int32Array(512);
	this.buffer = buffer;
	this.usage = usage;
	this.maxLength = this.data.length;
};
pot_graphics_gl_IntBufferWriter.__name__ = true;
pot_graphics_gl_IntBufferWriter.prototype = {
	expand: function() {
		var oldData = this.data;
		this.data = new Int32Array(this.maxLength <<= 1);
		this.data.set(oldData);
	}
};
var pot_graphics_gl_Material = function(shader) {
	this.uniformMap = new haxe_ds_StringMap();
	this.shader = null;
	this.shader = shader;
};
pot_graphics_gl_Material.__name__ = true;
var pot_graphics_gl_Object = function(gl,attributes) {
	this.material = new pot_graphics_gl_Material();
	this.mode = 4;
	this.customAttributes = [];
	pot_graphics_gl_GLObject.call(this,gl);
	var defaultAttribs = pot_graphics_gl_shader_DefaultShader.attributes;
	this.position = new pot_graphics_gl_VertexAttribute({ buffer : pot_graphics_gl_TypedBuffer.Float(new pot_graphics_gl_low_FloatBuffer(gl,34962)), size : 3, stride : 0, offset : 0},defaultAttribs.aPosition.location);
	this.color = new pot_graphics_gl_VertexAttribute({ buffer : pot_graphics_gl_TypedBuffer.Float(new pot_graphics_gl_low_FloatBuffer(gl,34962)), size : 4, stride : 0, offset : 0},defaultAttribs.aColor.location);
	this.normal = new pot_graphics_gl_VertexAttribute({ buffer : pot_graphics_gl_TypedBuffer.Float(new pot_graphics_gl_low_FloatBuffer(gl,34962)), size : 3, stride : 0, offset : 0},defaultAttribs.aNormal.location);
	this.texCoord = new pot_graphics_gl_VertexAttribute({ buffer : pot_graphics_gl_TypedBuffer.Float(new pot_graphics_gl_low_FloatBuffer(gl,34962)), size : 2, stride : 0, offset : 0},defaultAttribs.aTexCoord.location);
	this.index = new pot_graphics_gl_low_IndexBuffer(gl);
	var tmp;
	var _g = this.position.buffer.buffer;
	switch(_g._hx_index) {
	case 0:
		throw haxe_Exception.thrown("float buffer expected");
	case 1:
		tmp = _g.buffer;
		break;
	}
	var tmp1;
	var _g = this.color.buffer.buffer;
	switch(_g._hx_index) {
	case 0:
		throw haxe_Exception.thrown("float buffer expected");
	case 1:
		tmp1 = _g.buffer;
		break;
	}
	var tmp2;
	var _g = this.normal.buffer.buffer;
	switch(_g._hx_index) {
	case 0:
		throw haxe_Exception.thrown("float buffer expected");
	case 1:
		tmp2 = _g.buffer;
		break;
	}
	var _g = this.texCoord.buffer.buffer;
	var tmp3;
	switch(_g._hx_index) {
	case 0:
		throw haxe_Exception.thrown("float buffer expected");
	case 1:
		tmp3 = _g.buffer;
		break;
	}
	this.writer = new pot_graphics_gl_ObjectWriter(tmp,tmp1,tmp2,tmp3,this.index.buffer);
	var result = new Array(attributes.length);
	var _g = 0;
	var _g1 = attributes.length;
	while(_g < _g1) {
		var i = _g++;
		var attribute = attributes[i];
		var tmp;
		switch(attribute._hx_index) {
		case 0:
			var _g2 = attribute.location;
			if(_g2 != null) {
				this.position.location = _g2;
			}
			tmp = this.position;
			break;
		case 1:
			var _g3 = attribute.location;
			if(_g3 != null) {
				this.color.location = _g3;
			}
			tmp = this.color;
			break;
		case 2:
			var _g4 = attribute.location;
			if(_g4 != null) {
				this.normal.location = _g4;
			}
			tmp = this.normal;
			break;
		case 3:
			var _g5 = attribute.location;
			if(_g5 != null) {
				this.texCoord.location = _g5;
			}
			tmp = this.texCoord;
			break;
		case 4:
			var _g6 = attribute.divisor;
			var res = new pot_graphics_gl_VertexAttribute(attribute.buffer,attribute.location,_g6 == null ? 0 : _g6);
			this.customAttributes.push(res);
			tmp = res;
			break;
		}
		result[i] = tmp;
	}
	this.obj = new pot_graphics_gl_low_VertexArrayObject(gl,result,this.index);
};
pot_graphics_gl_Object.__name__ = true;
pot_graphics_gl_Object.__super__ = pot_graphics_gl_GLObject;
pot_graphics_gl_Object.prototype = $extend(pot_graphics_gl_GLObject.prototype,{
	rebindAttributes: function() {
		this.obj.rebindAttributes();
	}
	,draw: function(defaultMap) {
		this.material.shader.bind([defaultMap,this.material.uniformMap]);
		this.obj.mode = this.mode;
		this.obj.draw();
	}
	,drawInstanced: function(defaultMap,instanceCount) {
		this.material.shader.bind([defaultMap,this.material.uniformMap]);
		this.obj.mode = this.mode;
		this.obj.drawInstanced(instanceCount);
	}
	,disposeImpl: function() {
		this.position.dispose();
		this.color.dispose();
		this.normal.dispose();
		this.texCoord.dispose();
		this.obj.dispose();
	}
});
var pot_graphics_gl_ObjectWriter = function(position,color,normal,texCoord,index) {
	this.numVertices = 0;
	this.v = 0;
	this.u = 0;
	this.nz = 0;
	this.ny = 0;
	this.nx = 0;
	this.ca = 1;
	this.cb = 1;
	this.cg = 1;
	this.cr = 1;
	this.positionWriter = new pot_graphics_gl_FloatBufferWriter(position,35048);
	this.colorWriter = new pot_graphics_gl_FloatBufferWriter(color,35048);
	this.normalWriter = new pot_graphics_gl_FloatBufferWriter(normal,35048);
	this.texCoordWriter = new pot_graphics_gl_FloatBufferWriter(texCoord,35048);
	this.indexWriter = new pot_graphics_gl_IntBufferWriter(index,35048);
};
pot_graphics_gl_ObjectWriter.__name__ = true;
pot_graphics_gl_ObjectWriter.prototype = {
	clear: function() {
		var _this = this.positionWriter;
		_this.length = 0;
		_this.changed = true;
		var _this = this.colorWriter;
		_this.length = 0;
		_this.changed = true;
		var _this = this.normalWriter;
		_this.length = 0;
		_this.changed = true;
		var _this = this.texCoordWriter;
		_this.length = 0;
		_this.changed = true;
		var _this = this.indexWriter;
		_this.length = 0;
		_this.changed = true;
		this.numVertices = 0;
	}
	,upload: function() {
		var _this = this.positionWriter;
		if(_this.changed) {
			_this.changed = false;
			_this.buffer.upload(new Float32Array(_this.data.buffer,0,_this.length),_this.usage);
		}
		var _this = this.colorWriter;
		if(_this.changed) {
			_this.changed = false;
			_this.buffer.upload(new Float32Array(_this.data.buffer,0,_this.length),_this.usage);
		}
		var _this = this.normalWriter;
		if(_this.changed) {
			_this.changed = false;
			_this.buffer.upload(new Float32Array(_this.data.buffer,0,_this.length),_this.usage);
		}
		var _this = this.texCoordWriter;
		if(_this.changed) {
			_this.changed = false;
			_this.buffer.upload(new Float32Array(_this.data.buffer,0,_this.length),_this.usage);
		}
		var _this = this.indexWriter;
		if(_this.changed) {
			_this.changed = false;
			_this.buffer.upload(new Int32Array(_this.data.buffer,0,_this.length),_this.usage);
		}
	}
};
var pot_graphics_gl_Shader = function(gl) {
	this.uniformValueMap = new haxe_ds_StringMap();
	this.uniformLocationMap = new haxe_ds_StringMap();
	this.localTextureCount = 0;
	pot_graphics_gl_GLObject.call(this,gl);
	this.program = new pot_graphics_gl_low_Program(gl);
};
pot_graphics_gl_Shader.__name__ = true;
pot_graphics_gl_Shader.__super__ = pot_graphics_gl_GLObject;
pot_graphics_gl_Shader.prototype = $extend(pot_graphics_gl_GLObject.prototype,{
	hasUniform: function(name) {
		return this.getUniformLocation(name) != null;
	}
	,compile: function(vertexSource,fragmentSource,transformFeedbackOutput) {
		this.uniformLocationMap.h = Object.create(null);
		this.uniformValueMap.h = Object.create(null);
		var alerted = false;
		this.program.compile(vertexSource,fragmentSource,transformFeedbackOutput,function(message) {
			var msg = message + "\nvertex shader source:\n" + vertexSource;
			window.alert(Std.string(msg));
			$global.console.log(msg);
			alerted = true;
		},function(message) {
			var msg = message + "\nfragment shader source:\n" + fragmentSource;
			window.alert(Std.string(msg));
			$global.console.log(msg);
			alerted = true;
		},function(message) {
			if(!alerted) {
				window.alert(Std.string(message));
			}
			$global.console.log(message);
		});
	}
	,bind: function(maps) {
		if(!this.program.compiled) {
			throw new Error("shader is not compiled");
		}
		this.program.use();
		this.bindUniforms(maps);
	}
	,bindUniforms: function(maps) {
		this.localTextureCount = 0;
		var _g = 0;
		while(_g < maps.length) {
			var h = maps[_g++].h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_value = h[key];
				if(!this.hasUniform(key)) {
					continue;
				}
				this.bindUniform(key,this.getUniformLocation(key),_g_value);
			}
		}
		this.gl.activeTexture(33984);
	}
	,bindUniform: function(name,location,value) {
		var ivalue = this.uniformValueMap.h[name];
		var type = -1;
		var dim = -1;
		var count = -1;
		switch(value._hx_index) {
		case 0:
			type = 0;
			dim = 1;
			count = 1;
			break;
		case 1:
			type = 0;
			dim = 2;
			count = 1;
			break;
		case 2:
			type = 0;
			dim = 3;
			count = 1;
			break;
		case 3:
			type = 0;
			dim = 4;
			count = 1;
			break;
		case 4:
			type = 1;
			dim = 1;
			count = 1;
			break;
		case 5:
			type = 1;
			dim = 2;
			count = 1;
			break;
		case 6:
			type = 1;
			dim = 3;
			count = 1;
			break;
		case 7:
			type = 1;
			dim = 4;
			count = 1;
			break;
		case 8:
			type = 2;
			dim = 1;
			count = 1;
			break;
		case 9:
			type = 2;
			dim = 2;
			count = 1;
			break;
		case 10:
			type = 2;
			dim = 3;
			count = 1;
			break;
		case 11:
			type = 2;
			dim = 4;
			count = 1;
			break;
		case 12:
			type = 1;
			dim = 1;
			count = 1;
			break;
		case 13:
			type = 1;
			dim = 2;
			count = 1;
			break;
		case 14:
			type = 1;
			dim = 3;
			count = 1;
			break;
		case 15:
			type = 1;
			dim = 4;
			count = 1;
			break;
		case 16:
			type = 0;
			dim = value.rows;
			count = value.cols;
			break;
		case 17:
			type = 1;
			dim = 1;
			count = 1;
			break;
		case 18:
			type = 0;
			dim = 1;
			count = value.vs.length;
			break;
		case 19:
			var _g = value.vs;
			type = 0;
			dim = _g[0].length;
			count = _g.length;
			break;
		case 20:
			type = 1;
			dim = 1;
			count = value.vs.length;
			break;
		case 21:
			var _g = value.vs;
			type = 1;
			dim = _g[0].length;
			count = _g.length;
			break;
		case 22:
			type = 2;
			dim = 1;
			count = value.vs.length;
			break;
		case 23:
			var _g = value.vs;
			type = 2;
			dim = _g[0].length;
			count = _g.length;
			break;
		case 24:
			type = 1;
			dim = 1;
			count = value.vs.length;
			break;
		case 25:
			var _g = value.vs;
			type = 1;
			dim = _g[0].length;
			count = _g.length;
			break;
		case 26:
			var _g = value.cols;
			var _g1 = value.rows;
			type = 0;
			dim = _g1;
			count = _g * value.vs.length;
			if(_g < 2 || _g1 < 2 || _g > 4 || _g1 > 4) {
				throw haxe_Exception.thrown("invalid matrix size: " + _g + ", " + _g1);
			}
			break;
		case 27:
			type = 1;
			dim = 1;
			count = value.ts.length;
			break;
		}
		var fa = null;
		var ia = null;
		var ua = null;
		var sameType;
		if(ivalue == null) {
			sameType = false;
		} else {
			switch(ivalue._hx_index) {
			case 0:
				var _g = ivalue.vs;
				fa = _g;
				sameType = type == 0 && dim == ivalue.dim && dim * count == _g.length;
				break;
			case 1:
				var _g = ivalue.vs;
				ia = _g;
				sameType = type == 1 && dim == ivalue.dim && dim * count == _g.length;
				break;
			case 2:
				var _g = ivalue.vs;
				ua = _g;
				sameType = type == 2 && dim == ivalue.dim && dim * count == _g.length;
				break;
			}
		}
		if(!sameType) {
			switch(type) {
			case 0:
				fa = new Float32Array(dim * count);
				ivalue = pot_graphics_gl__$Shader_InternalUniformValue.Floats(dim,fa);
				break;
			case 1:
				ia = new Int32Array(dim * count);
				ivalue = pot_graphics_gl__$Shader_InternalUniformValue.Ints(dim,ia);
				break;
			default:
				ua = new Uint32Array(dim * count);
				ivalue = pot_graphics_gl__$Shader_InternalUniformValue.UInts(dim,ua);
			}
		}
		var sameValue = sameType;
		switch(value._hx_index) {
		case 0:
			var _g = value.x;
			sameValue = sameValue && fa[0] == _g;
			fa[0] = _g;
			break;
		case 1:
			var _g = value.x;
			var _g1 = value.y;
			sameValue = sameValue && fa[0] == _g && fa[1] == _g1;
			fa[0] = _g;
			fa[1] = _g1;
			break;
		case 2:
			var _g = value.x;
			var _g1 = value.y;
			var _g2 = value.z;
			sameValue = sameValue && fa[0] == _g && fa[1] == _g1 && fa[2] == _g2;
			fa[0] = _g;
			fa[1] = _g1;
			fa[2] = _g2;
			break;
		case 3:
			var _g = value.x;
			var _g1 = value.y;
			var _g2 = value.z;
			var _g3 = value.w;
			sameValue = sameValue && fa[0] == _g && fa[1] == _g1 && fa[2] == _g2 && fa[3] == _g3;
			fa[0] = _g;
			fa[1] = _g1;
			fa[2] = _g2;
			fa[3] = _g3;
			break;
		case 4:
			var _g = value.x;
			sameValue = sameValue && ia[0] == _g;
			ia[0] = _g;
			break;
		case 5:
			var _g = value.x;
			var _g1 = value.y;
			sameValue = sameValue && ia[0] == _g && ia[1] == _g1;
			ia[0] = _g;
			ia[1] = _g1;
			break;
		case 6:
			var _g = value.x;
			var _g1 = value.y;
			var _g2 = value.z;
			sameValue = sameValue && ia[0] == _g && ia[1] == _g1 && ia[2] == _g2;
			ia[0] = _g;
			ia[1] = _g1;
			ia[2] = _g2;
			break;
		case 7:
			var _g = value.x;
			var _g1 = value.y;
			var _g2 = value.z;
			var _g3 = value.w;
			sameValue = sameValue && ia[0] == _g && ia[1] == _g1 && ia[2] == _g2 && ia[3] == _g3;
			ia[0] = _g;
			ia[1] = _g1;
			ia[2] = _g2;
			ia[3] = _g3;
			break;
		case 8:
			var _g = value.x;
			sameValue = sameValue && ua[0] == _g;
			ua[0] = _g;
			break;
		case 9:
			var _g = value.x;
			var _g1 = value.y;
			sameValue = sameValue && ua[0] == _g && ua[1] == _g1;
			ua[0] = _g;
			ua[1] = _g1;
			break;
		case 10:
			var _g = value.x;
			var _g1 = value.y;
			var _g2 = value.z;
			sameValue = sameValue && ua[0] == _g && ua[1] == _g1 && ua[2] == _g2;
			ua[0] = _g;
			ua[1] = _g1;
			ua[2] = _g2;
			break;
		case 11:
			var _g = value.x;
			var _g1 = value.y;
			var _g2 = value.z;
			var _g3 = value.w;
			sameValue = sameValue && ua[0] == _g && ua[1] == _g1 && ua[2] == _g2 && ua[3] == _g3;
			ua[0] = _g;
			ua[1] = _g1;
			ua[2] = _g2;
			ua[3] = _g3;
			break;
		case 12:
			var _g = value.x;
			sameValue = sameValue && ia[0] == (_g ? 1 : 0);
			ia[0] = _g ? 1 : 0;
			break;
		case 13:
			var _g = value.x;
			var _g1 = value.y;
			sameValue = sameValue && ia[0] == (_g ? 1 : 0) && ia[1] == (_g1 ? 1 : 0);
			ia[0] = _g ? 1 : 0;
			ia[1] = _g1 ? 1 : 0;
			break;
		case 14:
			var _g = value.x;
			var _g1 = value.y;
			var _g2 = value.z;
			sameValue = sameValue && ia[0] == (_g ? 1 : 0) && ia[1] == (_g1 ? 1 : 0) && ia[2] == (_g2 ? 1 : 0);
			ia[0] = _g ? 1 : 0;
			ia[1] = _g1 ? 1 : 0;
			ia[2] = _g2 ? 1 : 0;
			break;
		case 15:
			var _g = value.x;
			var _g1 = value.y;
			var _g2 = value.z;
			var _g3 = value.w;
			sameValue = sameValue && ia[0] == (_g ? 1 : 0) && ia[1] == (_g1 ? 1 : 0) && ia[2] == (_g2 ? 1 : 0) && ia[3] == (_g3 ? 1 : 0);
			ia[0] = _g ? 1 : 0;
			ia[1] = _g1 ? 1 : 0;
			ia[2] = _g2 ? 1 : 0;
			ia[3] = _g3 ? 1 : 0;
			break;
		case 16:
			var _g = value.vs;
			var _g_current = 0;
			while(_g_current < _g.length) {
				var _g_value = _g[_g_current];
				var _g_key = _g_current++;
				sameValue = sameValue && fa[_g_key] == _g_value;
				fa[_g_key] = _g_value;
			}
			break;
		case 17:
			var _g = value.t;
			sameValue = sameValue && ia[0] == this.localTextureCount;
			ia[0] = this.localTextureCount;
			this.gl.activeTexture(33984 + this.localTextureCount);
			this.gl.bindTexture(3553,_g == null ? null : _g.getRawTexture());
			this.localTextureCount++;
			break;
		case 18:
			var _g = value.vs;
			var _g_current = 0;
			while(_g_current < _g.length) {
				var _g_value = _g[_g_current];
				var _g_key = _g_current++;
				sameValue = sameValue && fa[_g_key] == _g_value;
				fa[_g_key] = _g_value;
			}
			break;
		case 19:
			var _g = value.vs;
			var i = 0;
			var _g1 = 0;
			while(_g1 < _g.length) {
				var vec = _g[_g1];
				++_g1;
				var _g2 = 0;
				while(_g2 < vec.length) {
					var v = vec[_g2];
					++_g2;
					sameValue = sameValue && fa[i] == v;
					fa[i] = v;
					++i;
				}
			}
			break;
		case 20:
			var _g = value.vs;
			var _g_current = 0;
			while(_g_current < _g.length) {
				var _g_value = _g[_g_current];
				var _g_key = _g_current++;
				sameValue = sameValue && ia[_g_key] == _g_value;
				ia[_g_key] = _g_value;
			}
			break;
		case 21:
			var _g = value.vs;
			var i = 0;
			var _g1 = 0;
			while(_g1 < _g.length) {
				var vec = _g[_g1];
				++_g1;
				var _g2 = 0;
				while(_g2 < vec.length) {
					var v = vec[_g2];
					++_g2;
					sameValue = sameValue && ia[i] == v;
					ia[i] = v;
					++i;
				}
			}
			break;
		case 22:
			var _g = value.vs;
			var _g_current = 0;
			while(_g_current < _g.length) {
				var _g_value = _g[_g_current];
				var _g_key = _g_current++;
				sameValue = sameValue && ua[_g_key] == _g_value;
				ua[_g_key] = _g_value;
			}
			break;
		case 23:
			var _g = value.vs;
			var i = 0;
			var _g1 = 0;
			while(_g1 < _g.length) {
				var vec = _g[_g1];
				++_g1;
				var _g2 = 0;
				while(_g2 < vec.length) {
					var v = vec[_g2];
					++_g2;
					sameValue = sameValue && ua[i] == v;
					ua[i] = v;
					++i;
				}
			}
			break;
		case 24:
			var _g = value.vs;
			var _g_current = 0;
			while(_g_current < _g.length) {
				var _g_value = _g[_g_current];
				var _g_key = _g_current++;
				sameValue = sameValue && ia[_g_key] == (_g_value ? 1 : 0);
				ia[_g_key] = _g_value ? 1 : 0;
			}
			break;
		case 25:
			var _g = value.vs;
			var i = 0;
			var _g1 = 0;
			while(_g1 < _g.length) {
				var vec = _g[_g1];
				++_g1;
				var _g2 = 0;
				while(_g2 < vec.length) {
					var v = vec[_g2];
					++_g2;
					sameValue = sameValue && ia[i] == (v ? 1 : 0);
					ia[i] = v ? 1 : 0;
					++i;
				}
			}
			break;
		case 26:
			var _g = value.vs;
			var i = 0;
			var _g1 = 0;
			while(_g1 < _g.length) {
				var vec = _g[_g1];
				++_g1;
				var _g2 = 0;
				while(_g2 < vec.length) {
					var v = vec[_g2];
					++_g2;
					sameValue = sameValue && fa[i] == v;
					fa[i] = v;
					++i;
				}
			}
			break;
		case 27:
			var _g = value.ts;
			var _g_current = 0;
			while(_g_current < _g.length) {
				var _g_value = _g[_g_current++];
				var _g_key = _g_current - 1;
				sameValue = sameValue && ia[_g_key] == this.localTextureCount;
				ia[_g_key] = this.localTextureCount;
				this.gl.activeTexture(33984 + this.localTextureCount);
				this.gl.bindTexture(3553,_g_value.getRawTexture());
				this.localTextureCount++;
			}
			break;
		}
		if(sameValue) {
			return;
		}
		this.uniformValueMap.h[name] = ivalue;
		switch(value._hx_index) {
		case 16:
			var _g = value.rows;
			switch(value.cols) {
			case 2:
				switch(_g) {
				case 2:
					this.gl.uniformMatrix2fv(location,false,fa);
					break;
				case 3:
					this.gl.uniformMatrix2x3fv(location,false,fa);
					break;
				case 4:
					this.gl.uniformMatrix2x4fv(location,false,fa);
					break;
				default:
					this.gl.uniformMatrix4fv(location,false,fa);
				}
				break;
			case 3:
				switch(_g) {
				case 2:
					this.gl.uniformMatrix3x2fv(location,false,fa);
					break;
				case 3:
					this.gl.uniformMatrix3fv(location,false,fa);
					break;
				case 4:
					this.gl.uniformMatrix3x4fv(location,false,fa);
					break;
				default:
					this.gl.uniformMatrix4fv(location,false,fa);
				}
				break;
			case 4:
				switch(_g) {
				case 2:
					this.gl.uniformMatrix4x2fv(location,false,fa);
					break;
				case 3:
					this.gl.uniformMatrix4x3fv(location,false,fa);
					break;
				default:
					this.gl.uniformMatrix4fv(location,false,fa);
				}
				break;
			default:
				this.gl.uniformMatrix4fv(location,false,fa);
			}
			break;
		case 26:
			var _g = value.rows;
			switch(value.cols) {
			case 2:
				switch(_g) {
				case 2:
					this.gl.uniformMatrix2fv(location,false,fa);
					break;
				case 3:
					this.gl.uniformMatrix2x3fv(location,false,fa);
					break;
				case 4:
					this.gl.uniformMatrix2x4fv(location,false,fa);
					break;
				default:
					this.gl.uniformMatrix4fv(location,false,fa);
				}
				break;
			case 3:
				switch(_g) {
				case 2:
					this.gl.uniformMatrix3x2fv(location,false,fa);
					break;
				case 3:
					this.gl.uniformMatrix3fv(location,false,fa);
					break;
				case 4:
					this.gl.uniformMatrix3x4fv(location,false,fa);
					break;
				default:
					this.gl.uniformMatrix4fv(location,false,fa);
				}
				break;
			case 4:
				switch(_g) {
				case 2:
					this.gl.uniformMatrix4x2fv(location,false,fa);
					break;
				case 3:
					this.gl.uniformMatrix4x3fv(location,false,fa);
					break;
				default:
					this.gl.uniformMatrix4fv(location,false,fa);
				}
				break;
			default:
				this.gl.uniformMatrix4fv(location,false,fa);
			}
			break;
		default:
			switch(type) {
			case 0:
				switch(dim) {
				case 1:
					this.gl.uniform1fv(location,fa);
					break;
				case 2:
					this.gl.uniform2fv(location,fa);
					break;
				case 3:
					this.gl.uniform3fv(location,fa);
					break;
				case 4:
					this.gl.uniform4fv(location,fa);
					break;
				default:
					this.gl.uniform4uiv(location,ua);
				}
				break;
			case 1:
				switch(dim) {
				case 1:
					this.gl.uniform1iv(location,ia);
					break;
				case 2:
					this.gl.uniform2iv(location,ia);
					break;
				case 3:
					this.gl.uniform3iv(location,ia);
					break;
				case 4:
					this.gl.uniform4iv(location,ia);
					break;
				default:
					this.gl.uniform4uiv(location,ua);
				}
				break;
			case 2:
				switch(dim) {
				case 1:
					this.gl.uniform1uiv(location,ua);
					break;
				case 2:
					this.gl.uniform2uiv(location,ua);
					break;
				case 3:
					this.gl.uniform3uiv(location,ua);
					break;
				default:
					this.gl.uniform4uiv(location,ua);
				}
				break;
			default:
				this.gl.uniform4uiv(location,ua);
			}
		}
	}
	,getUniformLocation: function(name) {
		if(Object.prototype.hasOwnProperty.call(this.uniformLocationMap.h,name)) {
			return this.uniformLocationMap.h[name];
		}
		var loc = this.program.getUniformLocation(name);
		this.uniformLocationMap.h[name] = loc;
		return loc;
	}
	,disposeImpl: function() {
		this.program.dispose();
	}
});
var pot_graphics_gl__$Shader_InternalUniformValue = $hxEnums["pot.graphics.gl._Shader.InternalUniformValue"] = { __ename__:true,__constructs__:null
	,Floats: ($_=function(dim,vs) { return {_hx_index:0,dim:dim,vs:vs,__enum__:"pot.graphics.gl._Shader.InternalUniformValue",toString:$estr}; },$_._hx_name="Floats",$_.__params__ = ["dim","vs"],$_)
	,Ints: ($_=function(dim,vs) { return {_hx_index:1,dim:dim,vs:vs,__enum__:"pot.graphics.gl._Shader.InternalUniformValue",toString:$estr}; },$_._hx_name="Ints",$_.__params__ = ["dim","vs"],$_)
	,UInts: ($_=function(dim,vs) { return {_hx_index:2,dim:dim,vs:vs,__enum__:"pot.graphics.gl._Shader.InternalUniformValue",toString:$estr}; },$_._hx_name="UInts",$_.__params__ = ["dim","vs"],$_)
};
pot_graphics_gl__$Shader_InternalUniformValue.__constructs__ = [pot_graphics_gl__$Shader_InternalUniformValue.Floats,pot_graphics_gl__$Shader_InternalUniformValue.Ints,pot_graphics_gl__$Shader_InternalUniformValue.UInts];
var pot_graphics_gl_Texture = function(gl) {
	pot_graphics_gl_GLObject.call(this,gl);
	this.texWrapU = 33071;
	this.texWrapV = 33071;
	this.texFilter = 9729;
	this.texture = gl.createTexture();
	this.frameBuffer = new pot_graphics_gl_FrameBuffer(gl,[this],false);
};
pot_graphics_gl_Texture.__name__ = true;
pot_graphics_gl_Texture.__super__ = pot_graphics_gl_GLObject;
pot_graphics_gl_Texture.prototype = $extend(pot_graphics_gl_GLObject.prototype,{
	getRawTexture: function() {
		return this.texture;
	}
	,internalFormatWrap: function() {
		var _g = this.type;
		switch(this.format) {
		case 6403:
			switch(_g) {
			case 5121:
				return 33321;
			case 5124:
				return 33333;
			case 5125:
				return 33334;
			case 5126:
				return 33326;
			case 5131:
				return 33325;
			}
			break;
		case 6407:
			switch(_g) {
			case 5121:
				return 32849;
			case 5124:
				return 36227;
			case 5125:
				return 36209;
			case 5126:
				return 34837;
			case 5131:
				return 34843;
			}
			break;
		case 6408:
			switch(_g) {
			case 5121:
				return 32856;
			case 5124:
				return 36226;
			case 5125:
				return 36208;
			case 5126:
				return 34836;
			case 5131:
				return 34842;
			}
			break;
		}
	}
	,formatWrap: function() {
		var _g = this.type;
		switch(this.format) {
		case 6403:
			switch(_g) {
			case 5124:case 5125:
				return 36244;
			case 5121:case 5126:case 5131:
				return 6403;
			}
			break;
		case 6407:
			switch(_g) {
			case 5124:case 5125:
				return 36248;
			case 5121:case 5126:case 5131:
				return 6407;
			}
			break;
		case 6408:
			switch(_g) {
			case 5124:case 5125:
				return 36249;
			case 5121:case 5126:case 5131:
				return 6408;
			}
			break;
		}
	}
	,numChannels: function() {
		switch(this.format) {
		case 6403:
			return 1;
		case 6407:
			return 3;
		case 6408:
			return 4;
		}
	}
	,init: function(width,height,format,type) {
		this.width = width;
		this.height = height;
		this.format = format;
		this.type = type;
		this.gl.bindTexture(3553,this.texture);
		this.gl.texImage2D(3553,0,this.internalFormatWrap(),width,height,0,this.formatWrap(),type,null);
		this.gl.bindTexture(3553,null);
		switch(type) {
		case 5124:case 5125:
			this.texFilter = 9728;
			break;
		default:
		}
		var filter = this.texFilter;
		this.texFilter = filter;
		this.gl.bindTexture(3553,this.texture);
		switch(filter) {
		case 9728:
			this.gl.texParameteri(3553,10240,9728);
			this.gl.texParameteri(3553,10241,9728);
			break;
		case 9729:
			this.gl.texParameteri(3553,10240,9729);
			this.gl.texParameteri(3553,10241,9729);
			break;
		}
		this.gl.bindTexture(3553,null);
		var wrapU = this.texWrapU;
		var wrapV = this.texWrapV;
		this.texWrapU = wrapU;
		this.texWrapV = wrapV;
		this.gl.bindTexture(3553,this.texture);
		this.gl.texParameteri(3553,10242,wrapU);
		this.gl.texParameteri(3553,10243,wrapV);
		this.gl.bindTexture(3553,null);
		this.initFBO();
	}
	,load: function(source,format,type,flipY) {
		if(flipY == null) {
			flipY = true;
		}
		this.width = source.width;
		this.height = source.height;
		this.format = format;
		this.type = type;
		this.gl.pixelStorei(37440,flipY);
		this.gl.bindTexture(3553,this.texture);
		this.gl.texImage2D(3553,0,this.internalFormatWrap(),this.formatWrap(),type,source.source);
		this.gl.bindTexture(3553,null);
		this.gl.pixelStorei(37440,true);
		switch(type) {
		case 5124:case 5125:
			this.texFilter = 9728;
			break;
		default:
		}
		var filter = this.texFilter;
		this.texFilter = filter;
		this.gl.bindTexture(3553,this.texture);
		switch(filter) {
		case 9728:
			this.gl.texParameteri(3553,10240,9728);
			this.gl.texParameteri(3553,10241,9728);
			break;
		case 9729:
			this.gl.texParameteri(3553,10240,9729);
			this.gl.texParameteri(3553,10241,9729);
			break;
		}
		this.gl.bindTexture(3553,null);
		var wrapU = this.texWrapU;
		var wrapV = this.texWrapV;
		this.texWrapU = wrapU;
		this.texWrapV = wrapV;
		this.gl.bindTexture(3553,this.texture);
		this.gl.texParameteri(3553,10242,wrapU);
		this.gl.texParameteri(3553,10243,wrapV);
		this.gl.bindTexture(3553,null);
		this.initFBO();
	}
	,sync: function() {
		this.gl.bindFramebuffer(36160,this.frameBuffer.getRawFrameBuffer());
		var nc = this.numChannels();
		var tmp = this.gl;
		var tmp1 = this.formatWrap();
		var tmp2;
		switch(this.type) {
		case 5121:
			tmp2 = new Uint8Array(nc);
			break;
		case 5124:
			tmp2 = new Int32Array(nc);
			break;
		case 5125:
			tmp2 = new Uint32Array(nc);
			break;
		case 5126:
			tmp2 = new Float32Array(nc);
			break;
		case 5131:
			tmp2 = new Uint16Array(nc);
			break;
		}
		tmp.readPixels(0,0,1,1,tmp1,this.type,tmp2);
		this.gl.bindFramebuffer(36160,null);
	}
	,initFBO: function() {
		this.frameBuffer.initBuffers();
	}
	,filter: function(filter,enableMipmapping) {
		if(enableMipmapping == null) {
			enableMipmapping = false;
		}
		this.texFilter = filter;
		this.gl.bindTexture(3553,this.texture);
		switch(filter) {
		case 9728:
			this.gl.texParameteri(3553,10240,9728);
			if(enableMipmapping) {
				this.gl.texParameteri(3553,10241,9984);
			} else {
				this.gl.texParameteri(3553,10241,9728);
			}
			break;
		case 9729:
			this.gl.texParameteri(3553,10240,9729);
			if(enableMipmapping) {
				this.gl.texParameteri(3553,10241,9987);
			} else {
				this.gl.texParameteri(3553,10241,9729);
			}
			break;
		}
		if(enableMipmapping) {
			this.gl.generateMipmap(3553);
		}
		this.gl.bindTexture(3553,null);
	}
	,wrap: function(wrapU,wrapV) {
		this.texWrapU = wrapU;
		this.texWrapV = wrapV;
		this.gl.bindTexture(3553,this.texture);
		this.gl.texParameteri(3553,10242,wrapU);
		this.gl.texParameteri(3553,10243,wrapV);
		this.gl.bindTexture(3553,null);
	}
	,disposeImpl: function() {
		this.gl.deleteTexture(this.texture);
		this.frameBuffer.dispose();
	}
});
var pot_graphics_gl_TypedBuffer = $hxEnums["pot.graphics.gl.TypedBuffer"] = { __ename__:true,__constructs__:null
	,Int: ($_=function(buffer) { return {_hx_index:0,buffer:buffer,__enum__:"pot.graphics.gl.TypedBuffer",toString:$estr}; },$_._hx_name="Int",$_.__params__ = ["buffer"],$_)
	,Float: ($_=function(buffer) { return {_hx_index:1,buffer:buffer,__enum__:"pot.graphics.gl.TypedBuffer",toString:$estr}; },$_._hx_name="Float",$_.__params__ = ["buffer"],$_)
};
pot_graphics_gl_TypedBuffer.__constructs__ = [pot_graphics_gl_TypedBuffer.Int,pot_graphics_gl_TypedBuffer.Float];
var pot_graphics_gl_UniformValue = $hxEnums["pot.graphics.gl.UniformValue"] = { __ename__:true,__constructs__:null
	,Float: ($_=function(x) { return {_hx_index:0,x:x,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Float",$_.__params__ = ["x"],$_)
	,Vec2: ($_=function(x,y) { return {_hx_index:1,x:x,y:y,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Vec2",$_.__params__ = ["x","y"],$_)
	,Vec3: ($_=function(x,y,z) { return {_hx_index:2,x:x,y:y,z:z,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Vec3",$_.__params__ = ["x","y","z"],$_)
	,Vec4: ($_=function(x,y,z,w) { return {_hx_index:3,x:x,y:y,z:z,w:w,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Vec4",$_.__params__ = ["x","y","z","w"],$_)
	,Int: ($_=function(x) { return {_hx_index:4,x:x,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Int",$_.__params__ = ["x"],$_)
	,IVec2: ($_=function(x,y) { return {_hx_index:5,x:x,y:y,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="IVec2",$_.__params__ = ["x","y"],$_)
	,IVec3: ($_=function(x,y,z) { return {_hx_index:6,x:x,y:y,z:z,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="IVec3",$_.__params__ = ["x","y","z"],$_)
	,IVec4: ($_=function(x,y,z,w) { return {_hx_index:7,x:x,y:y,z:z,w:w,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="IVec4",$_.__params__ = ["x","y","z","w"],$_)
	,UInt: ($_=function(x) { return {_hx_index:8,x:x,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="UInt",$_.__params__ = ["x"],$_)
	,UVec2: ($_=function(x,y) { return {_hx_index:9,x:x,y:y,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="UVec2",$_.__params__ = ["x","y"],$_)
	,UVec3: ($_=function(x,y,z) { return {_hx_index:10,x:x,y:y,z:z,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="UVec3",$_.__params__ = ["x","y","z"],$_)
	,UVec4: ($_=function(x,y,z,w) { return {_hx_index:11,x:x,y:y,z:z,w:w,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="UVec4",$_.__params__ = ["x","y","z","w"],$_)
	,Bool: ($_=function(x) { return {_hx_index:12,x:x,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Bool",$_.__params__ = ["x"],$_)
	,BVec2: ($_=function(x,y) { return {_hx_index:13,x:x,y:y,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="BVec2",$_.__params__ = ["x","y"],$_)
	,BVec3: ($_=function(x,y,z) { return {_hx_index:14,x:x,y:y,z:z,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="BVec3",$_.__params__ = ["x","y","z"],$_)
	,BVec4: ($_=function(x,y,z,w) { return {_hx_index:15,x:x,y:y,z:z,w:w,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="BVec4",$_.__params__ = ["x","y","z","w"],$_)
	,Mat: ($_=function(cols,rows,vs) { return {_hx_index:16,cols:cols,rows:rows,vs:vs,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Mat",$_.__params__ = ["cols","rows","vs"],$_)
	,Sampler: ($_=function(t) { return {_hx_index:17,t:t,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Sampler",$_.__params__ = ["t"],$_)
	,Floats: ($_=function(vs) { return {_hx_index:18,vs:vs,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Floats",$_.__params__ = ["vs"],$_)
	,Vecs: ($_=function(vs) { return {_hx_index:19,vs:vs,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Vecs",$_.__params__ = ["vs"],$_)
	,Ints: ($_=function(vs) { return {_hx_index:20,vs:vs,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Ints",$_.__params__ = ["vs"],$_)
	,IVecs: ($_=function(vs) { return {_hx_index:21,vs:vs,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="IVecs",$_.__params__ = ["vs"],$_)
	,UInts: ($_=function(vs) { return {_hx_index:22,vs:vs,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="UInts",$_.__params__ = ["vs"],$_)
	,UVecs: ($_=function(vs) { return {_hx_index:23,vs:vs,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="UVecs",$_.__params__ = ["vs"],$_)
	,Bools: ($_=function(vs) { return {_hx_index:24,vs:vs,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Bools",$_.__params__ = ["vs"],$_)
	,BVecs: ($_=function(vs) { return {_hx_index:25,vs:vs,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="BVecs",$_.__params__ = ["vs"],$_)
	,Mats: ($_=function(cols,rows,vs) { return {_hx_index:26,cols:cols,rows:rows,vs:vs,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Mats",$_.__params__ = ["cols","rows","vs"],$_)
	,Samplers: ($_=function(ts) { return {_hx_index:27,ts:ts,__enum__:"pot.graphics.gl.UniformValue",toString:$estr}; },$_._hx_name="Samplers",$_.__params__ = ["ts"],$_)
};
pot_graphics_gl_UniformValue.__constructs__ = [pot_graphics_gl_UniformValue.Float,pot_graphics_gl_UniformValue.Vec2,pot_graphics_gl_UniformValue.Vec3,pot_graphics_gl_UniformValue.Vec4,pot_graphics_gl_UniformValue.Int,pot_graphics_gl_UniformValue.IVec2,pot_graphics_gl_UniformValue.IVec3,pot_graphics_gl_UniformValue.IVec4,pot_graphics_gl_UniformValue.UInt,pot_graphics_gl_UniformValue.UVec2,pot_graphics_gl_UniformValue.UVec3,pot_graphics_gl_UniformValue.UVec4,pot_graphics_gl_UniformValue.Bool,pot_graphics_gl_UniformValue.BVec2,pot_graphics_gl_UniformValue.BVec3,pot_graphics_gl_UniformValue.BVec4,pot_graphics_gl_UniformValue.Mat,pot_graphics_gl_UniformValue.Sampler,pot_graphics_gl_UniformValue.Floats,pot_graphics_gl_UniformValue.Vecs,pot_graphics_gl_UniformValue.Ints,pot_graphics_gl_UniformValue.IVecs,pot_graphics_gl_UniformValue.UInts,pot_graphics_gl_UniformValue.UVecs,pot_graphics_gl_UniformValue.Bools,pot_graphics_gl_UniformValue.BVecs,pot_graphics_gl_UniformValue.Mats,pot_graphics_gl_UniformValue.Samplers];
var pot_graphics_gl_VertexAttribute = function(buffer,location,divisor) {
	if(divisor == null) {
		divisor = 0;
	}
	this.buffer = buffer;
	var _g = buffer.buffer;
	var tmp;
	switch(_g._hx_index) {
	case 0:
		tmp = _g.buffer.gl;
		break;
	case 1:
		tmp = _g.buffer.gl;
		break;
	}
	this.gl = tmp;
	this.location = location;
	this.divisor = divisor;
};
pot_graphics_gl_VertexAttribute.__name__ = true;
pot_graphics_gl_VertexAttribute.prototype = {
	dispose: function() {
		var _g = this.buffer.buffer;
		switch(_g._hx_index) {
		case 0:
			_g.buffer.dispose();
			break;
		case 1:
			_g.buffer.dispose();
			break;
		}
	}
};
var pot_graphics_gl_low_FloatBuffer = function(gl,kind) {
	this.capacity = 0;
	this.length = 0;
	pot_graphics_gl_GLObject.call(this,gl);
	this.kind = kind;
	this.buffer = gl.createBuffer();
};
pot_graphics_gl_low_FloatBuffer.__name__ = true;
pot_graphics_gl_low_FloatBuffer.__super__ = pot_graphics_gl_GLObject;
pot_graphics_gl_low_FloatBuffer.prototype = $extend(pot_graphics_gl_GLObject.prototype,{
	getRawBuffer: function() {
		return this.buffer;
	}
	,upload: function(data,usage) {
		this.length = data.length;
		this.gl.bindBuffer(this.kind,this.buffer);
		this.gl.bufferData(this.kind,data,usage);
		this.gl.bindBuffer(this.kind,null);
		this.capacity = this.length;
	}
	,subUpload: function(offset,data) {
		if(offset + data.length > this.capacity) {
			throw haxe_Exception.thrown("assertion error");
		}
		this.gl.bindBuffer(this.kind,this.buffer);
		this.gl.bufferSubData(this.kind,offset * Float32Array.BYTES_PER_ELEMENT,data,0);
		this.gl.bindBuffer(this.kind,null);
		var a = this.length;
		var b = offset + data.length;
		this.length = a > b ? a : b;
	}
	,download: function(offset,dst) {
		this.gl.bindBuffer(this.kind,this.buffer);
		this.gl.getBufferSubData(this.kind,offset * Float32Array.BYTES_PER_ELEMENT,dst);
		this.gl.bindBuffer(this.kind,null);
	}
	,sync: function() {
		this.gl.bindBuffer(this.kind,this.buffer);
		this.gl.getBufferSubData(this.kind,0,new Float32Array(1));
		this.gl.bindBuffer(this.kind,null);
	}
	,vertexAttribPointer: function(location,size,stride,offset) {
		if(this.kind != 34962) {
			throw haxe_Exception.thrown("assertion error");
		}
		this.gl.bindBuffer(this.kind,this.buffer);
		this.gl.vertexAttribPointer(location,size,5126,false,stride,offset);
		this.gl.bindBuffer(this.kind,null);
	}
	,disposeImpl: function() {
		this.gl.deleteBuffer(this.buffer);
	}
});
var pot_graphics_gl_low_IndexBuffer = function(gl) {
	pot_graphics_gl_GLObject.call(this,gl);
	this.buffer = new pot_graphics_gl_low_IntBuffer(gl,34963);
};
pot_graphics_gl_low_IndexBuffer.__name__ = true;
pot_graphics_gl_low_IndexBuffer.__super__ = pot_graphics_gl_GLObject;
pot_graphics_gl_low_IndexBuffer.prototype = $extend(pot_graphics_gl_GLObject.prototype,{
	disposeImpl: function() {
		this.buffer.dispose();
	}
});
var pot_graphics_gl_low_IntBuffer = function(gl,kind) {
	this.capacity = 0;
	this.length = 0;
	pot_graphics_gl_GLObject.call(this,gl);
	this.kind = kind;
	this.buffer = gl.createBuffer();
};
pot_graphics_gl_low_IntBuffer.__name__ = true;
pot_graphics_gl_low_IntBuffer.__super__ = pot_graphics_gl_GLObject;
pot_graphics_gl_low_IntBuffer.prototype = $extend(pot_graphics_gl_GLObject.prototype,{
	getRawBuffer: function() {
		return this.buffer;
	}
	,upload: function(data,usage) {
		this.length = data.length;
		this.gl.bindBuffer(this.kind,this.buffer);
		this.gl.bufferData(this.kind,data,usage);
		this.gl.bindBuffer(this.kind,null);
		this.capacity = this.length;
	}
	,subUpload: function(offset,data) {
		if(offset + data.length > this.capacity) {
			throw haxe_Exception.thrown("assertion error");
		}
		this.gl.bindBuffer(this.kind,this.buffer);
		this.gl.bufferSubData(this.kind,offset * Int32Array.BYTES_PER_ELEMENT,data,0);
		this.gl.bindBuffer(this.kind,null);
		var a = this.length;
		var b = offset + data.length;
		this.length = a > b ? a : b;
	}
	,download: function(offset,dst) {
		this.gl.bindBuffer(this.kind,this.buffer);
		this.gl.getBufferSubData(this.kind,offset * Int32Array.BYTES_PER_ELEMENT,dst);
		this.gl.bindBuffer(this.kind,null);
	}
	,sync: function() {
		this.gl.bindBuffer(this.kind,this.buffer);
		this.gl.getBufferSubData(this.kind,0,new Int32Array(1));
		this.gl.bindBuffer(this.kind,null);
	}
	,vertexAttribPointer: function(location,size,stride,offset) {
		if(this.kind != 34962) {
			throw haxe_Exception.thrown("assertion error");
		}
		this.gl.bindBuffer(this.kind,this.buffer);
		this.gl.vertexAttribIPointer(location,size,5124,stride,offset);
		this.gl.bindBuffer(this.kind,null);
	}
	,disposeImpl: function() {
		this.gl.deleteBuffer(this.buffer);
	}
});
var pot_graphics_gl_low_Program = function(gl) {
	this.compiled = false;
	pot_graphics_gl_GLObject.call(this,gl);
	this.program = gl.createProgram();
	this.vertexShader = gl.createShader(35633);
	this.fragmentShader = gl.createShader(35632);
};
pot_graphics_gl_low_Program.__name__ = true;
pot_graphics_gl_low_Program.__super__ = pot_graphics_gl_GLObject;
pot_graphics_gl_low_Program.prototype = $extend(pot_graphics_gl_GLObject.prototype,{
	getRawProgram: function() {
		return this.program;
	}
	,compile: function(vertexSource,fragmentSource,transformFeedbackOutput,onCompileErrorVertex,onCompileErrorFragment,onLinkError) {
		this.gl.shaderSource(this.vertexShader,vertexSource);
		this.gl.compileShader(this.vertexShader);
		if(!this.gl.getShaderParameter(this.vertexShader,35713)) {
			onCompileErrorVertex(this.gl.getShaderInfoLog(this.vertexShader));
		}
		this.gl.shaderSource(this.fragmentShader,fragmentSource);
		this.gl.compileShader(this.fragmentShader);
		if(!this.gl.getShaderParameter(this.fragmentShader,35713)) {
			onCompileErrorFragment(this.gl.getShaderInfoLog(this.fragmentShader));
		}
		this.gl.attachShader(this.program,this.vertexShader);
		this.gl.attachShader(this.program,this.fragmentShader);
		if(transformFeedbackOutput != null) {
			this.gl.transformFeedbackVaryings(this.program,transformFeedbackOutput.varyings,transformFeedbackOutput.kind);
		}
		this.gl.linkProgram(this.program);
		if(this.gl.getProgramParameter(this.program,35714)) {
			this.compiled = true;
		} else {
			onLinkError(this.gl.getProgramInfoLog(this.program));
		}
	}
	,use: function() {
		this.gl.useProgram(this.program);
	}
	,getUniformLocation: function(name) {
		return this.gl.getUniformLocation(this.program,name);
	}
	,disposeImpl: function() {
		this.gl.deleteProgram(this.program);
		this.gl.deleteShader(this.vertexShader);
		this.gl.deleteShader(this.fragmentShader);
	}
});
var pot_graphics_gl_low_TransformFeedback = function(gl) {
	this.bindingIndices = [];
	pot_graphics_gl_GLObject.call(this,gl);
	this.tf = gl.createTransformFeedback();
};
pot_graphics_gl_low_TransformFeedback.__name__ = true;
pot_graphics_gl_low_TransformFeedback.__super__ = pot_graphics_gl_GLObject;
pot_graphics_gl_low_TransformFeedback.prototype = $extend(pot_graphics_gl_GLObject.prototype,{
	getRawTransformFeedback: function() {
		return this.tf;
	}
	,bind: function() {
		this.gl.bindTransformFeedback(36386,this.tf);
	}
	,bindBuffers: function(buffers) {
		var _g_current = 0;
		while(_g_current < buffers.length) {
			var _g_value = buffers[_g_current++];
			this.bindBuffer(_g_current - 1,_g_value);
		}
	}
	,bindBuffer: function(index,buffer) {
		if(buffer == null) {
			HxOverrides.remove(this.bindingIndices,index);
			this.gl.bindBufferBase(35982,index,null);
		} else {
			if(this.bindingIndices.indexOf(index) == -1) {
				this.bindingIndices.push(index);
			}
			this.gl.bindBufferBase(35982,index,buffer.getRawBuffer());
		}
	}
	,begin: function() {
		this.gl.enable(35977);
		this.gl.beginTransformFeedback(0);
	}
	,end: function() {
		this.gl.disable(35977);
		this.gl.endTransformFeedback();
	}
	,unbind: function() {
		var _g = 0;
		var _g1 = this.bindingIndices;
		while(_g < _g1.length) this.gl.bindBufferBase(35982,_g1[_g++],null);
		this.bindingIndices.length = 0;
		this.gl.bindTransformFeedback(36386,null);
	}
	,disposeImpl: function() {
		this.gl.deleteTransformFeedback(this.tf);
	}
});
var pot_graphics_gl_low_VertexArrayObject = function(gl,attributes,indexBuffer) {
	this.mode = 4;
	pot_graphics_gl_GLObject.call(this,gl);
	this.attributes = attributes.slice();
	this.indexBuffer = indexBuffer;
	this.obj = gl.createVertexArray();
	gl.bindVertexArray(this.obj);
	var _g = 0;
	while(_g < attributes.length) {
		var attribute = attributes[_g];
		++_g;
		attribute.gl.enableVertexAttribArray(attribute.location);
		attribute.gl.vertexAttribDivisor(attribute.location,attribute.divisor);
		var _g1 = attribute.buffer.buffer;
		switch(_g1._hx_index) {
		case 0:
			_g1.buffer.vertexAttribPointer(attribute.location,attribute.buffer.size,attribute.buffer.stride,attribute.buffer.offset);
			break;
		case 1:
			_g1.buffer.vertexAttribPointer(attribute.location,attribute.buffer.size,attribute.buffer.stride,attribute.buffer.offset);
			break;
		}
	}
	indexBuffer.gl.bindBuffer(34963,indexBuffer.buffer.getRawBuffer());
	gl.bindVertexArray(null);
};
pot_graphics_gl_low_VertexArrayObject.__name__ = true;
pot_graphics_gl_low_VertexArrayObject.__super__ = pot_graphics_gl_GLObject;
pot_graphics_gl_low_VertexArrayObject.prototype = $extend(pot_graphics_gl_GLObject.prototype,{
	getRawObject: function() {
		return this.obj;
	}
	,rebindAttributes: function() {
		this.gl.bindVertexArray(this.obj);
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			attribute.gl.enableVertexAttribArray(attribute.location);
			attribute.gl.vertexAttribDivisor(attribute.location,attribute.divisor);
			var _g2 = attribute.buffer.buffer;
			switch(_g2._hx_index) {
			case 0:
				_g2.buffer.vertexAttribPointer(attribute.location,attribute.buffer.size,attribute.buffer.stride,attribute.buffer.offset);
				break;
			case 1:
				_g2.buffer.vertexAttribPointer(attribute.location,attribute.buffer.size,attribute.buffer.stride,attribute.buffer.offset);
				break;
			}
		}
		this.gl.bindVertexArray(null);
	}
	,draw: function() {
		this.gl.bindVertexArray(this.obj);
		this.gl.drawElements(this.mode,this.indexBuffer.buffer.length,5125,0);
		this.gl.bindVertexArray(null);
	}
	,drawInstanced: function(instanceCount) {
		this.gl.bindVertexArray(this.obj);
		this.gl.drawElementsInstanced(this.mode,this.indexBuffer.buffer.length,5125,0,instanceCount);
		this.gl.bindVertexArray(null);
	}
	,disposeImpl: function() {
		this.gl.deleteVertexArray(this.obj);
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) _g1[_g++].dispose();
		this.indexBuffer.dispose();
	}
});
var pot_graphics_gl_shader_Consts = function() { };
pot_graphics_gl_shader_Consts.__name__ = true;
pot_graphics_gl_shader_Consts.__super__ = hgsl_ShaderModule;
pot_graphics_gl_shader_Consts.prototype = $extend(hgsl_ShaderModule.prototype,{
});
var pot_graphics_gl_shader_DefaultShader = function() { };
pot_graphics_gl_shader_DefaultShader.__name__ = true;
pot_graphics_gl_shader_DefaultShader.__super__ = hgsl_ShaderMain;
pot_graphics_gl_shader_DefaultShader.prototype = $extend(hgsl_ShaderMain.prototype,{
});
var pot_graphics_gl_shader_DefaultShaderTextured = function() { };
pot_graphics_gl_shader_DefaultShaderTextured.__name__ = true;
pot_graphics_gl_shader_DefaultShaderTextured.__super__ = pot_graphics_gl_shader_DefaultShader;
pot_graphics_gl_shader_DefaultShaderTextured.prototype = $extend(pot_graphics_gl_shader_DefaultShader.prototype,{
});
var pot_graphics_gl_shader_Light = function() { };
pot_graphics_gl_shader_Light.__name__ = true;
pot_graphics_gl_shader_Light.__super__ = hgsl_ShaderStruct;
pot_graphics_gl_shader_Light.prototype = $extend(hgsl_ShaderStruct.prototype,{
});
var pot_graphics_gl_shader_Matrix = function() { };
pot_graphics_gl_shader_Matrix.__name__ = true;
pot_graphics_gl_shader_Matrix.__super__ = hgsl_ShaderStruct;
pot_graphics_gl_shader_Matrix.prototype = $extend(hgsl_ShaderStruct.prototype,{
});
var pot_graphics_gl_shader_PhongMaterial = function() { };
pot_graphics_gl_shader_PhongMaterial.__name__ = true;
pot_graphics_gl_shader_PhongMaterial.__super__ = hgsl_ShaderStruct;
pot_graphics_gl_shader_PhongMaterial.prototype = $extend(hgsl_ShaderStruct.prototype,{
});
var pot_input_CodeValue = {};
pot_input_CodeValue.fromString = function(code) {
	if(pot_input_CodeValue.ALL.indexOf(code) == -1) {
		return null;
	}
	return code;
};
var pot_input_Input = function(canvas,pot,target,captureKey,captureWheel) {
	this.pointer = new pot_input_Pointer(this);
	this.mouse = new pot_input_Mouse();
	this.touches = new pot_input__$Touches_TouchesData();
	this.keyboard = captureKey ? new pot_input__$Keyboard_KeyboardData() : null;
	this.scalingMode = 0;
	this.addEvents(canvas,target,pot,captureWheel);
};
pot_input_Input.__name__ = true;
pot_input_Input.prototype = {
	addEvents: function(canvas,target,pot,captureWheel) {
		this.mouse.addEvents(canvas,target,this,pot,captureWheel);
		var this1 = this.touches;
		var canvas1 = canvas;
		var elem = target;
		var input = this;
		var pot1 = pot;
		elem.addEventListener("touchstart",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			var touches = e.changedTouches;
			var _g = 0;
			var _g1 = touches.length;
			while(_g < _g1) {
				var rawTouch = touches[_g++];
				var rawId = rawTouch.identifier;
				var touch = this1.getByRawId(rawId,true);
				var x = rawTouch.clientX - elem.getBoundingClientRect().left;
				var x1;
				switch(input.scalingMode) {
				case 0:
					x1 = canvas1.width / pot1.pixelRatio / canvas1.clientWidth;
					break;
				case 1:
					x1 = canvas1.width / canvas1.clientWidth;
					break;
				}
				var x2 = x * x1;
				var y = rawTouch.clientY - elem.getBoundingClientRect().top;
				var y1;
				switch(input.scalingMode) {
				case 0:
					y1 = canvas1.height / pot1.pixelRatio / canvas1.clientHeight;
					break;
				case 1:
					y1 = canvas1.height / canvas1.clientHeight;
					break;
				}
				touch.nx = x2;
				touch.ny = y * y1;
				touch.ntouching = true;
				touch.ntouching2 = true;
			}
		},{ passive : false});
		elem.addEventListener("touchmove",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			var touches = e.changedTouches;
			var _g = 0;
			var _g1 = touches.length;
			while(_g < _g1) {
				var rawTouch = touches[_g++];
				var rawId = rawTouch.identifier;
				var touch = this1.getByRawId(rawId);
				if(touch != null) {
					var x = rawTouch.clientX - elem.getBoundingClientRect().left;
					var x1;
					switch(input.scalingMode) {
					case 0:
						x1 = canvas1.width / pot1.pixelRatio / canvas1.clientWidth;
						break;
					case 1:
						x1 = canvas1.width / canvas1.clientWidth;
						break;
					}
					var x2 = x * x1;
					var y = rawTouch.clientY - elem.getBoundingClientRect().top;
					var y1;
					switch(input.scalingMode) {
					case 0:
						y1 = canvas1.height / pot1.pixelRatio / canvas1.clientHeight;
						break;
					case 1:
						y1 = canvas1.height / canvas1.clientHeight;
						break;
					}
					touch.nx = x2;
					touch.ny = y * y1;
				}
			}
		},{ passive : false});
		var end = function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			var touches = e.changedTouches;
			var _g = 0;
			var _g1 = touches.length;
			while(_g < _g1) {
				var rawTouch = touches[_g++];
				var rawId = rawTouch.identifier;
				var touch = this1.getByRawId(rawId);
				if(touch != null) {
					var x = rawTouch.clientX - elem.getBoundingClientRect().left;
					var x1;
					switch(input.scalingMode) {
					case 0:
						x1 = canvas1.width / pot1.pixelRatio / canvas1.clientWidth;
						break;
					case 1:
						x1 = canvas1.width / canvas1.clientWidth;
						break;
					}
					var x2 = x * x1;
					var y = rawTouch.clientY - elem.getBoundingClientRect().top;
					var y1;
					switch(input.scalingMode) {
					case 0:
						y1 = canvas1.height / pot1.pixelRatio / canvas1.clientHeight;
						break;
					case 1:
						y1 = canvas1.height / canvas1.clientHeight;
						break;
					}
					touch.nx = x2;
					touch.ny = y * y1;
					touch.ntouching = false;
				}
			}
		};
		elem.addEventListener("touchend",end);
		elem.addEventListener("touchcancel",end);
		if(this.keyboard != null) {
			var this2 = this.keyboard;
			var elem1 = window.document.documentElement;
			elem1.addEventListener("keydown",function(e) {
				var code = pot_input_CodeValue.fromString(e.code);
				if(code == null) {
					return;
				}
				if(pot_input_CodeValue.FUNCTIONS.indexOf(code) == -1 && e.cancelable) {
					e.preventDefault();
				}
				if(!Object.prototype.hasOwnProperty.call(this2.keys.h,code)) {
					this2.keys.h[code] = new pot_input_Key();
				}
				this2.keys.h[code].press();
				this2.ndowns.add(e.key);
			});
			elem1.addEventListener("keyup",function(e) {
				var code = pot_input_CodeValue.fromString(e.code);
				if(code == null) {
					return;
				}
				if(pot_input_CodeValue.FUNCTIONS.indexOf(code) == -1 && e.cancelable) {
					e.preventDefault();
				}
				if(!Object.prototype.hasOwnProperty.call(this2.keys.h,code)) {
					this2.keys.h[code] = new pot_input_Key();
				}
				this2.keys.h[code].release();
				this2.nups.add(e.key);
			});
			window.addEventListener("blur",function(e) {
				var h = this2.keys.h;
				var key_keys = Object.keys(h);
				var key_length = key_keys.length;
				var key_current = 0;
				while(key_current < key_length) h[key_keys[key_current++]].release();
			});
		}
	}
	,update: function(substepRatio) {
		this.mouse.update(substepRatio);
		var this1 = this.touches;
		var i = 0;
		while(i < this1.touches.length) {
			var touch = this1.touches[i];
			touch.update(substepRatio);
			if(!touch.ptouching && !touch.touching && !touch.ntouching) {
				HxOverrides.remove(this1.touches,touch);
			} else {
				++i;
			}
		}
		if(this.keyboard != null) {
			var this1 = this.keyboard;
			var h = this1.keys.h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) h[key_keys[key_current++]].update();
			this1.downs.clear();
			this1.ups.clear();
			var jsIterator = this1.ndowns.values();
			var _g_lastStep = jsIterator.next();
			while(!_g_lastStep.done) {
				var v = _g_lastStep.value;
				_g_lastStep = jsIterator.next();
				this1.downs.add(v);
			}
			var jsIterator = this1.ups.values();
			var _g_lastStep = jsIterator.next();
			while(!_g_lastStep.done) {
				var v = _g_lastStep.value;
				_g_lastStep = jsIterator.next();
				this1.ups.add(v);
			}
			this1.ndowns.clear();
			this1.nups.clear();
		}
		if(this.touches.touches.length > 0) {
			this.mouse.hasInput = false;
		}
		this.pointer.update();
	}
};
var pot_input_InputTarget = $hxEnums["pot.input.InputTarget"] = { __ename__:true,__constructs__:null
	,Canvas: {_hx_name:"Canvas",_hx_index:0,__enum__:"pot.input.InputTarget",toString:$estr}
	,Document: {_hx_name:"Document",_hx_index:1,__enum__:"pot.input.InputTarget",toString:$estr}
	,None: {_hx_name:"None",_hx_index:2,__enum__:"pot.input.InputTarget",toString:$estr}
};
pot_input_InputTarget.__constructs__ = [pot_input_InputTarget.Canvas,pot_input_InputTarget.Document,pot_input_InputTarget.None];
var pot_input_InputTools = function() { };
pot_input_InputTools.__name__ = true;
pot_input_InputTools.clientX = function(e) {
	return e.getBoundingClientRect().left;
};
pot_input_InputTools.clientY = function(e) {
	return e.getBoundingClientRect().top;
};
pot_input_InputTools.scaleX = function(canvas,mode,pixelRatio) {
	switch(mode) {
	case 0:
		return canvas.width / pixelRatio / canvas.clientWidth;
	case 1:
		return canvas.width / canvas.clientWidth;
	}
};
pot_input_InputTools.scaleY = function(canvas,mode,pixelRatio) {
	switch(mode) {
	case 0:
		return canvas.height / pixelRatio / canvas.clientHeight;
	case 1:
		return canvas.height / canvas.clientHeight;
	}
};
var pot_input_Key = function() {
	this.down = false;
	this.pdown = false;
	this.ndown = false;
	this.ndown2 = false;
	this.ddown = 0;
};
pot_input_Key.__name__ = true;
pot_input_Key.prototype = {
	press: function() {
		this.ndown = true;
		this.ndown2 = true;
	}
	,release: function() {
		this.ndown = false;
	}
	,update: function() {
		this.pdown = this.down;
		this.down = this.ndown || this.ndown2;
		this.ndown2 = false;
		this.ddown = (this.down ? 1 : 0) - (this.pdown ? 1 : 0);
	}
};
var pot_input_Keyboard = {};
pot_input_Keyboard._new = function() {
	return new pot_input__$Keyboard_KeyboardData();
};
pot_input_Keyboard.get = function(this1,code) {
	if(!Object.prototype.hasOwnProperty.call(this1.keys.h,code)) {
		this1.keys.h[code] = new pot_input_Key();
	}
	return this1.keys.h[code];
};
pot_input_Keyboard.getNum = function(this1,index) {
	var code = pot_input_CodeValue.DIGITS[index];
	if(!Object.prototype.hasOwnProperty.call(this1.keys.h,code)) {
		this1.keys.h[code] = new pot_input_Key();
	}
	return this1.keys.h[code];
};
pot_input_Keyboard.addEvents = function(this1,canvas,elem) {
	elem.addEventListener("keydown",function(e) {
		var code = pot_input_CodeValue.fromString(e.code);
		if(code == null) {
			return;
		}
		if(pot_input_CodeValue.FUNCTIONS.indexOf(code) == -1 && e.cancelable) {
			e.preventDefault();
		}
		if(!Object.prototype.hasOwnProperty.call(this1.keys.h,code)) {
			this1.keys.h[code] = new pot_input_Key();
		}
		this1.keys.h[code].press();
		this1.ndowns.add(e.key);
	});
	elem.addEventListener("keyup",function(e) {
		var code = pot_input_CodeValue.fromString(e.code);
		if(code == null) {
			return;
		}
		if(pot_input_CodeValue.FUNCTIONS.indexOf(code) == -1 && e.cancelable) {
			e.preventDefault();
		}
		if(!Object.prototype.hasOwnProperty.call(this1.keys.h,code)) {
			this1.keys.h[code] = new pot_input_Key();
		}
		this1.keys.h[code].release();
		this1.nups.add(e.key);
	});
	window.addEventListener("blur",function(e) {
		var h = this1.keys.h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) h[key_keys[key_current++]].release();
	});
};
pot_input_Keyboard.update = function(this1) {
	var h = this1.keys.h;
	var key_keys = Object.keys(h);
	var key_length = key_keys.length;
	var key_current = 0;
	while(key_current < key_length) h[key_keys[key_current++]].update();
	this1.downs.clear();
	this1.ups.clear();
	var jsIterator = this1.ndowns.values();
	var _g_lastStep = jsIterator.next();
	while(!_g_lastStep.done) {
		var v = _g_lastStep.value;
		_g_lastStep = jsIterator.next();
		this1.downs.add(v);
	}
	var jsIterator = this1.ups.values();
	var _g_lastStep = jsIterator.next();
	while(!_g_lastStep.done) {
		var v = _g_lastStep.value;
		_g_lastStep = jsIterator.next();
		this1.ups.add(v);
	}
	this1.ndowns.clear();
	this1.nups.clear();
};
pot_input_Keyboard.isControlDown = function(this1) {
	var code = "ControlLeft";
	if(!Object.prototype.hasOwnProperty.call(this1.keys.h,code)) {
		this1.keys.h[code] = new pot_input_Key();
	}
	if(!this1.keys.h[code].down) {
		var code = "ControlRight";
		if(!Object.prototype.hasOwnProperty.call(this1.keys.h,code)) {
			this1.keys.h[code] = new pot_input_Key();
		}
		return this1.keys.h[code].down;
	} else {
		return true;
	}
};
pot_input_Keyboard.isShiftDown = function(this1) {
	var code = "ShiftLeft";
	if(!Object.prototype.hasOwnProperty.call(this1.keys.h,code)) {
		this1.keys.h[code] = new pot_input_Key();
	}
	if(!this1.keys.h[code].down) {
		var code = "ShiftRight";
		if(!Object.prototype.hasOwnProperty.call(this1.keys.h,code)) {
			this1.keys.h[code] = new pot_input_Key();
		}
		return this1.keys.h[code].down;
	} else {
		return true;
	}
};
pot_input_Keyboard.isAltDown = function(this1) {
	var code = "AltLeft";
	if(!Object.prototype.hasOwnProperty.call(this1.keys.h,code)) {
		this1.keys.h[code] = new pot_input_Key();
	}
	if(!this1.keys.h[code].down) {
		var code = "AltRight";
		if(!Object.prototype.hasOwnProperty.call(this1.keys.h,code)) {
			this1.keys.h[code] = new pot_input_Key();
		}
		return this1.keys.h[code].down;
	} else {
		return true;
	}
};
pot_input_Keyboard.isKeyDown = function(this1,key) {
	return this1.downs.has(key);
};
pot_input_Keyboard.isKeyUp = function(this1,key) {
	return this1.ups.has(key);
};
pot_input_Keyboard.forEachDownKey = function(this1,f) {
	var jsIterator = this1.downs.values();
	var _g_lastStep = jsIterator.next();
	while(!_g_lastStep.done) {
		var v = _g_lastStep.value;
		_g_lastStep = jsIterator.next();
		f(v);
	}
};
pot_input_Keyboard.forEachUpKey = function(this1,f) {
	var jsIterator = this1.ups.values();
	var _g_lastStep = jsIterator.next();
	while(!_g_lastStep.done) {
		var v = _g_lastStep.value;
		_g_lastStep = jsIterator.next();
		f(v);
	}
};
pot_input_Keyboard.forEachCode = function(this1,f) {
	var _g = new haxe_ds__$StringMap_StringMapKeyValueIterator(this1.keys.h);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		f(_g1.key,_g1.value);
	}
};
var pot_input__$Keyboard_KeyboardData = function() {
	this.nups = new Set();
	this.ndowns = new Set();
	this.ups = new Set();
	this.downs = new Set();
	this.keys = new haxe_ds_StringMap();
};
pot_input__$Keyboard_KeyboardData.__name__ = true;
var pot_input_Mouse = function() {
	this.delta = new muun_la__$Vec2_Vec2Data(0,0);
	this.pos = new muun_la__$Vec2_Vec2Data(0,0);
	this.ppos = new muun_la__$Vec2_Vec2Data(0,0);
	this.px = 0;
	this.py = 0;
	this.px2 = 0;
	this.py2 = 0;
	this.x = 0;
	this.y = 0;
	this.nx = 0;
	this.ny = 0;
	this.dx = 0;
	this.dy = 0;
	this.wheelX = 0;
	this.wheelY = 0;
	this.nwheelX = 0;
	this.nwheelY = 0;
	this.pleft = false;
	this.pmiddle = false;
	this.pright = false;
	this.left = false;
	this.middle = false;
	this.right = false;
	this.nleft = false;
	this.nmiddle = false;
	this.nright = false;
	this.nleft2 = false;
	this.nmiddle2 = false;
	this.nright2 = false;
	this.dleft = 0;
	this.dmiddle = 0;
	this.dright = 0;
	this.hasInput = false;
	this.onContent = false;
};
pot_input_Mouse.__name__ = true;
pot_input_Mouse.prototype = {
	addEvents: function(canvas,target,input,pot,captureWheel) {
		var _gthis = this;
		target.addEventListener("mouseenter",function(e) {
			return _gthis.onContent = true;
		});
		target.addEventListener("mouseleave",function(e) {
			return _gthis.onContent = false;
		});
		target.addEventListener("mousedown",function(e) {
			_gthis.hasInput = true;
			_gthis.onContent = true;
			if(e.cancelable) {
				e.preventDefault();
			}
			switch(e.button) {
			case 0:
				_gthis.nleft = true;
				_gthis.nleft2 = true;
				break;
			case 1:
				_gthis.nmiddle = true;
				_gthis.nmiddle2 = true;
				break;
			case 2:
				_gthis.nright = true;
				_gthis.nright2 = true;
				break;
			}
			var tmp = e.clientX - canvas.getBoundingClientRect().left;
			var tmp1;
			switch(input.scalingMode) {
			case 0:
				tmp1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
				break;
			case 1:
				tmp1 = canvas.width / canvas.clientWidth;
				break;
			}
			_gthis.nx = tmp * tmp1;
			var tmp = e.clientY - canvas.getBoundingClientRect().top;
			var tmp1;
			switch(input.scalingMode) {
			case 0:
				tmp1 = canvas.height / pot.pixelRatio / canvas.clientHeight;
				break;
			case 1:
				tmp1 = canvas.height / canvas.clientHeight;
				break;
			}
			return _gthis.ny = tmp * tmp1;
		});
		target.addEventListener("mouseup",function(e) {
			_gthis.hasInput = true;
			_gthis.onContent = true;
			if(e.cancelable) {
				e.preventDefault();
			}
			switch(e.button) {
			case 0:
				_gthis.nleft = false;
				break;
			case 1:
				_gthis.nmiddle = false;
				break;
			case 2:
				_gthis.nright = false;
				break;
			}
			var tmp = e.clientX - canvas.getBoundingClientRect().left;
			var tmp1;
			switch(input.scalingMode) {
			case 0:
				tmp1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
				break;
			case 1:
				tmp1 = canvas.width / canvas.clientWidth;
				break;
			}
			_gthis.nx = tmp * tmp1;
			var tmp = e.clientY - canvas.getBoundingClientRect().top;
			var tmp1;
			switch(input.scalingMode) {
			case 0:
				tmp1 = canvas.height / pot.pixelRatio / canvas.clientHeight;
				break;
			case 1:
				tmp1 = canvas.height / canvas.clientHeight;
				break;
			}
			return _gthis.ny = tmp * tmp1;
		});
		target.addEventListener("mousemove",function(e) {
			_gthis.hasInput = true;
			_gthis.onContent = true;
			var tmp = e.clientX - canvas.getBoundingClientRect().left;
			var tmp1;
			switch(input.scalingMode) {
			case 0:
				tmp1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
				break;
			case 1:
				tmp1 = canvas.width / canvas.clientWidth;
				break;
			}
			_gthis.nx = tmp * tmp1;
			var tmp = e.clientY - canvas.getBoundingClientRect().top;
			var tmp1;
			switch(input.scalingMode) {
			case 0:
				tmp1 = canvas.height / pot.pixelRatio / canvas.clientHeight;
				break;
			case 1:
				tmp1 = canvas.height / canvas.clientHeight;
				break;
			}
			return _gthis.ny = tmp * tmp1;
		});
		if(captureWheel) {
			target.addEventListener("wheel",function(e) {
				var scale;
				switch(e.deltaMode) {
				case 0:
					scale = 1;
					break;
				case 1:
					scale = 24;
					break;
				case 2:
					scale = 720;
					break;
				default:
					throw haxe_Exception.thrown("invalid wheel delta mode");
				}
				_gthis.nwheelX += e.deltaX * scale;
				_gthis.nwheelY += e.deltaY * scale;
				e.preventDefault();
			},{ passive : false});
		}
		target.addEventListener("contextmenu",function(e) {
			_gthis.hasInput = true;
			_gthis.onContent = true;
			e.preventDefault();
		});
		target.addEventListener("pointerdown",function(e) {
			target.setPointerCapture(e.pointerId);
		});
		target.addEventListener("pointerup",function(e) {
			target.releasePointerCapture(e.pointerId);
		});
		window.addEventListener("blur",function(e) {
			_gthis.nleft = false;
			_gthis.nmiddle = false;
			return _gthis.nright = false;
		});
	}
	,update: function(substepRatio) {
		this.px = this.x;
		this.py = this.y;
		this.x = this.px2 + substepRatio * (this.nx - this.px2);
		this.y = this.py2 + substepRatio * (this.ny - this.py2);
		this.dx = this.x - this.px;
		this.dy = this.y - this.py;
		var this1 = this.ppos;
		this1.x = this.px;
		this1.y = this.py;
		var this1 = this.pos;
		this1.x = this.x;
		this1.y = this.y;
		var this1 = this.delta;
		this1.x = this.dx;
		this1.y = this.dy;
		this.pleft = this.left;
		this.pmiddle = this.middle;
		this.pright = this.right;
		this.left = this.nleft || this.nleft2;
		this.middle = this.nmiddle || this.nmiddle2;
		this.right = this.nright || this.nright2;
		this.nleft2 = false;
		this.nmiddle2 = false;
		this.nright2 = false;
		this.dleft = (this.left ? 1 : 0) - (this.pleft ? 1 : 0);
		this.dmiddle = (this.middle ? 1 : 0) - (this.pmiddle ? 1 : 0);
		this.dright = (this.right ? 1 : 0) - (this.pright ? 1 : 0);
		this.wheelX = this.nwheelX;
		this.wheelY = this.nwheelY;
		this.nwheelX = 0;
		this.nwheelY = 0;
		if(substepRatio == 1) {
			this.px2 = this.x;
			this.py2 = this.y;
		}
	}
};
var pot_input_Pointer = function(input) {
	this.touchId = -1;
	this.ddown = 0;
	this.pdown = false;
	this.down = false;
	this.dy = 0;
	this.dx = 0;
	this.y = 0;
	this.x = 0;
	this.py = 0;
	this.px = 0;
	this.hasInput = false;
	this.delta = new muun_la__$Vec2_Vec2Data(0,0);
	this.ppos = new muun_la__$Vec2_Vec2Data(0,0);
	this.pos = new muun_la__$Vec2_Vec2Data(0,0);
	this.input = input;
};
pot_input_Pointer.__name__ = true;
pot_input_Pointer.prototype = {
	update: function() {
		if(this.input.mouse.hasInput) {
			this.touchId = -1;
			var mouse = this.input.mouse;
			this.px = mouse.px;
			this.py = mouse.py;
			this.x = mouse.x;
			this.y = mouse.y;
			this.dx = mouse.dx;
			this.dy = mouse.dy;
			this.down = mouse.left;
			this.pdown = mouse.pleft;
			this.ddown = mouse.dleft;
			this.hasInput = true;
		} else {
			this.touchId = -1;
			this.down = false;
			this.pdown = false;
			this.ddown = 0;
			this.hasInput = false;
			var _g = 0;
			var _g1 = this.input.touches;
			while(_g < _g1.touches.length) {
				var touch = _g1.touches[_g];
				++_g;
				if(this.touchId == -1 || touch.id == this.touchId) {
					this.touchId = touch.id;
					this.px = touch.px;
					this.py = touch.py;
					this.x = touch.x;
					this.y = touch.y;
					this.dx = touch.dx;
					this.dy = touch.dy;
					this.down = touch.touching;
					this.pdown = touch.ptouching;
					this.ddown = touch.dtouching;
					this.hasInput = true;
				}
			}
		}
		var this1 = this.ppos;
		this1.x = this.px;
		this1.y = this.py;
		var this1 = this.pos;
		this1.x = this.x;
		this1.y = this.y;
		var this1 = this.delta;
		this1.x = this.dx;
		this1.y = this.dy;
	}
};
var pot_input_Touch = function(id,rawId) {
	this.ntouching2 = false;
	this.ntouching = false;
	this.ny = 0;
	this.nx = 0;
	this.py2 = 0;
	this.px2 = 0;
	this.dtouching = 0;
	this.ptouching = false;
	this.touching = false;
	this.dy = 0;
	this.dx = 0;
	this.y = 0;
	this.x = 0;
	this.py = 0;
	this.px = 0;
	this.delta = new muun_la__$Vec2_Vec2Data(0,0);
	this.pos = new muun_la__$Vec2_Vec2Data(0,0);
	this.ppos = new muun_la__$Vec2_Vec2Data(0,0);
	this.id = id;
	this.rawId = rawId;
};
pot_input_Touch.__name__ = true;
pot_input_Touch.prototype = {
	begin: function(x,y) {
		this.nx = x;
		this.ny = y;
		this.ntouching = true;
		this.ntouching2 = true;
	}
	,move: function(x,y) {
		this.nx = x;
		this.ny = y;
	}
	,end: function(x,y) {
		this.nx = x;
		this.ny = y;
		this.ntouching = false;
	}
	,update: function(substepRatio) {
		if(this.ntouching2) {
			this.px = this.nx;
			this.py = this.ny;
			this.px2 = this.nx;
			this.py2 = this.ny;
		} else {
			this.px = this.x;
			this.py = this.y;
		}
		this.x = this.px2 + substepRatio * (this.nx - this.px2);
		this.y = this.py2 + substepRatio * (this.ny - this.py2);
		this.dx = this.x - this.px;
		this.dy = this.y - this.py;
		var this1 = this.ppos;
		this1.x = this.px;
		this1.y = this.py;
		var this1 = this.pos;
		this1.x = this.x;
		this1.y = this.y;
		var this1 = this.delta;
		this1.x = this.dx;
		this1.y = this.dy;
		this.ptouching = this.touching;
		this.touching = this.ntouching || this.ntouching2;
		this.ntouching2 = false;
		this.dtouching = (this.touching ? 1 : 0) - (this.ptouching ? 1 : 0);
		if(substepRatio == 1) {
			this.px2 = this.x;
			this.py2 = this.y;
		}
	}
};
var pot_input_Touches = {};
pot_input_Touches._new = function() {
	return new pot_input__$Touches_TouchesData();
};
pot_input_Touches.get_length = function(this1) {
	return this1.touches.length;
};
pot_input_Touches.get = function(this1,index) {
	return this1.touches[index];
};
pot_input_Touches.addEvents = function(this1,canvas,elem,input,pot) {
	elem.addEventListener("touchstart",function(e) {
		if(e.cancelable) {
			e.preventDefault();
		}
		var touches = e.changedTouches;
		var _g = 0;
		var _g1 = touches.length;
		while(_g < _g1) {
			var rawTouch = touches[_g++];
			var rawId = rawTouch.identifier;
			var touch = this1.getByRawId(rawId,true);
			var x = rawTouch.clientX - elem.getBoundingClientRect().left;
			var x1;
			switch(input.scalingMode) {
			case 0:
				x1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
				break;
			case 1:
				x1 = canvas.width / canvas.clientWidth;
				break;
			}
			var x2 = x * x1;
			var y = rawTouch.clientY - elem.getBoundingClientRect().top;
			var y1;
			switch(input.scalingMode) {
			case 0:
				y1 = canvas.height / pot.pixelRatio / canvas.clientHeight;
				break;
			case 1:
				y1 = canvas.height / canvas.clientHeight;
				break;
			}
			touch.nx = x2;
			touch.ny = y * y1;
			touch.ntouching = true;
			touch.ntouching2 = true;
		}
	},{ passive : false});
	elem.addEventListener("touchmove",function(e) {
		if(e.cancelable) {
			e.preventDefault();
		}
		var touches = e.changedTouches;
		var _g = 0;
		var _g1 = touches.length;
		while(_g < _g1) {
			var rawTouch = touches[_g++];
			var rawId = rawTouch.identifier;
			var touch = this1.getByRawId(rawId);
			if(touch != null) {
				var x = rawTouch.clientX - elem.getBoundingClientRect().left;
				var x1;
				switch(input.scalingMode) {
				case 0:
					x1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
					break;
				case 1:
					x1 = canvas.width / canvas.clientWidth;
					break;
				}
				var x2 = x * x1;
				var y = rawTouch.clientY - elem.getBoundingClientRect().top;
				var y1;
				switch(input.scalingMode) {
				case 0:
					y1 = canvas.height / pot.pixelRatio / canvas.clientHeight;
					break;
				case 1:
					y1 = canvas.height / canvas.clientHeight;
					break;
				}
				touch.nx = x2;
				touch.ny = y * y1;
			}
		}
	},{ passive : false});
	var end = function(e) {
		if(e.cancelable) {
			e.preventDefault();
		}
		var touches = e.changedTouches;
		var _g = 0;
		var _g1 = touches.length;
		while(_g < _g1) {
			var rawTouch = touches[_g++];
			var rawId = rawTouch.identifier;
			var touch = this1.getByRawId(rawId);
			if(touch != null) {
				var x = rawTouch.clientX - elem.getBoundingClientRect().left;
				var x1;
				switch(input.scalingMode) {
				case 0:
					x1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
					break;
				case 1:
					x1 = canvas.width / canvas.clientWidth;
					break;
				}
				var x2 = x * x1;
				var y = rawTouch.clientY - elem.getBoundingClientRect().top;
				var y1;
				switch(input.scalingMode) {
				case 0:
					y1 = canvas.height / pot.pixelRatio / canvas.clientHeight;
					break;
				case 1:
					y1 = canvas.height / canvas.clientHeight;
					break;
				}
				touch.nx = x2;
				touch.ny = y * y1;
				touch.ntouching = false;
			}
		}
	};
	elem.addEventListener("touchend",end);
	elem.addEventListener("touchcancel",end);
};
pot_input_Touches.update = function(this1,substepRatio) {
	var i = 0;
	while(i < this1.touches.length) {
		var touch = this1.touches[i];
		touch.update(substepRatio);
		if(!touch.ptouching && !touch.touching && !touch.ntouching) {
			HxOverrides.remove(this1.touches,touch);
		} else {
			++i;
		}
	}
};
var pot_input__$Touches_TouchesData = function() {
	this.touches = [];
};
pot_input__$Touches_TouchesData.__name__ = true;
pot_input__$Touches_TouchesData.prototype = {
	getByRawId: function(rawId,create) {
		if(create == null) {
			create = false;
		}
		var _g = 0;
		var _g1 = this.touches;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.rawId == rawId) {
				return t;
			}
		}
		if(create) {
			return this.newTouch(rawId);
		} else {
			return null;
		}
	}
	,newTouch: function(rawId) {
		var minId = 0;
		while(true) {
			var tmp = minId;
			var _g = 0;
			var _g1 = this.touches;
			while(_g < _g1.length) if(_g1[_g++].id == minId) {
				++minId;
			}
			if(tmp == minId) {
				break;
			}
		}
		var touch = new pot_input_Touch(minId,rawId);
		this.touches.push(touch);
		return touch;
	}
};
var pot_util_ImageLoader = function() { };
pot_util_ImageLoader.__name__ = true;
pot_util_ImageLoader.loadImages = function(sources,onFinished,onError) {
	var num = sources.length;
	var left = sources.length;
	var _g = [];
	var _g1 = 0;
	while(_g1 < num) {
		++_g1;
		_g.push(null);
	}
	var bitmaps = _g;
	var _g = 0;
	while(_g < num) {
		var i = [_g++];
		var bitmap = [new pot_graphics_bitmap_Bitmap(0,0)];
		var g = [bitmap[0].g];
		var image = [new Image()];
		image[0].src = sources[i[0]];
		image[0].onload = (function(image,g,bitmap,i) {
			return function() {
				var w = image[0].width;
				var h = image[0].height;
				bitmap[0].setSize(w,h);
				g[0].c2d.drawImage(pot_graphics_bitmap_BitmapSource.fromImageElement(image[0]).source,0,0,w,h,0,0,w,h);
				bitmaps[i[0]] = bitmap[0];
				if((left -= 1) == 0) {
					onFinished(bitmaps);
				}
			};
		})(image,g,bitmap,i);
		image[0].onerror = (function(i) {
			return function() {
				if(onError != null) {
					onError(sources[i[0]]);
				}
				if((left -= 1) == 0) {
					onFinished(bitmaps);
				}
			};
		})(i);
	}
};
var test_PotTest = function(canvas,inputTarget,captureKey,captureWheel) {
	this.x = 0;
	pot_core_App.call(this,canvas,inputTarget,captureKey,captureWheel);
};
test_PotTest.__name__ = true;
test_PotTest.main = function() {
	new test_PotTest(window.document.getElementById("canvas"));
};
test_PotTest.__super__ = pot_core_App;
test_PotTest.prototype = $extend(pot_core_App.prototype,{
	setup: function() {
		var _gthis = this;
		this.pot.frameRate(pot_core_FrameRate.Fixed(10));
		var bg = new pot_graphics_bitmap_Bitmap(400,300).g;
		bg.clear(0,0,1);
		bg.c2d.strokeStyle = "rgba(" + (255.5 | 0) + ", " + (0.5 | 0) + ", " + (0.5 | 0) + ", " + 1.0 + ")";
		bg.c2d.lineWidth = 10;
		bg.c2d.beginPath();
		bg.c2d.moveTo(10,10);
		bg.c2d.lineTo(200,100);
		bg.c2d.stroke();
		this.g = new pot_graphics_gl_Graphics(this.canvas);
		this.g.init3D();
		pot_util_ImageLoader.loadImages(["tex.png"],function(a) {
			_gthis.tex = _gthis.g.loadBitmap(pot_graphics_bitmap_BitmapSource.fromBitmap(a[0]));
			_gthis.pot.start();
		});
	}
	,update: function() {
		this.x = (this.x + 4) % this.pot.width;
	}
	,draw: function() {
		var lp1_x = 2;
		var lp1_y = 0;
		var lp1_z = 0;
		var lp2_x = 2;
		var lp2_y = 0;
		var lp2_z = 0;
		var lp3_x = 2;
		var lp3_y = 0;
		var lp3_z = 0;
		var angle = this.frameCount * 0.01;
		var axis_x = 1;
		var axis_y = 0;
		var axis_z = 0;
		var s = Math.sin(angle);
		var c = Math.cos(angle);
		var c1 = 1 - c;
		var x = (axis_x * axis_x * c1 + c) * lp1_x + (axis_x * axis_y * c1 - axis_z * s) * lp1_y + (axis_x * axis_z * c1 + axis_y * s) * lp1_z;
		var y = (axis_y * axis_x * c1 + axis_z * s) * lp1_x + (axis_y * axis_y * c1 + c) * lp1_y + (axis_y * axis_z * c1 - axis_x * s) * lp1_z;
		var z = (axis_z * axis_x * c1 - axis_y * s) * lp1_x + (axis_z * axis_y * c1 + axis_x * s) * lp1_y + (axis_z * axis_z * c1 + c) * lp1_z;
		var angle = this.frameCount * 0.015;
		var axis_x = 0;
		var axis_y = 1;
		var axis_z = 0;
		var s = Math.sin(angle);
		var c = Math.cos(angle);
		var c1 = 1 - c;
		var x1 = (axis_x * axis_x * c1 + c) * x + (axis_x * axis_y * c1 - axis_z * s) * y + (axis_x * axis_z * c1 + axis_y * s) * z;
		var y1 = (axis_y * axis_x * c1 + axis_z * s) * x + (axis_y * axis_y * c1 + c) * y + (axis_y * axis_z * c1 - axis_x * s) * z;
		var z1 = (axis_z * axis_x * c1 - axis_y * s) * x + (axis_z * axis_y * c1 + axis_x * s) * y + (axis_z * axis_z * c1 + c) * z;
		var angle = this.frameCount * 0.013;
		var axis_x = 0;
		var axis_y = 0;
		var axis_z = 1;
		var s = Math.sin(angle);
		var c = Math.cos(angle);
		var c1 = 1 - c;
		var x = (axis_x * axis_x * c1 + c) * x1 + (axis_x * axis_y * c1 - axis_z * s) * y1 + (axis_x * axis_z * c1 + axis_y * s) * z1;
		var y = (axis_y * axis_x * c1 + axis_z * s) * x1 + (axis_y * axis_y * c1 + c) * y1 + (axis_y * axis_z * c1 - axis_x * s) * z1;
		var angle = this.frameCount * -0.01;
		var axis_x1 = 1;
		var axis_y1 = 0;
		var axis_z1 = 0;
		var s1 = Math.sin(angle);
		var c2 = Math.cos(angle);
		var c11 = 1 - c2;
		var x2 = (axis_x1 * axis_x1 * c11 + c2) * lp2_x + (axis_x1 * axis_y1 * c11 - axis_z1 * s1) * lp2_y + (axis_x1 * axis_z1 * c11 + axis_y1 * s1) * lp2_z;
		var y2 = (axis_y1 * axis_x1 * c11 + axis_z1 * s1) * lp2_x + (axis_y1 * axis_y1 * c11 + c2) * lp2_y + (axis_y1 * axis_z1 * c11 - axis_x1 * s1) * lp2_z;
		var z = (axis_z1 * axis_x1 * c11 - axis_y1 * s1) * lp2_x + (axis_z1 * axis_y1 * c11 + axis_x1 * s1) * lp2_y + (axis_z1 * axis_z1 * c11 + c2) * lp2_z;
		var angle = this.frameCount * -0.008;
		var axis_x1 = 0;
		var axis_y1 = 1;
		var axis_z1 = 0;
		var s1 = Math.sin(angle);
		var c2 = Math.cos(angle);
		var c11 = 1 - c2;
		var x3 = (axis_x1 * axis_x1 * c11 + c2) * x2 + (axis_x1 * axis_y1 * c11 - axis_z1 * s1) * y2 + (axis_x1 * axis_z1 * c11 + axis_y1 * s1) * z;
		var y3 = (axis_y1 * axis_x1 * c11 + axis_z1 * s1) * x2 + (axis_y1 * axis_y1 * c11 + c2) * y2 + (axis_y1 * axis_z1 * c11 - axis_x1 * s1) * z;
		var z2 = (axis_z1 * axis_x1 * c11 - axis_y1 * s1) * x2 + (axis_z1 * axis_y1 * c11 + axis_x1 * s1) * y2 + (axis_z1 * axis_z1 * c11 + c2) * z;
		var angle = this.frameCount * 0.02;
		var axis_x1 = 0;
		var axis_y1 = 0;
		var axis_z1 = 1;
		var s1 = Math.sin(angle);
		var c2 = Math.cos(angle);
		var c11 = 1 - c2;
		var x2 = (axis_x1 * axis_x1 * c11 + c2) * x3 + (axis_x1 * axis_y1 * c11 - axis_z1 * s1) * y3 + (axis_x1 * axis_z1 * c11 + axis_y1 * s1) * z2;
		var y2 = (axis_y1 * axis_x1 * c11 + axis_z1 * s1) * x3 + (axis_y1 * axis_y1 * c11 + c2) * y3 + (axis_y1 * axis_z1 * c11 - axis_x1 * s1) * z2;
		var angle = this.frameCount * 0.015;
		var axis_x2 = 1;
		var axis_y2 = 0;
		var axis_z2 = 0;
		var s2 = Math.sin(angle);
		var c3 = Math.cos(angle);
		var c12 = 1 - c3;
		var x4 = (axis_x2 * axis_x2 * c12 + c3) * lp3_x + (axis_x2 * axis_y2 * c12 - axis_z2 * s2) * lp3_y + (axis_x2 * axis_z2 * c12 + axis_y2 * s2) * lp3_z;
		var y4 = (axis_y2 * axis_x2 * c12 + axis_z2 * s2) * lp3_x + (axis_y2 * axis_y2 * c12 + c3) * lp3_y + (axis_y2 * axis_z2 * c12 - axis_x2 * s2) * lp3_z;
		var z = (axis_z2 * axis_x2 * c12 - axis_y2 * s2) * lp3_x + (axis_z2 * axis_y2 * c12 + axis_x2 * s2) * lp3_y + (axis_z2 * axis_z2 * c12 + c3) * lp3_z;
		var angle = this.frameCount * -0.01;
		var axis_x2 = 0;
		var axis_y2 = 1;
		var axis_z2 = 0;
		var s2 = Math.sin(angle);
		var c3 = Math.cos(angle);
		var c12 = 1 - c3;
		var x5 = (axis_x2 * axis_x2 * c12 + c3) * x4 + (axis_x2 * axis_y2 * c12 - axis_z2 * s2) * y4 + (axis_x2 * axis_z2 * c12 + axis_y2 * s2) * z;
		var y5 = (axis_y2 * axis_x2 * c12 + axis_z2 * s2) * x4 + (axis_y2 * axis_y2 * c12 + c3) * y4 + (axis_y2 * axis_z2 * c12 - axis_x2 * s2) * z;
		var z3 = (axis_z2 * axis_x2 * c12 - axis_y2 * s2) * x4 + (axis_z2 * axis_y2 * c12 + axis_x2 * s2) * y4 + (axis_z2 * axis_z2 * c12 + c3) * z;
		var angle = this.frameCount * 0.006;
		var axis_x2 = 0;
		var axis_y2 = 0;
		var axis_z2 = 1;
		var s2 = Math.sin(angle);
		var c3 = Math.cos(angle);
		var c12 = 1 - c3;
		var x4 = (axis_x2 * axis_x2 * c12 + c3) * x5 + (axis_x2 * axis_y2 * c12 - axis_z2 * s2) * y5 + (axis_x2 * axis_z2 * c12 + axis_y2 * s2) * z3;
		var y4 = (axis_y2 * axis_x2 * c12 + axis_z2 * s2) * x5 + (axis_y2 * axis_y2 * c12 + c3) * y5 + (axis_y2 * axis_z2 * c12 - axis_x2 * s2) * z3;
		var x6 = (axis_z * axis_x * c1 - axis_y * s) * x1 + (axis_z * axis_y * c1 + axis_x * s) * y1 + (axis_z * axis_z * c1 + c) * z1;
		var this_z = x6 < 0 ? -x6 : x6;
		var x1 = (axis_z1 * axis_x1 * c11 - axis_y1 * s1) * x3 + (axis_z1 * axis_y1 * c11 + axis_x1 * s1) * y3 + (axis_z1 * axis_z1 * c11 + c2) * z2;
		var this_z1 = x1 < 0 ? -x1 : x1;
		var x1 = (axis_z2 * axis_x2 * c12 - axis_y2 * s2) * x5 + (axis_z2 * axis_y2 * c12 + axis_x2 * s2) * y5 + (axis_z2 * axis_z2 * c12 + c3) * z3;
		var this_z2 = x1 < 0 ? -x1 : x1;
		var _this = this.g;
		_this.cameraSet = true;
		var a = _this.cameraPos;
		a.x = 0;
		a.y = 0;
		a.z = 5;
		var a = _this.cameraAt;
		a.x = 0;
		a.y = 0;
		a.z = 0;
		var a = _this.cameraUp;
		a.x = 0;
		a.y = 1;
		a.z = 0;
		var a = _this.viewMat;
		var eye = _this.cameraPos;
		var at = _this.cameraAt;
		var x1 = eye.x - at.x;
		var y1 = eye.y - at.y;
		var z = eye.z - at.z;
		var l = Math.sqrt(x1 * x1 + y1 * y1 + z * z);
		if(l > 0) {
			l = 1 / l;
		}
		var b = l;
		var x3 = x1 * b;
		var y3 = y1 * b;
		var z1 = z * b;
		var a1 = _this.cameraUp;
		var x1 = a1.y * z1 - a1.z * y3;
		var y1 = a1.z * x3 - a1.x * z1;
		var z = a1.x * y3 - a1.y * x3;
		var l = Math.sqrt(x1 * x1 + y1 * y1 + z * z);
		if(l > 0) {
			l = 1 / l;
		}
		var b = l;
		var x5 = x1 * b;
		var y5 = y1 * b;
		var z2 = z * b;
		var x1 = y3 * z2 - z1 * y5;
		var y1 = z1 * x5 - x3 * z2;
		var z = x3 * y5 - y3 * x5;
		a.e00 = x5;
		a.e01 = y5;
		a.e02 = z2;
		a.e03 = -(x5 * eye.x + y5 * eye.y + z2 * eye.z);
		a.e10 = x1;
		a.e11 = y1;
		a.e12 = z;
		a.e13 = -(x1 * eye.x + y1 * eye.y + z * eye.z);
		a.e20 = x3;
		a.e21 = y3;
		a.e22 = z1;
		a.e23 = -(x3 * eye.x + y3 * eye.y + z1 * eye.z);
		a.e30 = 0;
		a.e31 = 0;
		a.e32 = 0;
		a.e33 = 1;
		this.g.screen(this.pot.width,this.pot.height);
		var _this = this.g;
		_this.beginScene();
		this.g.clearImpl(0,0,0,1);
		var _this1 = this.g;
		if(_this1.sceneOpen != true) {
			throw new Error("begin scene before setting lights");
		}
		if(_this1.numLights == _this1.lightBuf.length) {
			throw new Error("too many lights");
		}
		var light = _this1.lightBuf[_this1.numLights++];
		var a = light.col;
		a.x = 0.2;
		a.y = 0.2;
		a.z = 0.2;
		var a = light.pos;
		a.x = 0;
		a.y = 0;
		a.z = 0;
		a.w = 0;
		var a = light.nor;
		a.x = 0;
		a.y = 0;
		a.z = 0;
		var _this1 = this.g;
		if(_this1.sceneOpen != true) {
			throw new Error("begin scene before setting lights");
		}
		if(_this1.numLights == _this1.lightBuf.length) {
			throw new Error("too many lights");
		}
		var light = _this1.lightBuf[_this1.numLights++];
		var a = light.col;
		a.x = 1;
		a.y = 0;
		a.z = 0;
		var a = light.pos;
		a.x = x;
		a.y = y;
		a.z = this_z;
		a.w = 1;
		var a = light.nor;
		a.x = 0;
		a.y = 0;
		a.z = 0;
		var _this1 = this.g;
		if(_this1.sceneOpen != true) {
			throw new Error("begin scene before setting lights");
		}
		if(_this1.numLights == _this1.lightBuf.length) {
			throw new Error("too many lights");
		}
		var light = _this1.lightBuf[_this1.numLights++];
		var a = light.col;
		a.x = 0;
		a.y = 1;
		a.z = 0;
		var a = light.pos;
		a.x = x2;
		a.y = y2;
		a.z = this_z1;
		a.w = 1;
		var a = light.nor;
		a.x = 0;
		a.y = 0;
		a.z = 0;
		var _this1 = this.g;
		if(_this1.sceneOpen != true) {
			throw new Error("begin scene before setting lights");
		}
		if(_this1.numLights == _this1.lightBuf.length) {
			throw new Error("too many lights");
		}
		var light = _this1.lightBuf[_this1.numLights++];
		var a = light.col;
		a.x = 0;
		a.y = 0;
		a.z = 1;
		var a = light.pos;
		a.x = x4;
		a.y = y4;
		a.z = this_z2;
		a.w = 1;
		var a = light.nor;
		a.x = 0;
		a.y = 0;
		a.z = 0;
		var _this1 = this.g;
		if(_this1.sceneOpen != true) {
			throw new Error("begin scene before setting materials");
		}
		_this1.materialSpc = 1.0;
		this.g.currentTexture = this.tex;
		var _this1 = this.g;
		if(_this1.sceneOpen != true) {
			throw new Error("begin scene before setting materials");
		}
		_this1.materialEmi = 1;
		var _this1 = this.g.localObjWriter;
		_this1.cr = 1;
		_this1.cg = 0;
		_this1.cb = 0;
		_this1.ca = 1;
		this.g.pushMatrix();
		var _this1 = this.g;
		var tx = x;
		var ty = y;
		var tz = this_z;
		if(tz == null) {
			tz = 0;
		}
		var a = _this1.modelMat;
		var a1 = _this1.modelMat;
		var v_z = tz;
		var b_e00 = 1;
		var b_e01 = 0;
		var b_e02 = 0;
		var b_e10 = 0;
		var b_e11 = 1;
		var b_e12 = 0;
		var b_e20 = 0;
		var b_e21 = 0;
		var b_e22 = 1;
		var b_e30 = 0;
		var b_e31 = 0;
		var b_e32 = 0;
		var b_e33 = 1;
		var a00 = a1.e00;
		var a01 = a1.e01;
		var a02 = a1.e02;
		var a03 = a1.e03;
		var a10 = a1.e10;
		var a11 = a1.e11;
		var a12 = a1.e12;
		var a13 = a1.e13;
		var a20 = a1.e20;
		var a21 = a1.e21;
		var a22 = a1.e22;
		var a23 = a1.e23;
		var a30 = a1.e30;
		var a31 = a1.e31;
		var a32 = a1.e32;
		var a33 = a1.e33;
		a.e00 = a00 * b_e00 + a01 * b_e10 + a02 * b_e20 + a03 * b_e30;
		a.e01 = a00 * b_e01 + a01 * b_e11 + a02 * b_e21 + a03 * b_e31;
		a.e02 = a00 * b_e02 + a01 * b_e12 + a02 * b_e22 + a03 * b_e32;
		a.e03 = a00 * tx + a01 * ty + a02 * v_z + a03 * b_e33;
		a.e10 = a10 * b_e00 + a11 * b_e10 + a12 * b_e20 + a13 * b_e30;
		a.e11 = a10 * b_e01 + a11 * b_e11 + a12 * b_e21 + a13 * b_e31;
		a.e12 = a10 * b_e02 + a11 * b_e12 + a12 * b_e22 + a13 * b_e32;
		a.e13 = a10 * tx + a11 * ty + a12 * v_z + a13 * b_e33;
		a.e20 = a20 * b_e00 + a21 * b_e10 + a22 * b_e20 + a23 * b_e30;
		a.e21 = a20 * b_e01 + a21 * b_e11 + a22 * b_e21 + a23 * b_e31;
		a.e22 = a20 * b_e02 + a21 * b_e12 + a22 * b_e22 + a23 * b_e32;
		a.e23 = a20 * tx + a21 * ty + a22 * v_z + a23 * b_e33;
		a.e30 = a30 * b_e00 + a31 * b_e10 + a32 * b_e20 + a33 * b_e30;
		a.e31 = a30 * b_e01 + a31 * b_e11 + a32 * b_e21 + a33 * b_e31;
		a.e32 = a30 * b_e02 + a31 * b_e12 + a32 * b_e22 + a33 * b_e32;
		a.e33 = a30 * tx + a31 * ty + a32 * v_z + a33 * b_e33;
		this.g.sphere(0.05);
		this.g.popMatrix();
		var _this1 = this.g.localObjWriter;
		_this1.cr = 0;
		_this1.cg = 1;
		_this1.cb = 0;
		_this1.ca = 1;
		this.g.pushMatrix();
		var _this1 = this.g;
		var tx = x2;
		var ty = y2;
		var tz = this_z1;
		if(tz == null) {
			tz = 0;
		}
		var a = _this1.modelMat;
		var a1 = _this1.modelMat;
		var v_z = tz;
		var b_e00 = 1;
		var b_e01 = 0;
		var b_e02 = 0;
		var b_e10 = 0;
		var b_e11 = 1;
		var b_e12 = 0;
		var b_e20 = 0;
		var b_e21 = 0;
		var b_e22 = 1;
		var b_e30 = 0;
		var b_e31 = 0;
		var b_e32 = 0;
		var b_e33 = 1;
		var a00 = a1.e00;
		var a01 = a1.e01;
		var a02 = a1.e02;
		var a03 = a1.e03;
		var a10 = a1.e10;
		var a11 = a1.e11;
		var a12 = a1.e12;
		var a13 = a1.e13;
		var a20 = a1.e20;
		var a21 = a1.e21;
		var a22 = a1.e22;
		var a23 = a1.e23;
		var a30 = a1.e30;
		var a31 = a1.e31;
		var a32 = a1.e32;
		var a33 = a1.e33;
		a.e00 = a00 * b_e00 + a01 * b_e10 + a02 * b_e20 + a03 * b_e30;
		a.e01 = a00 * b_e01 + a01 * b_e11 + a02 * b_e21 + a03 * b_e31;
		a.e02 = a00 * b_e02 + a01 * b_e12 + a02 * b_e22 + a03 * b_e32;
		a.e03 = a00 * tx + a01 * ty + a02 * v_z + a03 * b_e33;
		a.e10 = a10 * b_e00 + a11 * b_e10 + a12 * b_e20 + a13 * b_e30;
		a.e11 = a10 * b_e01 + a11 * b_e11 + a12 * b_e21 + a13 * b_e31;
		a.e12 = a10 * b_e02 + a11 * b_e12 + a12 * b_e22 + a13 * b_e32;
		a.e13 = a10 * tx + a11 * ty + a12 * v_z + a13 * b_e33;
		a.e20 = a20 * b_e00 + a21 * b_e10 + a22 * b_e20 + a23 * b_e30;
		a.e21 = a20 * b_e01 + a21 * b_e11 + a22 * b_e21 + a23 * b_e31;
		a.e22 = a20 * b_e02 + a21 * b_e12 + a22 * b_e22 + a23 * b_e32;
		a.e23 = a20 * tx + a21 * ty + a22 * v_z + a23 * b_e33;
		a.e30 = a30 * b_e00 + a31 * b_e10 + a32 * b_e20 + a33 * b_e30;
		a.e31 = a30 * b_e01 + a31 * b_e11 + a32 * b_e21 + a33 * b_e31;
		a.e32 = a30 * b_e02 + a31 * b_e12 + a32 * b_e22 + a33 * b_e32;
		a.e33 = a30 * tx + a31 * ty + a32 * v_z + a33 * b_e33;
		this.g.sphere(0.05);
		this.g.popMatrix();
		var _this1 = this.g.localObjWriter;
		_this1.cr = 0;
		_this1.cg = 0;
		_this1.cb = 1;
		_this1.ca = 1;
		this.g.pushMatrix();
		var _this1 = this.g;
		var tx = x4;
		var ty = y4;
		var tz = this_z2;
		if(tz == null) {
			tz = 0;
		}
		var a = _this1.modelMat;
		var a1 = _this1.modelMat;
		var v_z = tz;
		var b_e00 = 1;
		var b_e01 = 0;
		var b_e02 = 0;
		var b_e10 = 0;
		var b_e11 = 1;
		var b_e12 = 0;
		var b_e20 = 0;
		var b_e21 = 0;
		var b_e22 = 1;
		var b_e30 = 0;
		var b_e31 = 0;
		var b_e32 = 0;
		var b_e33 = 1;
		var a00 = a1.e00;
		var a01 = a1.e01;
		var a02 = a1.e02;
		var a03 = a1.e03;
		var a10 = a1.e10;
		var a11 = a1.e11;
		var a12 = a1.e12;
		var a13 = a1.e13;
		var a20 = a1.e20;
		var a21 = a1.e21;
		var a22 = a1.e22;
		var a23 = a1.e23;
		var a30 = a1.e30;
		var a31 = a1.e31;
		var a32 = a1.e32;
		var a33 = a1.e33;
		a.e00 = a00 * b_e00 + a01 * b_e10 + a02 * b_e20 + a03 * b_e30;
		a.e01 = a00 * b_e01 + a01 * b_e11 + a02 * b_e21 + a03 * b_e31;
		a.e02 = a00 * b_e02 + a01 * b_e12 + a02 * b_e22 + a03 * b_e32;
		a.e03 = a00 * tx + a01 * ty + a02 * v_z + a03 * b_e33;
		a.e10 = a10 * b_e00 + a11 * b_e10 + a12 * b_e20 + a13 * b_e30;
		a.e11 = a10 * b_e01 + a11 * b_e11 + a12 * b_e21 + a13 * b_e31;
		a.e12 = a10 * b_e02 + a11 * b_e12 + a12 * b_e22 + a13 * b_e32;
		a.e13 = a10 * tx + a11 * ty + a12 * v_z + a13 * b_e33;
		a.e20 = a20 * b_e00 + a21 * b_e10 + a22 * b_e20 + a23 * b_e30;
		a.e21 = a20 * b_e01 + a21 * b_e11 + a22 * b_e21 + a23 * b_e31;
		a.e22 = a20 * b_e02 + a21 * b_e12 + a22 * b_e22 + a23 * b_e32;
		a.e23 = a20 * tx + a21 * ty + a22 * v_z + a23 * b_e33;
		a.e30 = a30 * b_e00 + a31 * b_e10 + a32 * b_e20 + a33 * b_e30;
		a.e31 = a30 * b_e01 + a31 * b_e11 + a32 * b_e21 + a33 * b_e31;
		a.e32 = a30 * b_e02 + a31 * b_e12 + a32 * b_e22 + a33 * b_e32;
		a.e33 = a30 * tx + a31 * ty + a32 * v_z + a33 * b_e33;
		this.g.sphere(0.05);
		this.g.popMatrix();
		var _this1 = this.g.localObjWriter;
		_this1.cr = 1;
		_this1.cg = 1;
		_this1.cb = 1;
		_this1.ca = 1;
		var _this1 = this.g;
		if(_this1.sceneOpen != true) {
			throw new Error("begin scene before setting materials");
		}
		_this1.materialEmi = 0;
		var _this1 = this.g;
		var ang = this.frameCount * 0.0123;
		var a = _this1.modelMat;
		var a1 = _this1.modelMat;
		var axis_x = 1;
		var axis_y = 0;
		var axis_z = 0;
		var s = Math.sin(ang);
		var c = Math.cos(ang);
		var c1 = 1 - c;
		var a_e00 = axis_x * axis_x * c1 + c;
		var a_e01 = axis_x * axis_y * c1 - axis_z * s;
		var a_e02 = axis_x * axis_z * c1 + axis_y * s;
		var a_e10 = axis_y * axis_x * c1 + axis_z * s;
		var a_e11 = axis_y * axis_y * c1 + c;
		var a_e12 = axis_y * axis_z * c1 - axis_x * s;
		var a_e20 = axis_z * axis_x * c1 - axis_y * s;
		var a_e21 = axis_z * axis_y * c1 + axis_x * s;
		var a_e22 = axis_z * axis_z * c1 + c;
		var b_e03 = 0;
		var b_e13 = 0;
		var b_e23 = 0;
		var b_e30 = 0;
		var b_e31 = 0;
		var b_e32 = 0;
		var b_e33 = 1;
		var a00 = a1.e00;
		var a01 = a1.e01;
		var a02 = a1.e02;
		var a03 = a1.e03;
		var a10 = a1.e10;
		var a11 = a1.e11;
		var a12 = a1.e12;
		var a13 = a1.e13;
		var a20 = a1.e20;
		var a21 = a1.e21;
		var a22 = a1.e22;
		var a23 = a1.e23;
		var a30 = a1.e30;
		var a31 = a1.e31;
		var a32 = a1.e32;
		var a33 = a1.e33;
		a.e00 = a00 * a_e00 + a01 * a_e10 + a02 * a_e20 + a03 * b_e30;
		a.e01 = a00 * a_e01 + a01 * a_e11 + a02 * a_e21 + a03 * b_e31;
		a.e02 = a00 * a_e02 + a01 * a_e12 + a02 * a_e22 + a03 * b_e32;
		a.e03 = a00 * b_e03 + a01 * b_e13 + a02 * b_e23 + a03 * b_e33;
		a.e10 = a10 * a_e00 + a11 * a_e10 + a12 * a_e20 + a13 * b_e30;
		a.e11 = a10 * a_e01 + a11 * a_e11 + a12 * a_e21 + a13 * b_e31;
		a.e12 = a10 * a_e02 + a11 * a_e12 + a12 * a_e22 + a13 * b_e32;
		a.e13 = a10 * b_e03 + a11 * b_e13 + a12 * b_e23 + a13 * b_e33;
		a.e20 = a20 * a_e00 + a21 * a_e10 + a22 * a_e20 + a23 * b_e30;
		a.e21 = a20 * a_e01 + a21 * a_e11 + a22 * a_e21 + a23 * b_e31;
		a.e22 = a20 * a_e02 + a21 * a_e12 + a22 * a_e22 + a23 * b_e32;
		a.e23 = a20 * b_e03 + a21 * b_e13 + a22 * b_e23 + a23 * b_e33;
		a.e30 = a30 * a_e00 + a31 * a_e10 + a32 * a_e20 + a33 * b_e30;
		a.e31 = a30 * a_e01 + a31 * a_e11 + a32 * a_e21 + a33 * b_e31;
		a.e32 = a30 * a_e02 + a31 * a_e12 + a32 * a_e22 + a33 * b_e32;
		a.e33 = a30 * b_e03 + a31 * b_e13 + a32 * b_e23 + a33 * b_e33;
		var _this1 = this.g;
		var ang = this.frameCount * 0.01;
		var a = _this1.modelMat;
		var a1 = _this1.modelMat;
		var axis_x = 0;
		var axis_y = 1;
		var axis_z = 0;
		var s = Math.sin(ang);
		var c = Math.cos(ang);
		var c1 = 1 - c;
		var a_e00 = axis_x * axis_x * c1 + c;
		var a_e01 = axis_x * axis_y * c1 - axis_z * s;
		var a_e02 = axis_x * axis_z * c1 + axis_y * s;
		var a_e10 = axis_y * axis_x * c1 + axis_z * s;
		var a_e11 = axis_y * axis_y * c1 + c;
		var a_e12 = axis_y * axis_z * c1 - axis_x * s;
		var a_e20 = axis_z * axis_x * c1 - axis_y * s;
		var a_e21 = axis_z * axis_y * c1 + axis_x * s;
		var a_e22 = axis_z * axis_z * c1 + c;
		var b_e03 = 0;
		var b_e13 = 0;
		var b_e23 = 0;
		var b_e30 = 0;
		var b_e31 = 0;
		var b_e32 = 0;
		var b_e33 = 1;
		var a00 = a1.e00;
		var a01 = a1.e01;
		var a02 = a1.e02;
		var a03 = a1.e03;
		var a10 = a1.e10;
		var a11 = a1.e11;
		var a12 = a1.e12;
		var a13 = a1.e13;
		var a20 = a1.e20;
		var a21 = a1.e21;
		var a22 = a1.e22;
		var a23 = a1.e23;
		var a30 = a1.e30;
		var a31 = a1.e31;
		var a32 = a1.e32;
		var a33 = a1.e33;
		a.e00 = a00 * a_e00 + a01 * a_e10 + a02 * a_e20 + a03 * b_e30;
		a.e01 = a00 * a_e01 + a01 * a_e11 + a02 * a_e21 + a03 * b_e31;
		a.e02 = a00 * a_e02 + a01 * a_e12 + a02 * a_e22 + a03 * b_e32;
		a.e03 = a00 * b_e03 + a01 * b_e13 + a02 * b_e23 + a03 * b_e33;
		a.e10 = a10 * a_e00 + a11 * a_e10 + a12 * a_e20 + a13 * b_e30;
		a.e11 = a10 * a_e01 + a11 * a_e11 + a12 * a_e21 + a13 * b_e31;
		a.e12 = a10 * a_e02 + a11 * a_e12 + a12 * a_e22 + a13 * b_e32;
		a.e13 = a10 * b_e03 + a11 * b_e13 + a12 * b_e23 + a13 * b_e33;
		a.e20 = a20 * a_e00 + a21 * a_e10 + a22 * a_e20 + a23 * b_e30;
		a.e21 = a20 * a_e01 + a21 * a_e11 + a22 * a_e21 + a23 * b_e31;
		a.e22 = a20 * a_e02 + a21 * a_e12 + a22 * a_e22 + a23 * b_e32;
		a.e23 = a20 * b_e03 + a21 * b_e13 + a22 * b_e23 + a23 * b_e33;
		a.e30 = a30 * a_e00 + a31 * a_e10 + a32 * a_e20 + a33 * b_e30;
		a.e31 = a30 * a_e01 + a31 * a_e11 + a32 * a_e21 + a33 * b_e31;
		a.e32 = a30 * a_e02 + a31 * a_e12 + a32 * a_e22 + a33 * b_e32;
		a.e33 = a30 * b_e03 + a31 * b_e13 + a32 * b_e23 + a33 * b_e33;
		this.g.box(2,2,2);
		this.g.sphere(1.2);
		_this.endScene();
	}
});
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
pot_core_FrameRateManager.catchErrors = false;
pot_core_FrameRateManager.UPDATE_LOAD_COEFF = 0.75;
pot_core_FrameRateManager.MAX_UPDATE_COUNT = 4;
pot_core_FrameRateManager.MIN_UPDATE_TIME = 4;
pot_core_FrameRateManager.MAX_FRAMERATE_RATIO = 4;
pot_graphics_bitmap_BitmapGraphics.PI = 3.141592653589793;
pot_graphics_bitmap_BitmapGraphics.TWO_PI = 6.2831853071795862;
pot_graphics_gl_Graphics.MAT_STACK_SIZE = 65536;
pot_graphics_gl_Shader.id = 0;
pot_graphics_gl_low_FloatBuffer.USE_SUB_DATA = false;
pot_graphics_gl_low_IntBuffer.USE_SUB_DATA = false;
pot_graphics_gl_shader_Consts.consts = { MAX_LIGHTS : 16};
pot_graphics_gl_shader_DefaultShader.consts = { };
pot_graphics_gl_shader_DefaultShader.uniforms = (function($this) {
	var $r;
	var tmp = { transform : { name : "matrix" + ".transform", type : hgsl_UniformType.Mat(4,4)}, model : { name : "matrix" + ".model", type : hgsl_UniformType.Mat(4,4)}, view : { name : "matrix" + ".view", type : hgsl_UniformType.Mat(4,4)}, projection : { name : "matrix" + ".projection", type : hgsl_UniformType.Mat(4,4)}, invProjection : { name : "matrix" + ".invProjection", type : hgsl_UniformType.Mat(4,4)}, modelView : { name : "matrix" + ".modelView", type : hgsl_UniformType.Mat(4,4)}, invModelView : { name : "matrix" + ".invModelView", type : hgsl_UniformType.Mat(4,4)}, normal : { name : "matrix" + ".normal", type : hgsl_UniformType.Mat(3,3)}};
	var tmp1 = { ambient : { name : "material" + ".ambient", type : hgsl_UniformType.Float}, diffuse : { name : "material" + ".diffuse", type : hgsl_UniformType.Float}, specular : { name : "material" + ".specular", type : hgsl_UniformType.Float}, shininess : { name : "material" + ".shininess", type : hgsl_UniformType.Float}, emission : { name : "material" + ".emission", type : hgsl_UniformType.Float}, texture : { name : "material" + ".texture", type : hgsl_UniformType.Sampler(hgsl_SamplerType.Sampler2D)}};
	var obj = { name : "numLights", type : hgsl_UniformType.Int};
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 16) {
			var path = "lights" + "[" + _g1++ + "]";
			_g.push({ position : { name : path + ".position", type : hgsl_UniformType.Vec(4)}, color : { name : path + ".color", type : hgsl_UniformType.Vec(3)}, normal : { name : path + ".normal", type : hgsl_UniformType.Vec(3)}});
		}
	}
	$r = { matrix : tmp, material : tmp1, numLights : obj, lights : new hgsl_UniformArrayData(_g,"lights",hgsl_UniformType.Struct)};
	return $r;
}(this));
pot_graphics_gl_shader_DefaultShader.attributes = { aPosition : { name : "aPosition", type : hgsl_AttributeType.Vec(4), location : 0}, aColor : { name : "aColor", type : hgsl_AttributeType.Vec(4), location : 1}, aNormal : { name : "aNormal", type : hgsl_AttributeType.Vec(3), location : 2}, aTexCoord : { name : "aTexCoord", type : hgsl_AttributeType.Vec(2), location : 3}};
pot_graphics_gl_shader_DefaultShader.vertexSource = "#version 300 es\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp samplerCubeShadow;\nprecision highp sampler2DShadow;\nprecision highp sampler2DArray;\nprecision highp sampler2DArrayShadow;\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nstruct Struct0 {\n\tmat4 transform;\n\tmat4 model;\n\tmat4 view;\n\tmat4 projection;\n\tmat4 invProjection;\n\tmat4 modelView;\n\tmat4 invModelView;\n\tmat3 normal;\n};\nstruct Struct1 {\n\tfloat ambient;\n\tfloat diffuse;\n\tfloat specular;\n\tfloat shininess;\n\tfloat emission;\n\tsampler2D texture;\n};\nstruct Struct2 {\n\tvec4 position;\n\tvec3 color;\n\tvec3 normal;\n};\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec4 aColor;\nlayout(location = 2) in vec3 aNormal;\nlayout(location = 3) in vec2 aTexCoord;\nuniform Struct0 matrix;\nuniform Struct1 material;\nuniform int numLights;\nuniform Struct2 lights[16];\nout vec4 vColor;\nout vec3 vPosition;\nout vec3 vNormal;\nout vec2 vTexCoord;\n\nvoid main() {\n\tgl_Position = matrix.transform * aPosition;\n\tgl_PointSize = 1.0;\n\tvColor = aColor;\n\tvPosition = (matrix.modelView * aPosition).xyz;\n\tvNormal = matrix.normal * aNormal;\n\tvTexCoord = aTexCoord;\n}";
pot_graphics_gl_shader_DefaultShader.fragmentSource = "#version 300 es\nprecision highp int;\nprecision highp float;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp samplerCubeShadow;\nprecision highp sampler2DShadow;\nprecision highp sampler2DArray;\nprecision highp sampler2DArrayShadow;\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nstruct Struct0 {\n\tmat4 transform;\n\tmat4 model;\n\tmat4 view;\n\tmat4 projection;\n\tmat4 invProjection;\n\tmat4 modelView;\n\tmat4 invModelView;\n\tmat3 normal;\n};\nstruct Struct1 {\n\tfloat ambient;\n\tfloat diffuse;\n\tfloat specular;\n\tfloat shininess;\n\tfloat emission;\n\tsampler2D texture;\n};\nstruct Struct2 {\n\tvec4 position;\n\tvec3 color;\n\tvec3 normal;\n};\n\nuniform Struct0 matrix;\nuniform Struct1 material;\nuniform int numLights;\nuniform Struct2 lights[16];\nin vec4 vColor;\nin vec3 vPosition;\nin vec3 vNormal;\nin vec2 vTexCoord;\nlayout(location = 0) out vec4 oColor;\n\nvec4 computeBaseColor() {\n\treturn vColor;\n}\n\nvec3 safeNormalize(vec3 v) {\n\treturn dot(v, v) > 0.0 ? normalize(v) : vec3(0);\n}\n\nvec3 ambientLight(vec3 lightColor, vec3 color) {\n\treturn lightColor * color * material.ambient;\n}\n\nvec3 directionalLight(vec3 lightColor, vec3 lightDirection, vec3 eye, vec3 normal, vec3 color) {\n\tfloat ldot = max(-dot(lightDirection, normal), 0.0);\n\tvec3 res = lightColor * color * ldot * material.diffuse;\n\tif (dot(normal, eye) < 0.0) {\n\t\tvec3 reflEye = eye - 2.0 * normal * dot(eye, normal);\n\t\tfloat rdot = max(-dot(reflEye, lightDirection), 0.0);\n\t\tres += lightColor * pow(rdot, material.shininess) * material.specular;\n\t}\n\treturn res;\n}\n\nvoid main() {\n\tvec4 baseColor = computeBaseColor();\n\tif (baseColor.w == 0.0) {\n\t\tdiscard;\n\t}\n\tif (numLights == 0) {\n\t\toColor = baseColor;\n\t\treturn;\n\t}\n\tvec3 eye = safeNormalize(vPosition);\n\tvec3 n = safeNormalize(vNormal);\n\tif (!gl_FrontFacing) {\n\t\tn = -n;\n\t}\n\tvec3 color = baseColor.xyz;\n\tvec3 total = color * material.emission;\n\tfor (int i = 0; i < numLights; i++) {\n\t\tStruct2 light = lights[i];\n\t\tvec4 lp = light.position;\n\t\tvec3 lc = light.color;\n\t\tvec3 ln = light.normal;\n\t\tbool amb = lp.w == 0.0 && dot(ln, ln) == 0.0;\n\t\tif (amb) {\n\t\t\ttotal += ambientLight(lc, color);\n\t\t}\n\t\telse {\n\t\t\tbool dir = lp.w == 0.0;\n\t\t\tif (!dir) {\n\t\t\t\tln = safeNormalize(vPosition - lp.xyz);\n\t\t\t}\n\t\t\tfloat ldot = max(-dot(ln, n), 0.0);\n\t\t\ttotal += directionalLight(lc, ln, eye, n, color);\n\t\t}\n\t}\n\toColor = vec4(total, baseColor.w);\n}";
pot_graphics_gl_shader_DefaultShader.source = { vertex : "#version 300 es\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp samplerCubeShadow;\nprecision highp sampler2DShadow;\nprecision highp sampler2DArray;\nprecision highp sampler2DArrayShadow;\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nstruct Struct0 {\n\tmat4 transform;\n\tmat4 model;\n\tmat4 view;\n\tmat4 projection;\n\tmat4 invProjection;\n\tmat4 modelView;\n\tmat4 invModelView;\n\tmat3 normal;\n};\nstruct Struct1 {\n\tfloat ambient;\n\tfloat diffuse;\n\tfloat specular;\n\tfloat shininess;\n\tfloat emission;\n\tsampler2D texture;\n};\nstruct Struct2 {\n\tvec4 position;\n\tvec3 color;\n\tvec3 normal;\n};\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec4 aColor;\nlayout(location = 2) in vec3 aNormal;\nlayout(location = 3) in vec2 aTexCoord;\nuniform Struct0 matrix;\nuniform Struct1 material;\nuniform int numLights;\nuniform Struct2 lights[16];\nout vec4 vColor;\nout vec3 vPosition;\nout vec3 vNormal;\nout vec2 vTexCoord;\n\nvoid main() {\n\tgl_Position = matrix.transform * aPosition;\n\tgl_PointSize = 1.0;\n\tvColor = aColor;\n\tvPosition = (matrix.modelView * aPosition).xyz;\n\tvNormal = matrix.normal * aNormal;\n\tvTexCoord = aTexCoord;\n}", fragment : "#version 300 es\nprecision highp int;\nprecision highp float;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp samplerCubeShadow;\nprecision highp sampler2DShadow;\nprecision highp sampler2DArray;\nprecision highp sampler2DArrayShadow;\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nstruct Struct0 {\n\tmat4 transform;\n\tmat4 model;\n\tmat4 view;\n\tmat4 projection;\n\tmat4 invProjection;\n\tmat4 modelView;\n\tmat4 invModelView;\n\tmat3 normal;\n};\nstruct Struct1 {\n\tfloat ambient;\n\tfloat diffuse;\n\tfloat specular;\n\tfloat shininess;\n\tfloat emission;\n\tsampler2D texture;\n};\nstruct Struct2 {\n\tvec4 position;\n\tvec3 color;\n\tvec3 normal;\n};\n\nuniform Struct0 matrix;\nuniform Struct1 material;\nuniform int numLights;\nuniform Struct2 lights[16];\nin vec4 vColor;\nin vec3 vPosition;\nin vec3 vNormal;\nin vec2 vTexCoord;\nlayout(location = 0) out vec4 oColor;\n\nvec4 computeBaseColor() {\n\treturn vColor;\n}\n\nvec3 safeNormalize(vec3 v) {\n\treturn dot(v, v) > 0.0 ? normalize(v) : vec3(0);\n}\n\nvec3 ambientLight(vec3 lightColor, vec3 color) {\n\treturn lightColor * color * material.ambient;\n}\n\nvec3 directionalLight(vec3 lightColor, vec3 lightDirection, vec3 eye, vec3 normal, vec3 color) {\n\tfloat ldot = max(-dot(lightDirection, normal), 0.0);\n\tvec3 res = lightColor * color * ldot * material.diffuse;\n\tif (dot(normal, eye) < 0.0) {\n\t\tvec3 reflEye = eye - 2.0 * normal * dot(eye, normal);\n\t\tfloat rdot = max(-dot(reflEye, lightDirection), 0.0);\n\t\tres += lightColor * pow(rdot, material.shininess) * material.specular;\n\t}\n\treturn res;\n}\n\nvoid main() {\n\tvec4 baseColor = computeBaseColor();\n\tif (baseColor.w == 0.0) {\n\t\tdiscard;\n\t}\n\tif (numLights == 0) {\n\t\toColor = baseColor;\n\t\treturn;\n\t}\n\tvec3 eye = safeNormalize(vPosition);\n\tvec3 n = safeNormalize(vNormal);\n\tif (!gl_FrontFacing) {\n\t\tn = -n;\n\t}\n\tvec3 color = baseColor.xyz;\n\tvec3 total = color * material.emission;\n\tfor (int i = 0; i < numLights; i++) {\n\t\tStruct2 light = lights[i];\n\t\tvec4 lp = light.position;\n\t\tvec3 lc = light.color;\n\t\tvec3 ln = light.normal;\n\t\tbool amb = lp.w == 0.0 && dot(ln, ln) == 0.0;\n\t\tif (amb) {\n\t\t\ttotal += ambientLight(lc, color);\n\t\t}\n\t\telse {\n\t\t\tbool dir = lp.w == 0.0;\n\t\t\tif (!dir) {\n\t\t\t\tln = safeNormalize(vPosition - lp.xyz);\n\t\t\t}\n\t\t\tfloat ldot = max(-dot(ln, n), 0.0);\n\t\t\ttotal += directionalLight(lc, ln, eye, n, color);\n\t\t}\n\t}\n\toColor = vec4(total, baseColor.w);\n}"};
pot_graphics_gl_shader_DefaultShaderTextured.consts = { };
pot_graphics_gl_shader_DefaultShaderTextured.uniforms = (function($this) {
	var $r;
	var tmp = { transform : { name : "matrix" + ".transform", type : hgsl_UniformType.Mat(4,4)}, model : { name : "matrix" + ".model", type : hgsl_UniformType.Mat(4,4)}, view : { name : "matrix" + ".view", type : hgsl_UniformType.Mat(4,4)}, projection : { name : "matrix" + ".projection", type : hgsl_UniformType.Mat(4,4)}, invProjection : { name : "matrix" + ".invProjection", type : hgsl_UniformType.Mat(4,4)}, modelView : { name : "matrix" + ".modelView", type : hgsl_UniformType.Mat(4,4)}, invModelView : { name : "matrix" + ".invModelView", type : hgsl_UniformType.Mat(4,4)}, normal : { name : "matrix" + ".normal", type : hgsl_UniformType.Mat(3,3)}};
	var tmp1 = { ambient : { name : "material" + ".ambient", type : hgsl_UniformType.Float}, diffuse : { name : "material" + ".diffuse", type : hgsl_UniformType.Float}, specular : { name : "material" + ".specular", type : hgsl_UniformType.Float}, shininess : { name : "material" + ".shininess", type : hgsl_UniformType.Float}, emission : { name : "material" + ".emission", type : hgsl_UniformType.Float}, texture : { name : "material" + ".texture", type : hgsl_UniformType.Sampler(hgsl_SamplerType.Sampler2D)}};
	var obj = { name : "numLights", type : hgsl_UniformType.Int};
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 16) {
			var path = "lights" + "[" + _g1++ + "]";
			_g.push({ position : { name : path + ".position", type : hgsl_UniformType.Vec(4)}, color : { name : path + ".color", type : hgsl_UniformType.Vec(3)}, normal : { name : path + ".normal", type : hgsl_UniformType.Vec(3)}});
		}
	}
	$r = { matrix : tmp, material : tmp1, numLights : obj, lights : new hgsl_UniformArrayData(_g,"lights",hgsl_UniformType.Struct)};
	return $r;
}(this));
pot_graphics_gl_shader_DefaultShaderTextured.attributes = { aPosition : { name : "aPosition", type : hgsl_AttributeType.Vec(4), location : 0}, aColor : { name : "aColor", type : hgsl_AttributeType.Vec(4), location : 1}, aNormal : { name : "aNormal", type : hgsl_AttributeType.Vec(3), location : 2}, aTexCoord : { name : "aTexCoord", type : hgsl_AttributeType.Vec(2), location : 3}};
pot_graphics_gl_shader_DefaultShaderTextured.vertexSource = "#version 300 es\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp samplerCubeShadow;\nprecision highp sampler2DShadow;\nprecision highp sampler2DArray;\nprecision highp sampler2DArrayShadow;\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nstruct Struct0 {\n\tmat4 transform;\n\tmat4 model;\n\tmat4 view;\n\tmat4 projection;\n\tmat4 invProjection;\n\tmat4 modelView;\n\tmat4 invModelView;\n\tmat3 normal;\n};\nstruct Struct1 {\n\tfloat ambient;\n\tfloat diffuse;\n\tfloat specular;\n\tfloat shininess;\n\tfloat emission;\n\tsampler2D texture;\n};\nstruct Struct2 {\n\tvec4 position;\n\tvec3 color;\n\tvec3 normal;\n};\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec4 aColor;\nlayout(location = 2) in vec3 aNormal;\nlayout(location = 3) in vec2 aTexCoord;\nuniform Struct0 matrix;\nuniform Struct1 material;\nuniform int numLights;\nuniform Struct2 lights[16];\nout vec4 vColor;\nout vec3 vPosition;\nout vec3 vNormal;\nout vec2 vTexCoord;\n\nvoid main() {\n\tgl_Position = matrix.transform * aPosition;\n\tgl_PointSize = 1.0;\n\tvColor = aColor;\n\tvPosition = (matrix.modelView * aPosition).xyz;\n\tvNormal = matrix.normal * aNormal;\n\tvTexCoord = aTexCoord;\n}";
pot_graphics_gl_shader_DefaultShaderTextured.fragmentSource = "#version 300 es\nprecision highp int;\nprecision highp float;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp samplerCubeShadow;\nprecision highp sampler2DShadow;\nprecision highp sampler2DArray;\nprecision highp sampler2DArrayShadow;\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nstruct Struct0 {\n\tmat4 transform;\n\tmat4 model;\n\tmat4 view;\n\tmat4 projection;\n\tmat4 invProjection;\n\tmat4 modelView;\n\tmat4 invModelView;\n\tmat3 normal;\n};\nstruct Struct1 {\n\tfloat ambient;\n\tfloat diffuse;\n\tfloat specular;\n\tfloat shininess;\n\tfloat emission;\n\tsampler2D texture;\n};\nstruct Struct2 {\n\tvec4 position;\n\tvec3 color;\n\tvec3 normal;\n};\n\nuniform Struct0 matrix;\nuniform Struct1 material;\nuniform int numLights;\nuniform Struct2 lights[16];\nin vec4 vColor;\nin vec3 vPosition;\nin vec3 vNormal;\nin vec2 vTexCoord;\nlayout(location = 0) out vec4 oColor;\n\nvec4 computeBaseColor() {\n\treturn texture(material.texture, vTexCoord) * vColor;\n}\n\nvec3 safeNormalize(vec3 v) {\n\treturn dot(v, v) > 0.0 ? normalize(v) : vec3(0);\n}\n\nvec3 ambientLight(vec3 lightColor, vec3 color) {\n\treturn lightColor * color * material.ambient;\n}\n\nvec3 directionalLight(vec3 lightColor, vec3 lightDirection, vec3 eye, vec3 normal, vec3 color) {\n\tfloat ldot = max(-dot(lightDirection, normal), 0.0);\n\tvec3 res = lightColor * color * ldot * material.diffuse;\n\tif (dot(normal, eye) < 0.0) {\n\t\tvec3 reflEye = eye - 2.0 * normal * dot(eye, normal);\n\t\tfloat rdot = max(-dot(reflEye, lightDirection), 0.0);\n\t\tres += lightColor * pow(rdot, material.shininess) * material.specular;\n\t}\n\treturn res;\n}\n\nvoid main() {\n\tvec4 baseColor = computeBaseColor();\n\tif (baseColor.w == 0.0) {\n\t\tdiscard;\n\t}\n\tif (numLights == 0) {\n\t\toColor = baseColor;\n\t\treturn;\n\t}\n\tvec3 eye = safeNormalize(vPosition);\n\tvec3 n = safeNormalize(vNormal);\n\tif (!gl_FrontFacing) {\n\t\tn = -n;\n\t}\n\tvec3 color = baseColor.xyz;\n\tvec3 total = color * material.emission;\n\tfor (int i = 0; i < numLights; i++) {\n\t\tStruct2 light = lights[i];\n\t\tvec4 lp = light.position;\n\t\tvec3 lc = light.color;\n\t\tvec3 ln = light.normal;\n\t\tbool amb = lp.w == 0.0 && dot(ln, ln) == 0.0;\n\t\tif (amb) {\n\t\t\ttotal += ambientLight(lc, color);\n\t\t}\n\t\telse {\n\t\t\tbool dir = lp.w == 0.0;\n\t\t\tif (!dir) {\n\t\t\t\tln = safeNormalize(vPosition - lp.xyz);\n\t\t\t}\n\t\t\tfloat ldot = max(-dot(ln, n), 0.0);\n\t\t\ttotal += directionalLight(lc, ln, eye, n, color);\n\t\t}\n\t}\n\toColor = vec4(total, baseColor.w);\n}";
pot_graphics_gl_shader_DefaultShaderTextured.source = { vertex : "#version 300 es\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp samplerCubeShadow;\nprecision highp sampler2DShadow;\nprecision highp sampler2DArray;\nprecision highp sampler2DArrayShadow;\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nstruct Struct0 {\n\tmat4 transform;\n\tmat4 model;\n\tmat4 view;\n\tmat4 projection;\n\tmat4 invProjection;\n\tmat4 modelView;\n\tmat4 invModelView;\n\tmat3 normal;\n};\nstruct Struct1 {\n\tfloat ambient;\n\tfloat diffuse;\n\tfloat specular;\n\tfloat shininess;\n\tfloat emission;\n\tsampler2D texture;\n};\nstruct Struct2 {\n\tvec4 position;\n\tvec3 color;\n\tvec3 normal;\n};\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec4 aColor;\nlayout(location = 2) in vec3 aNormal;\nlayout(location = 3) in vec2 aTexCoord;\nuniform Struct0 matrix;\nuniform Struct1 material;\nuniform int numLights;\nuniform Struct2 lights[16];\nout vec4 vColor;\nout vec3 vPosition;\nout vec3 vNormal;\nout vec2 vTexCoord;\n\nvoid main() {\n\tgl_Position = matrix.transform * aPosition;\n\tgl_PointSize = 1.0;\n\tvColor = aColor;\n\tvPosition = (matrix.modelView * aPosition).xyz;\n\tvNormal = matrix.normal * aNormal;\n\tvTexCoord = aTexCoord;\n}", fragment : "#version 300 es\nprecision highp int;\nprecision highp float;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp samplerCubeShadow;\nprecision highp sampler2DShadow;\nprecision highp sampler2DArray;\nprecision highp sampler2DArrayShadow;\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nstruct Struct0 {\n\tmat4 transform;\n\tmat4 model;\n\tmat4 view;\n\tmat4 projection;\n\tmat4 invProjection;\n\tmat4 modelView;\n\tmat4 invModelView;\n\tmat3 normal;\n};\nstruct Struct1 {\n\tfloat ambient;\n\tfloat diffuse;\n\tfloat specular;\n\tfloat shininess;\n\tfloat emission;\n\tsampler2D texture;\n};\nstruct Struct2 {\n\tvec4 position;\n\tvec3 color;\n\tvec3 normal;\n};\n\nuniform Struct0 matrix;\nuniform Struct1 material;\nuniform int numLights;\nuniform Struct2 lights[16];\nin vec4 vColor;\nin vec3 vPosition;\nin vec3 vNormal;\nin vec2 vTexCoord;\nlayout(location = 0) out vec4 oColor;\n\nvec4 computeBaseColor() {\n\treturn texture(material.texture, vTexCoord) * vColor;\n}\n\nvec3 safeNormalize(vec3 v) {\n\treturn dot(v, v) > 0.0 ? normalize(v) : vec3(0);\n}\n\nvec3 ambientLight(vec3 lightColor, vec3 color) {\n\treturn lightColor * color * material.ambient;\n}\n\nvec3 directionalLight(vec3 lightColor, vec3 lightDirection, vec3 eye, vec3 normal, vec3 color) {\n\tfloat ldot = max(-dot(lightDirection, normal), 0.0);\n\tvec3 res = lightColor * color * ldot * material.diffuse;\n\tif (dot(normal, eye) < 0.0) {\n\t\tvec3 reflEye = eye - 2.0 * normal * dot(eye, normal);\n\t\tfloat rdot = max(-dot(reflEye, lightDirection), 0.0);\n\t\tres += lightColor * pow(rdot, material.shininess) * material.specular;\n\t}\n\treturn res;\n}\n\nvoid main() {\n\tvec4 baseColor = computeBaseColor();\n\tif (baseColor.w == 0.0) {\n\t\tdiscard;\n\t}\n\tif (numLights == 0) {\n\t\toColor = baseColor;\n\t\treturn;\n\t}\n\tvec3 eye = safeNormalize(vPosition);\n\tvec3 n = safeNormalize(vNormal);\n\tif (!gl_FrontFacing) {\n\t\tn = -n;\n\t}\n\tvec3 color = baseColor.xyz;\n\tvec3 total = color * material.emission;\n\tfor (int i = 0; i < numLights; i++) {\n\t\tStruct2 light = lights[i];\n\t\tvec4 lp = light.position;\n\t\tvec3 lc = light.color;\n\t\tvec3 ln = light.normal;\n\t\tbool amb = lp.w == 0.0 && dot(ln, ln) == 0.0;\n\t\tif (amb) {\n\t\t\ttotal += ambientLight(lc, color);\n\t\t}\n\t\telse {\n\t\t\tbool dir = lp.w == 0.0;\n\t\t\tif (!dir) {\n\t\t\t\tln = safeNormalize(vPosition - lp.xyz);\n\t\t\t}\n\t\t\tfloat ldot = max(-dot(ln, n), 0.0);\n\t\t\ttotal += directionalLight(lc, ln, eye, n, color);\n\t\t}\n\t}\n\toColor = vec4(total, baseColor.w);\n}"};
pot_input_CodeValue.Escape = "Escape";
pot_input_CodeValue.Digit0 = "Digit0";
pot_input_CodeValue.Digit1 = "Digit1";
pot_input_CodeValue.Digit2 = "Digit2";
pot_input_CodeValue.Digit3 = "Digit3";
pot_input_CodeValue.Digit4 = "Digit4";
pot_input_CodeValue.Digit5 = "Digit5";
pot_input_CodeValue.Digit6 = "Digit6";
pot_input_CodeValue.Digit7 = "Digit7";
pot_input_CodeValue.Digit8 = "Digit8";
pot_input_CodeValue.Digit9 = "Digit9";
pot_input_CodeValue.Minus = "Minus";
pot_input_CodeValue.Equal = "Equal";
pot_input_CodeValue.Backspace = "Backspace";
pot_input_CodeValue.Tab = "Tab";
pot_input_CodeValue.KeyQ = "KeyQ";
pot_input_CodeValue.KeyW = "KeyW";
pot_input_CodeValue.KeyE = "KeyE";
pot_input_CodeValue.KeyR = "KeyR";
pot_input_CodeValue.KeyT = "KeyT";
pot_input_CodeValue.KeyY = "KeyY";
pot_input_CodeValue.KeyU = "KeyU";
pot_input_CodeValue.KeyI = "KeyI";
pot_input_CodeValue.KeyO = "KeyO";
pot_input_CodeValue.KeyP = "KeyP";
pot_input_CodeValue.BracketLeft = "BracketLeft";
pot_input_CodeValue.BracketRight = "BracketRight";
pot_input_CodeValue.Enter = "Enter";
pot_input_CodeValue.ControlLeft = "ControlLeft";
pot_input_CodeValue.KeyA = "KeyA";
pot_input_CodeValue.KeyS = "KeyS";
pot_input_CodeValue.KeyD = "KeyD";
pot_input_CodeValue.KeyF = "KeyF";
pot_input_CodeValue.KeyG = "KeyG";
pot_input_CodeValue.KeyH = "KeyH";
pot_input_CodeValue.KeyJ = "KeyJ";
pot_input_CodeValue.KeyK = "KeyK";
pot_input_CodeValue.KeyL = "KeyL";
pot_input_CodeValue.Semicolon = "Semicolon";
pot_input_CodeValue.Quote = "Quote";
pot_input_CodeValue.Backquote = "Backquote";
pot_input_CodeValue.ShiftLeft = "ShiftLeft";
pot_input_CodeValue.Backslash = "Backslash";
pot_input_CodeValue.KeyZ = "KeyZ";
pot_input_CodeValue.KeyX = "KeyX";
pot_input_CodeValue.KeyC = "KeyC";
pot_input_CodeValue.KeyV = "KeyV";
pot_input_CodeValue.KeyB = "KeyB";
pot_input_CodeValue.KeyN = "KeyN";
pot_input_CodeValue.KeyM = "KeyM";
pot_input_CodeValue.Comma = "Comma";
pot_input_CodeValue.Period = "Period";
pot_input_CodeValue.Slash = "Slash";
pot_input_CodeValue.ShiftRight = "ShiftRight";
pot_input_CodeValue.NumpadMultiply = "NumpadMultiply";
pot_input_CodeValue.AltLeft = "AltLeft";
pot_input_CodeValue.Space = "Space";
pot_input_CodeValue.CapsLock = "CapsLock";
pot_input_CodeValue.F1 = "F1";
pot_input_CodeValue.F2 = "F2";
pot_input_CodeValue.F3 = "F3";
pot_input_CodeValue.F4 = "F4";
pot_input_CodeValue.F5 = "F5";
pot_input_CodeValue.F6 = "F6";
pot_input_CodeValue.F7 = "F7";
pot_input_CodeValue.F8 = "F8";
pot_input_CodeValue.F9 = "F9";
pot_input_CodeValue.F10 = "F10";
pot_input_CodeValue.Numpad7 = "Numpad7";
pot_input_CodeValue.Numpad8 = "Numpad8";
pot_input_CodeValue.Numpad9 = "Numpad9";
pot_input_CodeValue.NumpadSubtract = "NumpadSubtract";
pot_input_CodeValue.Numpad4 = "Numpad4";
pot_input_CodeValue.Numpad5 = "Numpad5";
pot_input_CodeValue.Numpad6 = "Numpad6";
pot_input_CodeValue.NumpadAdd = "NumpadAdd";
pot_input_CodeValue.Numpad1 = "Numpad1";
pot_input_CodeValue.Numpad2 = "Numpad2";
pot_input_CodeValue.Numpad3 = "Numpad3";
pot_input_CodeValue.Numpad0 = "Numpad0";
pot_input_CodeValue.NumpadDecimal = "NumpadDecimal";
pot_input_CodeValue.IntlBackslash = "IntlBackslash";
pot_input_CodeValue.F11 = "F11";
pot_input_CodeValue.F12 = "F12";
pot_input_CodeValue.IntlYen = "IntlYen";
pot_input_CodeValue.NumpadEnter = "NumpadEnter";
pot_input_CodeValue.ControlRight = "ControlRight";
pot_input_CodeValue.NumpadDivide = "NumpadDivide";
pot_input_CodeValue.PrintScreen = "PrintScreen";
pot_input_CodeValue.AltRight = "AltRight";
pot_input_CodeValue.NumLock = "NumLock";
pot_input_CodeValue.Home = "Home";
pot_input_CodeValue.ArrowUp = "ArrowUp";
pot_input_CodeValue.PageUp = "PageUp";
pot_input_CodeValue.ArrowLeft = "ArrowLeft";
pot_input_CodeValue.ArrowRight = "ArrowRight";
pot_input_CodeValue.End = "End";
pot_input_CodeValue.ArrowDown = "ArrowDown";
pot_input_CodeValue.PageDown = "PageDown";
pot_input_CodeValue.Insert = "Insert";
pot_input_CodeValue.Delete = "Delete";
pot_input_CodeValue.ContextMenu = "ContextMenu";
pot_input_CodeValue.DIGITS = ["Digit0","Digit1","Digit2","Digit3","Digit4","Digit5","Digit6","Digit7","Digit8","Digit9"];
pot_input_CodeValue.FUNCTIONS = ["F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12"];
pot_input_CodeValue.ALL = ["Escape","Digit0","Digit1","Digit2","Digit3","Digit4","Digit5","Digit6","Digit7","Digit8","Digit9","Minus","Equal","Backspace","Tab","KeyQ","KeyW","KeyE","KeyR","KeyT","KeyY","KeyU","KeyI","KeyO","KeyP","BracketLeft","BracketRight","Enter","ControlLeft","KeyA","KeyS","KeyD","KeyF","KeyG","KeyH","KeyJ","KeyK","KeyL","Semicolon","Quote","Backquote","ShiftLeft","Backslash","KeyZ","KeyX","KeyC","KeyV","KeyB","KeyN","KeyM","Comma","Period","Slash","ShiftRight","NumpadMultiply","AltLeft","Space","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","Numpad7","Numpad8","Numpad9","NumpadSubtract","Numpad4","Numpad5","Numpad6","NumpadAdd","Numpad1","Numpad2","Numpad3","Numpad0","NumpadDecimal","IntlBackslash","F11","F12","IntlYen","NumpadEnter","ControlRight","NumpadDivide","PrintScreen","AltRight","NumLock","Home","ArrowUp","PageUp","ArrowLeft","ArrowRight","End","ArrowDown","PageDown","Insert","Delete","ContextMenu"];
test_PotTest.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
