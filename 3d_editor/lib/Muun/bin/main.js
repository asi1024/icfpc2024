// Generated by Haxe 4.3.1
(function ($global) { "use strict";
class MuunTest {
	constructor() {
		this.testVec2();
		this.testVec3();
		this.testVec4();
		this.testMat2();
		this.testMat3();
		this.testQuat();
	}
	testVec2() {
		let b_x = 1;
		let b_y = 2;
		let a_x = 3;
		let a_y = 4;
		let b = 2;
		let a_x1 = b_x * b;
		let a_y1 = b_y * b;
		let b1 = 3;
		let b_x1 = a_x * b1;
		let b_y1 = a_y * b1;
		let b_x2 = a_x1 + b_x1;
		let b_y2 = a_y1 + b_y1;
		let a_x2 = 5 / b_x2;
		let a_y2 = 5 / b_y2;
		let l = Math.sqrt(a_x * a_x + a_y * a_y);
		if(l > 0) {
			l = 1 / l;
		}
		let b2 = l;
		let b_x3 = a_x * b2;
		let b_y3 = a_y * b2;
		let a_x3 = a_x2 * b_x3;
		let a_y3 = a_y2 * b_y3;
		let a_x4 = a_x3 * 114;
		let a_y4 = a_y3 * 114;
		let b3 = b_x * a_x + b_y * a_y;
		let a_x5 = a_x4 / b3;
		let a_y5 = a_y4 / b3;
		let a_x6 = a_x5 * b_x;
		let a_y6 = a_y5 * b_y;
		let b4 = 514;
		let b_x4 = a_x * b4;
		let b_y4 = a_y * b4;
		let c_x = a_x6 + b_x4;
		let c_y = a_y6 + b_y4;
		let d = b_x * a_y - b_y * a_x;
		let imb_x = b_x + b_x;
		let imb_y = b_y + b_y;
		console.log("src/MuunTest.hx:26:",c_x + " " + Math.sqrt(b_x * b_x + b_y * b_y) + " " + d);
	}
	testVec3() {
		let b_x = 1;
		let b_y = 2;
		let b_z = 3;
		let a_x = 4;
		let a_y = 5;
		let a_z = 6;
		let b = 2;
		let a_x1 = b_x * b;
		let a_y1 = b_y * b;
		let a_z1 = b_z * b;
		let b1 = 3;
		let b_x1 = a_x * b1;
		let b_y1 = a_y * b1;
		let b_z1 = a_z * b1;
		let b_x2 = a_x1 + b_x1;
		let b_y2 = a_y1 + b_y1;
		let b_z2 = a_z1 + b_z1;
		let a_x2 = 5 / b_x2;
		let a_y2 = 5 / b_y2;
		let a_z2 = 5 / b_z2;
		let l = Math.sqrt(a_x * a_x + a_y * a_y + a_z * a_z);
		if(l > 0) {
			l = 1 / l;
		}
		let b2 = l;
		let b_x3 = a_x * b2;
		let b_y3 = a_y * b2;
		let b_z3 = a_z * b2;
		let a_x3 = a_x2 * b_x3;
		let a_y3 = a_y2 * b_y3;
		let a_z3 = a_z2 * b_z3;
		let a_x4 = a_x3 * 114;
		let a_y4 = a_y3 * 114;
		let a_z4 = a_z3 * 114;
		let b3 = b_x * a_x + b_y * a_y + b_z * a_z;
		let a_x5 = a_x4 / b3;
		let a_y5 = a_y4 / b3;
		let a_z5 = a_z4 / b3;
		let a_x6 = a_x5 * b_x;
		let a_y6 = a_y5 * b_y;
		let a_z6 = a_z5 * b_z;
		let b4 = 514;
		let b_x4 = a_x * b4;
		let b_y4 = a_y * b4;
		let b_z4 = a_z * b4;
		let c_x = a_x6 + b_x4;
		let c_y = a_y6 + b_y4;
		let c_z = a_z6 + b_z4;
		let this_x = b_y * a_z - b_z * a_y;
		let this_y = b_z * a_x - b_x * a_z;
		let this_z = b_x * a_y - b_y * a_x;
		let this_x1 = this_y * c_z - this_z * c_y;
		let this_y1 = this_z * c_x - this_x * c_z;
		let this_z1 = this_x * c_y - this_y * c_x;
		let d_x = this_y1 * b_z - this_z1 * b_y;
		let d_y = this_z1 * b_x - this_x1 * b_z;
		let d_z = this_x1 * b_y - this_y1 * b_x;
		let b_x5 = d_x;
		let b_y5 = d_y;
		let b_z5 = d_z;
		b_x = b_x5;
		b_y = b_y5;
		b_z = b_z5;
		console.log("src/MuunTest.hx:35:",c_x + " " + Math.sqrt(b_x * b_x + b_y * b_y + b_z * b_z));
	}
	testVec4() {
		let b_x = 1;
		let b_y = 2;
		let b_z = 3;
		let b_w = 4;
		let a_x = 4;
		let a_y = 5;
		let a_z = 6;
		let a_w = 7;
		let b = 2;
		let a_x1 = b_x * b;
		let a_y1 = b_y * b;
		let a_z1 = b_z * b;
		let a_w1 = b_w * b;
		let b1 = 3;
		let b_x1 = a_x * b1;
		let b_y1 = a_y * b1;
		let b_z1 = a_z * b1;
		let b_w1 = a_w * b1;
		let b_x2 = a_x1 + b_x1;
		let b_y2 = a_y1 + b_y1;
		let b_z2 = a_z1 + b_z1;
		let b_w2 = a_w1 + b_w1;
		let a_x2 = 5 / b_x2;
		let a_y2 = 5 / b_y2;
		let a_z2 = 5 / b_z2;
		let a_w2 = 5 / b_w2;
		let l = Math.sqrt(a_x * a_x + a_y * a_y + a_z * a_z + a_w * a_w);
		if(l > 0) {
			l = 1 / l;
		}
		let b2 = l;
		let b_x3 = a_x * b2;
		let b_y3 = a_y * b2;
		let b_z3 = a_z * b2;
		let b_w3 = a_w * b2;
		let a_x3 = a_x2 * b_x3;
		let a_y3 = a_y2 * b_y3;
		let a_z3 = a_z2 * b_z3;
		let a_w3 = a_w2 * b_w3;
		let a_x4 = a_x3 * 114;
		let a_y4 = a_y3 * 114;
		let a_z4 = a_z3 * 114;
		let a_w4 = a_w3 * 114;
		let b3 = b_x * a_x + b_y * a_y + b_z * a_z + b_w * a_w;
		let a_x5 = a_x4 / b3;
		let a_y5 = a_y4 / b3;
		let a_z5 = a_z4 / b3;
		let a_w5 = a_w4 / b3;
		let a_x6 = a_x5 * b_x;
		let a_y6 = a_y5 * b_y;
		let a_z6 = a_z5 * b_z;
		let a_w6 = a_w5 * b_w;
		let b4 = 514;
		let b_x4 = a_x * b4;
		let b_y4 = a_y * b4;
		let b_z4 = a_z * b4;
		let b_w4 = a_w * b4;
		let c_x = a_x6 + b_x4;
		let c_y = a_y6 + b_y4;
		let c_z = a_z6 + b_z4;
		let c_w = a_w6 + b_w4;
		let b_x5 = c_y;
		let b_y5 = c_z;
		let b_z5 = c_x;
		let b_w5 = c_w;
		b_x = b_x5;
		b_y = b_y5;
		b_z = b_z5;
		b_w = b_w5;
		let b_x6 = b_y;
		let b_y6 = b_z;
		let b_z6 = b_x;
		let b_w6 = b_w;
		b_x = b_x6;
		b_y = b_y6;
		b_z = b_z6;
		b_w = b_w6;
		console.log("src/MuunTest.hx:44:",c_x + " " + Math.sqrt(b_x * b_x + b_y * b_y + b_z * b_z + b_w * b_w));
	}
	testMat2() {
		let a_e00 = 1;
		let a_e01 = 0;
		let a_e10 = 0;
		let a_e11 = 1;
		let b_e00 = a_e00 * 3;
		let b_e01 = a_e01 * 3;
		let b_e10 = a_e10 * 3;
		let b_e11 = a_e11 * 3;
		let b = 2;
		let a_e001 = a_e00 * b;
		let a_e011 = a_e01 * b;
		let a_e101 = a_e10 * b;
		let a_e111 = a_e11 * b;
		let b1 = 3;
		let b_e001 = b_e00 * b1;
		let b_e011 = b_e01 * b1;
		let b_e101 = b_e10 * b1;
		let b_e111 = b_e11 * b1;
		let a_e002 = a_e001 + b_e001;
		let a_e012 = a_e011 + b_e011;
		let a_e102 = a_e101 + b_e101;
		let a_e112 = a_e111 + b_e111;
		let b_e002 = 1;
		let b_e012 = 1;
		let b_e102 = 1;
		let b_e112 = 1;
		let b_e003 = a_e002 + b_e002;
		let b_e013 = a_e012 + b_e012;
		let b_e103 = a_e102 + b_e102;
		let b_e113 = a_e112 + b_e112;
		let idet = b_e003 * b_e113 - b_e013 * b_e103;
		if(idet != 0) {
			idet = 1 / idet;
		}
		let rhs_e00 = b_e113 * idet;
		let rhs_e01 = -b_e013 * idet;
		let rhs_e10 = -b_e103 * idet;
		let rhs_e11 = b_e003 * idet;
		let b2 = 5;
		let a_e003 = rhs_e00 * b2;
		let a_e013 = rhs_e01 * b2;
		let a_e103 = rhs_e10 * b2;
		let a_e113 = rhs_e11 * b2;
		let b_e004 = b_e00;
		let b_e014 = b_e10;
		let b_e104 = b_e01;
		let b_e114 = b_e11;
		let a_e004 = a_e003 * b_e004 + a_e013 * b_e104;
		let a_e014 = a_e003 * b_e014 + a_e013 * b_e114;
		let a_e104 = a_e103 * b_e004 + a_e113 * b_e104;
		let a_e114 = a_e103 * b_e014 + a_e113 * b_e114;
		let a_e005 = a_e004 * 114;
		let a_e015 = a_e014 * 114;
		let a_e105 = a_e104 * 114;
		let a_e115 = a_e114 * 114;
		let a_e006 = a_e00 * b_e00 + a_e01 * b_e10;
		let a_e016 = a_e00 * b_e01 + a_e01 * b_e11;
		let a_e106 = a_e10 * b_e00 + a_e11 * b_e10;
		let a_e116 = a_e10 * b_e01 + a_e11 * b_e11;
		let b_e005 = 1;
		let b_e015 = 1;
		let b_e105 = 1;
		let b_e115 = 1;
		let b_e006 = a_e006 + b_e005;
		let b_e016 = a_e016 + b_e015;
		let b_e106 = a_e106 + b_e105;
		let b_e116 = a_e116 + b_e115;
		let idet1 = b_e006 * b_e116 - b_e016 * b_e106;
		if(idet1 != 0) {
			idet1 = 1 / idet1;
		}
		let b_e007 = b_e116 * idet1;
		let b_e017 = -b_e016 * idet1;
		let b_e107 = -b_e106 * idet1;
		let b_e117 = b_e006 * idet1;
		let a_e007 = a_e005 * b_e007 + a_e015 * b_e107;
		let a_e017 = a_e005 * b_e017 + a_e015 * b_e117;
		let a_e107 = a_e105 * b_e007 + a_e115 * b_e107;
		let a_e117 = a_e105 * b_e017 + a_e115 * b_e117;
		let a_e008 = a_e007 * a_e00 + a_e017 * a_e10;
		let a_e018 = a_e007 * a_e01 + a_e017 * a_e11;
		let a_e108 = a_e107 * a_e00 + a_e117 * a_e10;
		let a_e118 = a_e107 * a_e01 + a_e117 * a_e11;
		let b3 = 514;
		let b_e008 = b_e00 * b3;
		let b_e018 = b_e01 * b3;
		let b_e108 = b_e10 * b3;
		let b_e118 = b_e11 * b3;
		let c_e00 = a_e008 + b_e008;
		let c_e01 = a_e018 + b_e018;
		let c_e10 = a_e108 + b_e108;
		let c_e11 = a_e118 + b_e118;
		let b_e009 = c_e00;
		let b_e019 = c_e10;
		let b_e109 = c_e01;
		let b_e119 = c_e11;
		c_e00 = b_e009;
		c_e01 = b_e019;
		c_e10 = b_e109;
		c_e11 = b_e119;
		let b_e0010 = c_e00;
		let b_e0110 = c_e10;
		let b_e1010 = c_e01;
		let b_e1110 = c_e11;
		c_e00 = b_e0010;
		c_e01 = b_e0110;
		c_e10 = b_e1010;
		c_e11 = b_e1110;
		let b_e0011 = c_e00;
		let b_e0111 = c_e10;
		let b_e1011 = c_e01;
		let b_e1111 = c_e11;
		c_e00 = b_e0011;
		c_e01 = b_e0111;
		c_e10 = b_e1011;
		c_e11 = b_e1111;
		let b_e0012 = c_e00;
		let b_e0112 = c_e10;
		let b_e1012 = c_e01;
		let b_e1112 = c_e11;
		c_e00 = b_e0012;
		c_e01 = b_e0112;
		c_e10 = b_e1012;
		c_e11 = b_e1112;
		let b_e0013 = c_e00;
		let b_e0113 = c_e10;
		let b_e1013 = c_e01;
		let b_e1113 = c_e11;
		c_e00 = b_e0013;
		c_e01 = b_e0113;
		c_e10 = b_e1013;
		c_e11 = b_e1113;
		let s = Math.sin(3.34);
		let c = Math.cos(3.34);
		let a_e009 = c;
		let a_e019 = -s;
		let a_e109 = s;
		let a_e119 = c;
		let d_e00 = a_e009 * c_e00 + a_e019 * c_e10;
		let d_e01 = a_e009 * c_e01 + a_e019 * c_e11;
		let d_e10 = a_e109 * c_e00 + a_e119 * c_e10;
		let d_e11 = a_e109 * c_e01 + a_e119 * c_e11;
		let b_e0014 = d_e00;
		let b_e0114 = d_e01;
		let b_e1014 = d_e10;
		let b_e1114 = d_e11;
		a_e00 = b_e0014;
		a_e01 = b_e0114;
		a_e10 = b_e1014;
		a_e11 = b_e1114;
		let b_e0015 = c_e00;
		let b_e0115 = c_e10;
		let b_e1015 = c_e01;
		let b_e1115 = c_e11;
		let this_e00 = c_e00 * b_e0015 + c_e01 * b_e1015;
		let this_e01 = c_e00 * b_e0115 + c_e01 * b_e1115;
		let this_e10 = c_e10 * b_e0015 + c_e11 * b_e1015;
		let this_e11 = c_e10 * b_e0115 + c_e11 * b_e1115;
		console.log("src/MuunTest.hx:58:",c_e00 + " " + (this_e00 + this_e11));
	}
	testMat3() {
		let a_e00 = 1;
		let a_e01 = 0;
		let a_e02 = 0;
		let a_e10 = 0;
		let a_e11 = 1;
		let a_e12 = 0;
		let a_e20 = 0;
		let a_e21 = 0;
		let a_e22 = 1;
		let this_x = 3;
		let this_y = 3;
		let this_z = 4;
		let b_e00 = this_x;
		let b_e01 = 0;
		let b_e02 = 0;
		let b_e10 = 0;
		let b_e11 = this_y;
		let b_e12 = 0;
		let b_e20 = 0;
		let b_e21 = 0;
		let b_e22 = this_z;
		let b = 2;
		let a_e001 = a_e00 * b;
		let a_e011 = a_e01 * b;
		let a_e021 = a_e02 * b;
		let a_e101 = a_e10 * b;
		let a_e111 = a_e11 * b;
		let a_e121 = a_e12 * b;
		let a_e201 = a_e20 * b;
		let a_e211 = a_e21 * b;
		let a_e221 = a_e22 * b;
		let b1 = 3;
		let b_e001 = b_e00 * b1;
		let b_e011 = b_e01 * b1;
		let b_e021 = b_e02 * b1;
		let b_e101 = b_e10 * b1;
		let b_e111 = b_e11 * b1;
		let b_e121 = b_e12 * b1;
		let b_e201 = b_e20 * b1;
		let b_e211 = b_e21 * b1;
		let b_e221 = b_e22 * b1;
		let a_e002 = a_e001 + b_e001;
		let a_e012 = a_e011 + b_e011;
		let a_e022 = a_e021 + b_e021;
		let a_e102 = a_e101 + b_e101;
		let a_e112 = a_e111 + b_e111;
		let a_e122 = a_e121 + b_e121;
		let a_e202 = a_e201 + b_e201;
		let a_e212 = a_e211 + b_e211;
		let a_e222 = a_e221 + b_e221;
		let b_e002 = 1;
		let b_e012 = 1;
		let b_e022 = 1;
		let b_e102 = 1;
		let b_e112 = 1;
		let b_e122 = 1;
		let b_e202 = 1;
		let b_e212 = 1;
		let b_e222 = 1;
		let b_e003 = a_e002 + b_e002;
		let b_e013 = a_e012 + b_e012;
		let b_e023 = a_e022 + b_e022;
		let b_e103 = a_e102 + b_e102;
		let b_e113 = a_e112 + b_e112;
		let b_e123 = a_e122 + b_e122;
		let b_e203 = a_e202 + b_e202;
		let b_e213 = a_e212 + b_e212;
		let b_e223 = a_e222 + b_e222;
		let e00 = b_e003;
		let e01 = b_e013;
		let e02 = b_e023;
		let e10 = b_e103;
		let e11 = b_e113;
		let e12 = b_e123;
		let e20 = b_e203;
		let e21 = b_e213;
		let e22 = b_e223;
		let d00 = e11 * e22 - e12 * e21;
		let d01 = e10 * e22 - e12 * e20;
		let d02 = e10 * e21 - e11 * e20;
		let d10 = e01 * e22 - e02 * e21;
		let d11 = e00 * e22 - e02 * e20;
		let d12 = e00 * e21 - e01 * e20;
		let d20 = e01 * e12 - e02 * e11;
		let d21 = e00 * e12 - e02 * e10;
		let d22 = e00 * e11 - e01 * e10;
		let idet = e00 * d00 - e01 * d01 + e02 * d02;
		if(idet != 0) {
			idet = 1 / idet;
		}
		let rhs_e00 = d00 * idet;
		let rhs_e01 = -d10 * idet;
		let rhs_e02 = d20 * idet;
		let rhs_e10 = -d01 * idet;
		let rhs_e11 = d11 * idet;
		let rhs_e12 = -d21 * idet;
		let rhs_e20 = d02 * idet;
		let rhs_e21 = -d12 * idet;
		let rhs_e22 = d22 * idet;
		let b2 = 5;
		let a_e003 = rhs_e00 * b2;
		let a_e013 = rhs_e01 * b2;
		let a_e023 = rhs_e02 * b2;
		let a_e103 = rhs_e10 * b2;
		let a_e113 = rhs_e11 * b2;
		let a_e123 = rhs_e12 * b2;
		let a_e203 = rhs_e20 * b2;
		let a_e213 = rhs_e21 * b2;
		let a_e223 = rhs_e22 * b2;
		let b_e004 = b_e00;
		let b_e014 = b_e10;
		let b_e024 = b_e20;
		let b_e104 = b_e01;
		let b_e114 = b_e11;
		let b_e124 = b_e21;
		let b_e204 = b_e02;
		let b_e214 = b_e12;
		let b_e224 = b_e22;
		let a00 = a_e003;
		let a01 = a_e013;
		let a02 = a_e023;
		let a10 = a_e103;
		let a11 = a_e113;
		let a12 = a_e123;
		let a20 = a_e203;
		let a21 = a_e213;
		let a22 = a_e223;
		let b00 = b_e004;
		let b01 = b_e014;
		let b02 = b_e024;
		let b10 = b_e104;
		let b11 = b_e114;
		let b12 = b_e124;
		let b20 = b_e204;
		let b21 = b_e214;
		let b22 = b_e224;
		let a_e004 = a00 * b00 + a01 * b10 + a02 * b20;
		let a_e014 = a00 * b01 + a01 * b11 + a02 * b21;
		let a_e024 = a00 * b02 + a01 * b12 + a02 * b22;
		let a_e104 = a10 * b00 + a11 * b10 + a12 * b20;
		let a_e114 = a10 * b01 + a11 * b11 + a12 * b21;
		let a_e124 = a10 * b02 + a11 * b12 + a12 * b22;
		let a_e204 = a20 * b00 + a21 * b10 + a22 * b20;
		let a_e214 = a20 * b01 + a21 * b11 + a22 * b21;
		let a_e224 = a20 * b02 + a21 * b12 + a22 * b22;
		let a_e005 = a_e004 * 114;
		let a_e015 = a_e014 * 114;
		let a_e025 = a_e024 * 114;
		let a_e105 = a_e104 * 114;
		let a_e115 = a_e114 * 114;
		let a_e125 = a_e124 * 114;
		let a_e205 = a_e204 * 114;
		let a_e215 = a_e214 * 114;
		let a_e225 = a_e224 * 114;
		let a001 = a_e00;
		let a011 = a_e01;
		let a021 = a_e02;
		let a101 = a_e10;
		let a111 = a_e11;
		let a121 = a_e12;
		let a201 = a_e20;
		let a211 = a_e21;
		let a221 = a_e22;
		let b001 = b_e00;
		let b011 = b_e01;
		let b021 = b_e02;
		let b101 = b_e10;
		let b111 = b_e11;
		let b121 = b_e12;
		let b201 = b_e20;
		let b211 = b_e21;
		let b221 = b_e22;
		let a_e006 = a001 * b001 + a011 * b101 + a021 * b201;
		let a_e016 = a001 * b011 + a011 * b111 + a021 * b211;
		let a_e026 = a001 * b021 + a011 * b121 + a021 * b221;
		let a_e106 = a101 * b001 + a111 * b101 + a121 * b201;
		let a_e116 = a101 * b011 + a111 * b111 + a121 * b211;
		let a_e126 = a101 * b021 + a111 * b121 + a121 * b221;
		let a_e206 = a201 * b001 + a211 * b101 + a221 * b201;
		let a_e216 = a201 * b011 + a211 * b111 + a221 * b211;
		let a_e226 = a201 * b021 + a211 * b121 + a221 * b221;
		let b_e005 = 1;
		let b_e015 = 1;
		let b_e025 = 1;
		let b_e105 = 1;
		let b_e115 = 1;
		let b_e125 = 1;
		let b_e205 = 1;
		let b_e215 = 1;
		let b_e225 = 1;
		let b_e006 = a_e006 + b_e005;
		let b_e016 = a_e016 + b_e015;
		let b_e026 = a_e026 + b_e025;
		let b_e106 = a_e106 + b_e105;
		let b_e116 = a_e116 + b_e115;
		let b_e126 = a_e126 + b_e125;
		let b_e206 = a_e206 + b_e205;
		let b_e216 = a_e216 + b_e215;
		let b_e226 = a_e226 + b_e225;
		let e001 = b_e006;
		let e011 = b_e016;
		let e021 = b_e026;
		let e101 = b_e106;
		let e111 = b_e116;
		let e121 = b_e126;
		let e201 = b_e206;
		let e211 = b_e216;
		let e221 = b_e226;
		let d001 = e111 * e221 - e121 * e211;
		let d011 = e101 * e221 - e121 * e201;
		let d021 = e101 * e211 - e111 * e201;
		let d101 = e011 * e221 - e021 * e211;
		let d111 = e001 * e221 - e021 * e201;
		let d121 = e001 * e211 - e011 * e201;
		let d201 = e011 * e121 - e021 * e111;
		let d211 = e001 * e121 - e021 * e101;
		let d221 = e001 * e111 - e011 * e101;
		let idet1 = e001 * d001 - e011 * d011 + e021 * d021;
		if(idet1 != 0) {
			idet1 = 1 / idet1;
		}
		let b_e007 = d001 * idet1;
		let b_e017 = -d101 * idet1;
		let b_e027 = d201 * idet1;
		let b_e107 = -d011 * idet1;
		let b_e117 = d111 * idet1;
		let b_e127 = -d211 * idet1;
		let b_e207 = d021 * idet1;
		let b_e217 = -d121 * idet1;
		let b_e227 = d221 * idet1;
		let a002 = a_e005;
		let a012 = a_e015;
		let a022 = a_e025;
		let a102 = a_e105;
		let a112 = a_e115;
		let a122 = a_e125;
		let a202 = a_e205;
		let a212 = a_e215;
		let a222 = a_e225;
		let b002 = b_e007;
		let b012 = b_e017;
		let b022 = b_e027;
		let b102 = b_e107;
		let b112 = b_e117;
		let b122 = b_e127;
		let b202 = b_e207;
		let b212 = b_e217;
		let b222 = b_e227;
		let a_e007 = a002 * b002 + a012 * b102 + a022 * b202;
		let a_e017 = a002 * b012 + a012 * b112 + a022 * b212;
		let a_e027 = a002 * b022 + a012 * b122 + a022 * b222;
		let a_e107 = a102 * b002 + a112 * b102 + a122 * b202;
		let a_e117 = a102 * b012 + a112 * b112 + a122 * b212;
		let a_e127 = a102 * b022 + a112 * b122 + a122 * b222;
		let a_e207 = a202 * b002 + a212 * b102 + a222 * b202;
		let a_e217 = a202 * b012 + a212 * b112 + a222 * b212;
		let a_e227 = a202 * b022 + a212 * b122 + a222 * b222;
		let a003 = a_e007;
		let a013 = a_e017;
		let a023 = a_e027;
		let a103 = a_e107;
		let a113 = a_e117;
		let a123 = a_e127;
		let a203 = a_e207;
		let a213 = a_e217;
		let a223 = a_e227;
		let b003 = a_e00;
		let b013 = a_e01;
		let b023 = a_e02;
		let b103 = a_e10;
		let b113 = a_e11;
		let b123 = a_e12;
		let b203 = a_e20;
		let b213 = a_e21;
		let b223 = a_e22;
		let a_e008 = a003 * b003 + a013 * b103 + a023 * b203;
		let a_e018 = a003 * b013 + a013 * b113 + a023 * b213;
		let a_e028 = a003 * b023 + a013 * b123 + a023 * b223;
		let a_e108 = a103 * b003 + a113 * b103 + a123 * b203;
		let a_e118 = a103 * b013 + a113 * b113 + a123 * b213;
		let a_e128 = a103 * b023 + a113 * b123 + a123 * b223;
		let a_e208 = a203 * b003 + a213 * b103 + a223 * b203;
		let a_e218 = a203 * b013 + a213 * b113 + a223 * b213;
		let a_e228 = a203 * b023 + a213 * b123 + a223 * b223;
		let b3 = 514;
		let b_e008 = b_e00 * b3;
		let b_e018 = b_e01 * b3;
		let b_e028 = b_e02 * b3;
		let b_e108 = b_e10 * b3;
		let b_e118 = b_e11 * b3;
		let b_e128 = b_e12 * b3;
		let b_e208 = b_e20 * b3;
		let b_e218 = b_e21 * b3;
		let b_e228 = b_e22 * b3;
		let c = new muun_la__$Mat3_Mat3Data(a_e008 + b_e008,a_e018 + b_e018,a_e028 + b_e028,a_e108 + b_e108,a_e118 + b_e118,a_e128 + b_e128,a_e208 + b_e208,a_e218 + b_e218,a_e228 + b_e228);
		c = new muun_la__$Mat3_Mat3Data(c.e00,c.e10,c.e20,c.e01,c.e11,c.e21,c.e02,c.e12,c.e22);
		c = new muun_la__$Mat3_Mat3Data(c.e00,c.e10,c.e20,c.e01,c.e11,c.e21,c.e02,c.e12,c.e22);
		c = new muun_la__$Mat3_Mat3Data(c.e00,c.e10,c.e20,c.e01,c.e11,c.e21,c.e02,c.e12,c.e22);
		c = new muun_la__$Mat3_Mat3Data(c.e00,c.e10,c.e20,c.e01,c.e11,c.e21,c.e02,c.e12,c.e22);
		c = new muun_la__$Mat3_Mat3Data(c.e00,c.e10,c.e20,c.e01,c.e11,c.e21,c.e02,c.e12,c.e22);
		let axis_x = 1;
		let axis_y = 0;
		let axis_z = 0;
		let s = Math.sin(3.34);
		let c1 = Math.cos(3.34);
		let c11 = 1 - c1;
		let ax = axis_x;
		let ay = axis_y;
		let az = axis_z;
		let a_e009 = ax * ax * c11 + c1;
		let a_e019 = ax * ay * c11 - az * s;
		let a_e029 = ax * az * c11 + ay * s;
		let a_e109 = ay * ax * c11 + az * s;
		let a_e119 = ay * ay * c11 + c1;
		let a_e129 = ay * az * c11 - ax * s;
		let a_e209 = az * ax * c11 - ay * s;
		let a_e219 = az * ay * c11 + ax * s;
		let a_e229 = az * az * c11 + c1;
		let a004 = a_e009;
		let a014 = a_e019;
		let a024 = a_e029;
		let a104 = a_e109;
		let a114 = a_e119;
		let a124 = a_e129;
		let a204 = a_e209;
		let a214 = a_e219;
		let a224 = a_e229;
		let b004 = c.e00;
		let b014 = c.e01;
		let b024 = c.e02;
		let b104 = c.e10;
		let b114 = c.e11;
		let b124 = c.e12;
		let b204 = c.e20;
		let b214 = c.e21;
		let b224 = c.e22;
		let d_e00 = a004 * b004 + a014 * b104 + a024 * b204;
		let d_e01 = a004 * b014 + a014 * b114 + a024 * b214;
		let d_e02 = a004 * b024 + a014 * b124 + a024 * b224;
		let d_e10 = a104 * b004 + a114 * b104 + a124 * b204;
		let d_e11 = a104 * b014 + a114 * b114 + a124 * b214;
		let d_e12 = a104 * b024 + a114 * b124 + a124 * b224;
		let d_e20 = a204 * b004 + a214 * b104 + a224 * b204;
		let d_e21 = a204 * b014 + a214 * b114 + a224 * b214;
		let d_e22 = a204 * b024 + a214 * b124 + a224 * b224;
		let b_e009 = d_e00;
		let b_e019 = d_e01;
		let b_e029 = d_e02;
		let b_e109 = d_e10;
		let b_e119 = d_e11;
		let b_e129 = d_e12;
		let b_e209 = d_e20;
		let b_e219 = d_e21;
		let b_e229 = d_e22;
		a_e00 = b_e009;
		a_e01 = b_e019;
		a_e02 = b_e029;
		a_e10 = b_e109;
		a_e11 = b_e119;
		a_e12 = b_e129;
		a_e20 = b_e209;
		a_e21 = b_e219;
		a_e22 = b_e229;
		let b_e0010 = c.e00;
		let b_e0110 = c.e10;
		let b_e0210 = c.e20;
		let b_e1010 = c.e01;
		let b_e1110 = c.e11;
		let b_e1210 = c.e21;
		let b_e2010 = c.e02;
		let b_e2110 = c.e12;
		let b_e2210 = c.e22;
		let a005 = c.e00;
		let a015 = c.e01;
		let a025 = c.e02;
		let a105 = c.e10;
		let a115 = c.e11;
		let a125 = c.e12;
		let a205 = c.e20;
		let a215 = c.e21;
		let a225 = c.e22;
		let b005 = b_e0010;
		let b015 = b_e0110;
		let b025 = b_e0210;
		let b105 = b_e1010;
		let b115 = b_e1110;
		let b125 = b_e1210;
		let b205 = b_e2010;
		let b215 = b_e2110;
		let b225 = b_e2210;
		let this_e00 = a005 * b005 + a015 * b105 + a025 * b205;
		let this_e01 = a005 * b015 + a015 * b115 + a025 * b215;
		let this_e02 = a005 * b025 + a015 * b125 + a025 * b225;
		let this_e10 = a105 * b005 + a115 * b105 + a125 * b205;
		let this_e11 = a105 * b015 + a115 * b115 + a125 * b215;
		let this_e12 = a105 * b025 + a115 * b125 + a125 * b225;
		let this_e20 = a205 * b005 + a215 * b105 + a225 * b205;
		let this_e21 = a205 * b015 + a215 * b115 + a225 * b215;
		let this_e22 = a205 * b025 + a215 * b125 + a225 * b225;
		console.log("src/MuunTest.hx:72:",c.e00 + " " + (this_e00 + this_e11 + this_e22));
	}
	testQuat() {
		let v1_x = 0;
		let v1_y = 0;
		let v1_z = 1;
		let v2_x = 1;
		let v2_y = 0;
		let v2_z = 0;
		let d = v1_x * v2_x + v1_y * v2_y + v1_z * v2_z;
		let w = Math.sqrt((1 + d) * 0.5);
		let v;
		if(w == 0) {
			let sq_x = v1_x * v1_x;
			let sq_y = v1_y * v1_y;
			let sq_z = v1_z * v1_z;
			let perp_x = 0;
			let perp_y = 0;
			let perp_z = 0;
			if(sq_x < sq_y) {
				if(sq_x < sq_z) {
					perp_x = 1;
				} else {
					perp_z = 1;
				}
			} else if(sq_y < sq_z) {
				perp_y = 1;
			} else {
				perp_z = 1;
			}
			let a_x = v1_y * perp_z - v1_z * perp_y;
			let a_y = v1_z * perp_x - v1_x * perp_z;
			let a_z = v1_x * perp_y - v1_y * perp_x;
			let l = Math.sqrt(a_x * a_x + a_y * a_y + a_z * a_z);
			if(l > 0) {
				l = 1 / l;
			}
			let b = l;
			v = new muun_la__$Vec3_Vec3Data(a_x * b,a_y * b,a_z * b);
		} else {
			let a_x = v1_y * v2_z - v1_z * v2_y;
			let a_y = v1_z * v2_x - v1_x * v2_z;
			let a_z = v1_x * v2_y - v1_y * v2_x;
			let a_x1 = a_x * 0.5;
			let a_y1 = a_y * 0.5;
			let a_z1 = a_z * 0.5;
			let b = w;
			v = new muun_la__$Vec3_Vec3Data(a_x1 / b,a_y1 / b,a_z1 / b);
		}
		let b_x = v.x;
		let b_y = v.y;
		let b_z = v.z;
		let b_w = w;
		console.log("src/MuunTest.hx:76:",Math.sqrt(b_x * b_x + b_y * b_y + b_z * b_z + b_w * b_w));
	}
	static main() {
		new MuunTest();
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
class muun_la_ImVec2 {
	static get_x(this1) {
		return this1.x;
	}
	static get_y(this1) {
		return this1.y;
	}
}
class muun_la_Mat2 {
	static _new(e00,e01,e10,e11) {
		return new muun_la__$Mat2_Mat2Data(e00,e01,e10,e11);
	}
	static toString(this1) {
		return "Mat3(" + this1.e00 + ", " + this1.e01 + "; " + this1.e10 + ", " + this1.e11 + ")";
	}
}
class muun_la__$Mat2_Mat2Data {
	constructor(e00,e01,e10,e11) {
		this.e00 = e00;
		this.e01 = e01;
		this.e10 = e10;
		this.e11 = e11;
	}
}
class muun_la_Mat3 {
	static _new(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
		return new muun_la__$Mat3_Mat3Data(e00,e01,e02,e10,e11,e12,e20,e21,e22);
	}
	static toString(this1) {
		return "Mat3(" + this1.e00 + ", " + this1.e01 + ", " + this1.e02 + "; " + this1.e10 + ", " + this1.e11 + ", " + this1.e12 + "; " + this1.e20 + ", " + this1.e21 + ", " + this1.e22 + ")";
	}
}
class muun_la__$Mat3_Mat3Data {
	constructor(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
		this.e00 = e00;
		this.e01 = e01;
		this.e02 = e02;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
	}
}
class muun_la_Mat4 {
	static _new(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
		return new muun_la__$Mat4_Mat4Data(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33);
	}
	static toString(this1) {
		return "Mat4(" + this1.e00 + ", " + this1.e01 + ", " + this1.e02 + ", " + this1.e03 + "; " + this1.e10 + ", " + this1.e11 + ", " + this1.e12 + ", " + this1.e13 + "; " + this1.e20 + ", " + this1.e21 + ", " + this1.e22 + ", " + this1.e23 + "; " + this1.e30 + ", " + this1.e31 + ", " + this1.e32 + ", " + this1.e33 + ")";
	}
}
class muun_la__$Mat4_Mat4Data {
	constructor(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
		this.e00 = e00;
		this.e01 = e01;
		this.e02 = e02;
		this.e03 = e03;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e13 = e13;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
		this.e23 = e23;
		this.e30 = e30;
		this.e31 = e31;
		this.e32 = e32;
		this.e33 = e33;
	}
}
class muun_la_Quat {
	static toString(this1) {
		return "Quat(" + this1.x + ", " + this1.y + ", " + this1.z + "; " + this1.w + ")";
	}
}
class muun_la__$Quat_QuatData {
	constructor(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
}
class muun_la_Vec2 {
	static _new(x,y) {
		return new muun_la__$Vec2_Vec2Data(x,y);
	}
	static toString(this1) {
		return "Vec2(" + this1.x + ", " + this1.y + ")";
	}
}
class muun_la__$Vec2_Vec2Data {
	constructor(x,y) {
		this.x = x;
		this.y = y;
	}
}
class muun_la_Vec3 {
	static _new(x,y,z) {
		return new muun_la__$Vec3_Vec3Data(x,y,z);
	}
	static toString(this1) {
		return "Vec3(" + this1.x + ", " + this1.y + ", " + this1.z + ")";
	}
}
class muun_la__$Vec3_Vec3Data {
	constructor(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
}
class muun_la_Vec4 {
	static _new(x,y,z,w) {
		return new muun_la__$Vec4_Vec4Data(x,y,z,w);
	}
	static toString(this1) {
		return "Vec4(" + this1.x + ", " + this1.y + ", " + this1.z + ", " + this1.w + ")";
	}
}
class muun_la__$Vec4_Vec4Data {
	constructor(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
}
{
}
MuunTest.main();
})({});
